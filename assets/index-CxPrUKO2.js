(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))n(r);new MutationObserver(r=>{for(const i of r)if(i.type==="childList")for(const s of i.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&n(s)}).observe(document,{childList:!0,subtree:!0});function a(r){const i={};return r.integrity&&(i.integrity=r.integrity),r.referrerPolicy&&(i.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?i.credentials="include":r.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function n(r){if(r.ep)return;r.ep=!0;const i=a(r);fetch(r.href,i)}})();/**
* @vue/shared v3.5.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/function sr(e){const t=Object.create(null);for(const a of e.split(","))t[a]=1;return a=>a in t}const de={},Vt=[],st=()=>{},Wi=()=>!1,pn=e=>e.charCodeAt(0)===111&&e.charCodeAt(1)===110&&(e.charCodeAt(2)>122||e.charCodeAt(2)<97),or=e=>e.startsWith("onUpdate:"),Me=Object.assign,dr=(e,t)=>{const a=e.indexOf(t);a>-1&&e.splice(a,1)},tu=Object.prototype.hasOwnProperty,re=(e,t)=>tu.call(e,t),V=Array.isArray,jt=e=>Na(e)==="[object Map]",fn=e=>Na(e)==="[object Set]",jr=e=>Na(e)==="[object Date]",Q=e=>typeof e=="function",he=e=>typeof e=="string",ot=e=>typeof e=="symbol",me=e=>e!==null&&typeof e=="object",qi=e=>(me(e)||Q(e))&&Q(e.then)&&Q(e.catch),$i=Object.prototype.toString,Na=e=>$i.call(e),au=e=>Na(e).slice(8,-1),Vi=e=>Na(e)==="[object Object]",ur=e=>he(e)&&e!=="NaN"&&e[0]!=="-"&&""+parseInt(e,10)===e,ya=sr(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),yn=e=>{const t=Object.create(null);return(a=>t[a]||(t[a]=e(a)))},nu=/-\w/g,At=yn(e=>e.replace(nu,t=>t.slice(1).toUpperCase())),ru=/\B([A-Z])/g,Rt=yn(e=>e.replace(ru,"-$1").toLowerCase()),ji=yn(e=>e.charAt(0).toUpperCase()+e.slice(1)),Yn=yn(e=>e?`on${ji(e)}`:""),kt=(e,t)=>!Object.is(e,t),Ua=(e,...t)=>{for(let a=0;a<e.length;a++)e[a](...t)},Ki=(e,t,a,n=!1)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,writable:n,value:a})},Qa=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let Kr;const gn=()=>Kr||(Kr=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});function cr(e){if(V(e)){const t={};for(let a=0;a<e.length;a++){const n=e[a],r=he(n)?du(n):cr(n);if(r)for(const i in r)t[i]=r[i]}return t}else if(he(e)||me(e))return e}const iu=/;(?![^(]*\))/g,su=/:([^]+)/,ou=/\/\*[^]*?\*\//g;function du(e){const t={};return e.replace(ou,"").split(iu).forEach(a=>{if(a){const n=a.split(su);n.length>1&&(t[n[0].trim()]=n[1].trim())}}),t}function Ge(e){let t="";if(he(e))t=e;else if(V(e))for(let a=0;a<e.length;a++){const n=Ge(e[a]);n&&(t+=n+" ")}else if(me(e))for(const a in e)e[a]&&(t+=a+" ");return t.trim()}const uu="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",cu=sr(uu);function Qi(e){return!!e||e===""}function lu(e,t){if(e.length!==t.length)return!1;let a=!0;for(let n=0;a&&n<e.length;n++)a=hn(e[n],t[n]);return a}function hn(e,t){if(e===t)return!0;let a=jr(e),n=jr(t);if(a||n)return a&&n?e.getTime()===t.getTime():!1;if(a=ot(e),n=ot(t),a||n)return e===t;if(a=V(e),n=V(t),a||n)return a&&n?lu(e,t):!1;if(a=me(e),n=me(t),a||n){if(!a||!n)return!1;const r=Object.keys(e).length,i=Object.keys(t).length;if(r!==i)return!1;for(const s in e){const o=e.hasOwnProperty(s),d=t.hasOwnProperty(s);if(o&&!d||!o&&d||!hn(e[s],t[s]))return!1}}return String(e)===String(t)}function mu(e,t){return e.findIndex(a=>hn(a,t))}const Zi=e=>!!(e&&e.__v_isRef===!0),K=e=>he(e)?e:e==null?"":V(e)||me(e)&&(e.toString===$i||!Q(e.toString))?Zi(e)?K(e.value):JSON.stringify(e,Ji,2):String(e),Ji=(e,t)=>Zi(t)?Ji(e,t.value):jt(t)?{[`Map(${t.size})`]:[...t.entries()].reduce((a,[n,r],i)=>(a[zn(n,i)+" =>"]=r,a),{})}:fn(t)?{[`Set(${t.size})`]:[...t.values()].map(a=>zn(a))}:ot(t)?zn(t):me(t)&&!V(t)&&!Vi(t)?String(t):t,zn=(e,t="")=>{var a;return ot(e)?`Symbol(${(a=e.description)!=null?a:t})`:e};/**
* @vue/reactivity v3.5.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/let Pe;class pu{constructor(t=!1){this.detached=t,this._active=!0,this._on=0,this.effects=[],this.cleanups=[],this._isPaused=!1,this.parent=Pe,!t&&Pe&&(this.index=(Pe.scopes||(Pe.scopes=[])).push(this)-1)}get active(){return this._active}pause(){if(this._active){this._isPaused=!0;let t,a;if(this.scopes)for(t=0,a=this.scopes.length;t<a;t++)this.scopes[t].pause();for(t=0,a=this.effects.length;t<a;t++)this.effects[t].pause()}}resume(){if(this._active&&this._isPaused){this._isPaused=!1;let t,a;if(this.scopes)for(t=0,a=this.scopes.length;t<a;t++)this.scopes[t].resume();for(t=0,a=this.effects.length;t<a;t++)this.effects[t].resume()}}run(t){if(this._active){const a=Pe;try{return Pe=this,t()}finally{Pe=a}}}on(){++this._on===1&&(this.prevScope=Pe,Pe=this)}off(){this._on>0&&--this._on===0&&(Pe=this.prevScope,this.prevScope=void 0)}stop(t){if(this._active){this._active=!1;let a,n;for(a=0,n=this.effects.length;a<n;a++)this.effects[a].stop();for(this.effects.length=0,a=0,n=this.cleanups.length;a<n;a++)this.cleanups[a]();if(this.cleanups.length=0,this.scopes){for(a=0,n=this.scopes.length;a<n;a++)this.scopes[a].stop(!0);this.scopes.length=0}if(!this.detached&&this.parent&&!t){const r=this.parent.scopes.pop();r&&r!==this&&(this.parent.scopes[this.index]=r,r.index=this.index)}this.parent=void 0}}}function fu(){return Pe}let ce;const On=new WeakSet;class Xi{constructor(t){this.fn=t,this.deps=void 0,this.depsTail=void 0,this.flags=5,this.next=void 0,this.cleanup=void 0,this.scheduler=void 0,Pe&&Pe.active&&Pe.effects.push(this)}pause(){this.flags|=64}resume(){this.flags&64&&(this.flags&=-65,On.has(this)&&(On.delete(this),this.trigger()))}notify(){this.flags&2&&!(this.flags&32)||this.flags&8||ts(this)}run(){if(!(this.flags&1))return this.fn();this.flags|=2,Qr(this),as(this);const t=ce,a=Ke;ce=this,Ke=!0;try{return this.fn()}finally{ns(this),ce=t,Ke=a,this.flags&=-3}}stop(){if(this.flags&1){for(let t=this.deps;t;t=t.nextDep)pr(t);this.deps=this.depsTail=void 0,Qr(this),this.onStop&&this.onStop(),this.flags&=-2}}trigger(){this.flags&64?On.add(this):this.scheduler?this.scheduler():this.runIfDirty()}runIfDirty(){qn(this)&&this.run()}get dirty(){return qn(this)}}let es=0,ga,ha;function ts(e,t=!1){if(e.flags|=8,t){e.next=ha,ha=e;return}e.next=ga,ga=e}function lr(){es++}function mr(){if(--es>0)return;if(ha){let t=ha;for(ha=void 0;t;){const a=t.next;t.next=void 0,t.flags&=-9,t=a}}let e;for(;ga;){let t=ga;for(ga=void 0;t;){const a=t.next;if(t.next=void 0,t.flags&=-9,t.flags&1)try{t.trigger()}catch(n){e||(e=n)}t=a}}if(e)throw e}function as(e){for(let t=e.deps;t;t=t.nextDep)t.version=-1,t.prevActiveLink=t.dep.activeLink,t.dep.activeLink=t}function ns(e){let t,a=e.depsTail,n=a;for(;n;){const r=n.prevDep;n.version===-1?(n===a&&(a=r),pr(n),yu(n)):t=n,n.dep.activeLink=n.prevActiveLink,n.prevActiveLink=void 0,n=r}e.deps=t,e.depsTail=a}function qn(e){for(let t=e.deps;t;t=t.nextDep)if(t.dep.version!==t.version||t.dep.computed&&(rs(t.dep.computed)||t.dep.version!==t.version))return!0;return!!e._dirty}function rs(e){if(e.flags&4&&!(e.flags&16)||(e.flags&=-17,e.globalVersion===Ma)||(e.globalVersion=Ma,!e.isSSR&&e.flags&128&&(!e.deps&&!e._dirty||!qn(e))))return;e.flags|=2;const t=e.dep,a=ce,n=Ke;ce=e,Ke=!0;try{as(e);const r=e.fn(e._value);(t.version===0||kt(r,e._value))&&(e.flags|=128,e._value=r,t.version++)}catch(r){throw t.version++,r}finally{ce=a,Ke=n,ns(e),e.flags&=-3}}function pr(e,t=!1){const{dep:a,prevSub:n,nextSub:r}=e;if(n&&(n.nextSub=r,e.prevSub=void 0),r&&(r.prevSub=n,e.nextSub=void 0),a.subs===e&&(a.subs=n,!n&&a.computed)){a.computed.flags&=-5;for(let i=a.computed.deps;i;i=i.nextDep)pr(i,!0)}!t&&!--a.sc&&a.map&&a.map.delete(a.key)}function yu(e){const{prevDep:t,nextDep:a}=e;t&&(t.nextDep=a,e.prevDep=void 0),a&&(a.prevDep=t,e.nextDep=void 0)}let Ke=!0;const is=[];function gt(){is.push(Ke),Ke=!1}function ht(){const e=is.pop();Ke=e===void 0?!0:e}function Qr(e){const{cleanup:t}=e;if(e.cleanup=void 0,t){const a=ce;ce=void 0;try{t()}finally{ce=a}}}let Ma=0;class gu{constructor(t,a){this.sub=t,this.dep=a,this.version=a.version,this.nextDep=this.prevDep=this.nextSub=this.prevSub=this.prevActiveLink=void 0}}class fr{constructor(t){this.computed=t,this.version=0,this.activeLink=void 0,this.subs=void 0,this.map=void 0,this.key=void 0,this.sc=0,this.__v_skip=!0}track(t){if(!ce||!Ke||ce===this.computed)return;let a=this.activeLink;if(a===void 0||a.sub!==ce)a=this.activeLink=new gu(ce,this),ce.deps?(a.prevDep=ce.depsTail,ce.depsTail.nextDep=a,ce.depsTail=a):ce.deps=ce.depsTail=a,ss(a);else if(a.version===-1&&(a.version=this.version,a.nextDep)){const n=a.nextDep;n.prevDep=a.prevDep,a.prevDep&&(a.prevDep.nextDep=n),a.prevDep=ce.depsTail,a.nextDep=void 0,ce.depsTail.nextDep=a,ce.depsTail=a,ce.deps===a&&(ce.deps=n)}return a}trigger(t){this.version++,Ma++,this.notify(t)}notify(t){lr();try{for(let a=this.subs;a;a=a.prevSub)a.sub.notify()&&a.sub.dep.notify()}finally{mr()}}}function ss(e){if(e.dep.sc++,e.sub.flags&4){const t=e.dep.computed;if(t&&!e.dep.subs){t.flags|=20;for(let n=t.deps;n;n=n.nextDep)ss(n)}const a=e.dep.subs;a!==e&&(e.prevSub=a,a&&(a.nextSub=e)),e.dep.subs=e}}const $n=new WeakMap,Ft=Symbol(""),Vn=Symbol(""),ka=Symbol("");function Te(e,t,a){if(Ke&&ce){let n=$n.get(e);n||$n.set(e,n=new Map);let r=n.get(a);r||(n.set(a,r=new fr),r.map=n,r.key=a),r.track()}}function pt(e,t,a,n,r,i){const s=$n.get(e);if(!s){Ma++;return}const o=d=>{d&&d.trigger()};if(lr(),t==="clear")s.forEach(o);else{const d=V(e),c=d&&ur(a);if(d&&a==="length"){const u=Number(n);s.forEach((l,m)=>{(m==="length"||m===ka||!ot(m)&&m>=u)&&o(l)})}else switch((a!==void 0||s.has(void 0))&&o(s.get(a)),c&&o(s.get(ka)),t){case"add":d?c&&o(s.get("length")):(o(s.get(Ft)),jt(e)&&o(s.get(Vn)));break;case"delete":d||(o(s.get(Ft)),jt(e)&&o(s.get(Vn)));break;case"set":jt(e)&&o(s.get(Ft));break}}mr()}function Ut(e){const t=ne(e);return t===e?t:(Te(t,"iterate",ka),Ve(e)?t:t.map(xe))}function Dn(e){return Te(e=ne(e),"iterate",ka),e}const hu={__proto__:null,[Symbol.iterator](){return Fn(this,Symbol.iterator,xe)},concat(...e){return Ut(this).concat(...e.map(t=>V(t)?Ut(t):t))},entries(){return Fn(this,"entries",e=>(e[1]=xe(e[1]),e))},every(e,t){return ct(this,"every",e,t,void 0,arguments)},filter(e,t){return ct(this,"filter",e,t,a=>a.map(xe),arguments)},find(e,t){return ct(this,"find",e,t,xe,arguments)},findIndex(e,t){return ct(this,"findIndex",e,t,void 0,arguments)},findLast(e,t){return ct(this,"findLast",e,t,xe,arguments)},findLastIndex(e,t){return ct(this,"findLastIndex",e,t,void 0,arguments)},forEach(e,t){return ct(this,"forEach",e,t,void 0,arguments)},includes(...e){return Rn(this,"includes",e)},indexOf(...e){return Rn(this,"indexOf",e)},join(e){return Ut(this).join(e)},lastIndexOf(...e){return Rn(this,"lastIndexOf",e)},map(e,t){return ct(this,"map",e,t,void 0,arguments)},pop(){return la(this,"pop")},push(...e){return la(this,"push",e)},reduce(e,...t){return Zr(this,"reduce",e,t)},reduceRight(e,...t){return Zr(this,"reduceRight",e,t)},shift(){return la(this,"shift")},some(e,t){return ct(this,"some",e,t,void 0,arguments)},splice(...e){return la(this,"splice",e)},toReversed(){return Ut(this).toReversed()},toSorted(e){return Ut(this).toSorted(e)},toSpliced(...e){return Ut(this).toSpliced(...e)},unshift(...e){return la(this,"unshift",e)},values(){return Fn(this,"values",xe)}};function Fn(e,t,a){const n=Dn(e),r=n[t]();return n!==e&&!Ve(e)&&(r._next=r.next,r.next=()=>{const i=r._next();return i.value&&(i.value=a(i.value)),i}),r}const Du=Array.prototype;function ct(e,t,a,n,r,i){const s=Dn(e),o=s!==e&&!Ve(e),d=s[t];if(d!==Du[t]){const l=d.apply(e,i);return o?xe(l):l}let c=a;s!==e&&(o?c=function(l,m){return a.call(this,xe(l),m,e)}:a.length>2&&(c=function(l,m){return a.call(this,l,m,e)}));const u=d.call(s,c,n);return o&&r?r(u):u}function Zr(e,t,a,n){const r=Dn(e);let i=a;return r!==e&&(Ve(e)?a.length>3&&(i=function(s,o,d){return a.call(this,s,o,d,e)}):i=function(s,o,d){return a.call(this,s,xe(o),d,e)}),r[t](i,...n)}function Rn(e,t,a){const n=ne(e);Te(n,"iterate",ka);const r=n[t](...a);return(r===-1||r===!1)&&hr(a[0])?(a[0]=ne(a[0]),n[t](...a)):r}function la(e,t,a=[]){gt(),lr();const n=ne(e)[t].apply(e,a);return mr(),ht(),n}const bu=sr("__proto__,__v_isRef,__isVue"),os=new Set(Object.getOwnPropertyNames(Symbol).filter(e=>e!=="arguments"&&e!=="caller").map(e=>Symbol[e]).filter(ot));function wu(e){ot(e)||(e=String(e));const t=ne(this);return Te(t,"has",e),t.hasOwnProperty(e)}class ds{constructor(t=!1,a=!1){this._isReadonly=t,this._isShallow=a}get(t,a,n){if(a==="__v_skip")return t.__v_skip;const r=this._isReadonly,i=this._isShallow;if(a==="__v_isReactive")return!r;if(a==="__v_isReadonly")return r;if(a==="__v_isShallow")return i;if(a==="__v_raw")return n===(r?i?Eu:ms:i?ls:cs).get(t)||Object.getPrototypeOf(t)===Object.getPrototypeOf(n)?t:void 0;const s=V(t);if(!r){let d;if(s&&(d=hu[a]))return d;if(a==="hasOwnProperty")return wu}const o=Reflect.get(t,a,Se(t)?t:n);return(ot(a)?os.has(a):bu(a))||(r||Te(t,"get",a),i)?o:Se(o)?s&&ur(a)?o:o.value:me(o)?r?fs(o):bn(o):o}}class us extends ds{constructor(t=!1){super(!1,t)}set(t,a,n,r){let i=t[a];if(!this._isShallow){const d=Ct(i);if(!Ve(n)&&!Ct(n)&&(i=ne(i),n=ne(n)),!V(t)&&Se(i)&&!Se(n))return d||(i.value=n),!0}const s=V(t)&&ur(a)?Number(a)<t.length:re(t,a),o=Reflect.set(t,a,n,Se(t)?t:r);return t===ne(r)&&(s?kt(n,i)&&pt(t,"set",a,n):pt(t,"add",a,n)),o}deleteProperty(t,a){const n=re(t,a);t[a];const r=Reflect.deleteProperty(t,a);return r&&n&&pt(t,"delete",a,void 0),r}has(t,a){const n=Reflect.has(t,a);return(!ot(a)||!os.has(a))&&Te(t,"has",a),n}ownKeys(t){return Te(t,"iterate",V(t)?"length":Ft),Reflect.ownKeys(t)}}class xu extends ds{constructor(t=!1){super(!0,t)}set(t,a){return!0}deleteProperty(t,a){return!0}}const Tu=new us,vu=new xu,Su=new us(!0);const jn=e=>e,Pa=e=>Reflect.getPrototypeOf(e);function Mu(e,t,a){return function(...n){const r=this.__v_raw,i=ne(r),s=jt(i),o=e==="entries"||e===Symbol.iterator&&s,d=e==="keys"&&s,c=r[e](...n),u=a?jn:t?Za:xe;return!t&&Te(i,"iterate",d?Vn:Ft),{next(){const{value:l,done:m}=c.next();return m?{value:l,done:m}:{value:o?[u(l[0]),u(l[1])]:u(l),done:m}},[Symbol.iterator](){return this}}}}function Ba(e){return function(...t){return e==="delete"?!1:e==="clear"?void 0:this}}function ku(e,t){const a={get(r){const i=this.__v_raw,s=ne(i),o=ne(r);e||(kt(r,o)&&Te(s,"get",r),Te(s,"get",o));const{has:d}=Pa(s),c=t?jn:e?Za:xe;if(d.call(s,r))return c(i.get(r));if(d.call(s,o))return c(i.get(o));i!==s&&i.get(r)},get size(){const r=this.__v_raw;return!e&&Te(ne(r),"iterate",Ft),r.size},has(r){const i=this.__v_raw,s=ne(i),o=ne(r);return e||(kt(r,o)&&Te(s,"has",r),Te(s,"has",o)),r===o?i.has(r):i.has(r)||i.has(o)},forEach(r,i){const s=this,o=s.__v_raw,d=ne(o),c=t?jn:e?Za:xe;return!e&&Te(d,"iterate",Ft),o.forEach((u,l)=>r.call(i,c(u),c(l),s))}};return Me(a,e?{add:Ba("add"),set:Ba("set"),delete:Ba("delete"),clear:Ba("clear")}:{add(r){!t&&!Ve(r)&&!Ct(r)&&(r=ne(r));const i=ne(this);return Pa(i).has.call(i,r)||(i.add(r),pt(i,"add",r,r)),this},set(r,i){!t&&!Ve(i)&&!Ct(i)&&(i=ne(i));const s=ne(this),{has:o,get:d}=Pa(s);let c=o.call(s,r);c||(r=ne(r),c=o.call(s,r));const u=d.call(s,r);return s.set(r,i),c?kt(i,u)&&pt(s,"set",r,i):pt(s,"add",r,i),this},delete(r){const i=ne(this),{has:s,get:o}=Pa(i);let d=s.call(i,r);d||(r=ne(r),d=s.call(i,r)),o&&o.call(i,r);const c=i.delete(r);return d&&pt(i,"delete",r,void 0),c},clear(){const r=ne(this),i=r.size!==0,s=r.clear();return i&&pt(r,"clear",void 0,void 0),s}}),["keys","values","entries",Symbol.iterator].forEach(r=>{a[r]=Mu(r,e,t)}),a}function yr(e,t){const a=ku(e,t);return(n,r,i)=>r==="__v_isReactive"?!e:r==="__v_isReadonly"?e:r==="__v_raw"?n:Reflect.get(re(a,r)&&r in n?a:n,r,i)}const Au={get:yr(!1,!1)},Cu={get:yr(!1,!0)},Iu={get:yr(!0,!1)};const cs=new WeakMap,ls=new WeakMap,ms=new WeakMap,Eu=new WeakMap;function _u(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function Nu(e){return e.__v_skip||!Object.isExtensible(e)?0:_u(au(e))}function bn(e){return Ct(e)?e:gr(e,!1,Tu,Au,cs)}function ps(e){return gr(e,!1,Su,Cu,ls)}function fs(e){return gr(e,!0,vu,Iu,ms)}function gr(e,t,a,n,r){if(!me(e)||e.__v_raw&&!(t&&e.__v_isReactive))return e;const i=Nu(e);if(i===0)return e;const s=r.get(e);if(s)return s;const o=new Proxy(e,i===2?n:a);return r.set(e,o),o}function Kt(e){return Ct(e)?Kt(e.__v_raw):!!(e&&e.__v_isReactive)}function Ct(e){return!!(e&&e.__v_isReadonly)}function Ve(e){return!!(e&&e.__v_isShallow)}function hr(e){return e?!!e.__v_raw:!1}function ne(e){const t=e&&e.__v_raw;return t?ne(t):e}function Yu(e){return!re(e,"__v_skip")&&Object.isExtensible(e)&&Ki(e,"__v_skip",!0),e}const xe=e=>me(e)?bn(e):e,Za=e=>me(e)?fs(e):e;function Se(e){return e?e.__v_isRef===!0:!1}function ve(e){return ys(e,!1)}function zu(e){return ys(e,!0)}function ys(e,t){return Se(e)?e:new Ou(e,t)}class Ou{constructor(t,a){this.dep=new fr,this.__v_isRef=!0,this.__v_isShallow=!1,this._rawValue=a?t:ne(t),this._value=a?t:xe(t),this.__v_isShallow=a}get value(){return this.dep.track(),this._value}set value(t){const a=this._rawValue,n=this.__v_isShallow||Ve(t)||Ct(t);t=n?t:ne(t),kt(t,a)&&(this._rawValue=t,this._value=n?t:xe(t),this.dep.trigger())}}function ge(e){return Se(e)?e.value:e}const Fu={get:(e,t,a)=>t==="__v_raw"?e:ge(Reflect.get(e,t,a)),set:(e,t,a,n)=>{const r=e[t];return Se(r)&&!Se(a)?(r.value=a,!0):Reflect.set(e,t,a,n)}};function gs(e){return Kt(e)?e:new Proxy(e,Fu)}class Ru{constructor(t,a,n){this.fn=t,this.setter=a,this._value=void 0,this.dep=new fr(this),this.__v_isRef=!0,this.deps=void 0,this.depsTail=void 0,this.flags=16,this.globalVersion=Ma-1,this.next=void 0,this.effect=this,this.__v_isReadonly=!a,this.isSSR=n}notify(){if(this.flags|=16,!(this.flags&8)&&ce!==this)return ts(this,!0),!0}get value(){const t=this.dep.track();return rs(this),t&&(t.version=this.dep.version),this._value}set value(t){this.setter&&this.setter(t)}}function Pu(e,t,a=!1){let n,r;return Q(e)?n=e:(n=e.get,r=e.set),new Ru(n,r,a)}const La={},Ja=new WeakMap;let Nt;function Bu(e,t=!1,a=Nt){if(a){let n=Ja.get(a);n||Ja.set(a,n=[]),n.push(e)}}function Lu(e,t,a=de){const{immediate:n,deep:r,once:i,scheduler:s,augmentJob:o,call:d}=a,c=b=>r?b:Ve(b)||r===!1||r===0?ft(b,1):ft(b);let u,l,m,g,k=!1,C=!1;if(Se(e)?(l=()=>e.value,k=Ve(e)):Kt(e)?(l=()=>c(e),k=!0):V(e)?(C=!0,k=e.some(b=>Kt(b)||Ve(b)),l=()=>e.map(b=>{if(Se(b))return b.value;if(Kt(b))return c(b);if(Q(b))return d?d(b,2):b()})):Q(e)?t?l=d?()=>d(e,2):e:l=()=>{if(m){gt();try{m()}finally{ht()}}const b=Nt;Nt=u;try{return d?d(e,3,[g]):e(g)}finally{Nt=b}}:l=st,t&&r){const b=l,x=r===!0?1/0:r;l=()=>ft(b(),x)}const H=fu(),Y=()=>{u.stop(),H&&H.active&&dr(H.effects,u)};if(i&&t){const b=t;t=(...x)=>{b(...x),Y()}}let O=C?new Array(e.length).fill(La):La;const h=b=>{if(!(!(u.flags&1)||!u.dirty&&!b))if(t){const x=u.run();if(r||k||(C?x.some((I,B)=>kt(I,O[B])):kt(x,O))){m&&m();const I=Nt;Nt=u;try{const B=[x,O===La?void 0:C&&O[0]===La?[]:O,g];O=x,d?d(t,3,B):t(...B)}finally{Nt=I}}}else u.run()};return o&&o(h),u=new Xi(l),u.scheduler=s?()=>s(h,!1):h,g=b=>Bu(b,!1,u),m=u.onStop=()=>{const b=Ja.get(u);if(b){if(d)d(b,4);else for(const x of b)x();Ja.delete(u)}},t?n?h(!0):O=u.run():s?s(h.bind(null,!0),!0):u.run(),Y.pause=u.pause.bind(u),Y.resume=u.resume.bind(u),Y.stop=Y,Y}function ft(e,t=1/0,a){if(t<=0||!me(e)||e.__v_skip||(a=a||new Map,(a.get(e)||0)>=t))return e;if(a.set(e,t),t--,Se(e))ft(e.value,t,a);else if(V(e))for(let n=0;n<e.length;n++)ft(e[n],t,a);else if(fn(e)||jt(e))e.forEach(n=>{ft(n,t,a)});else if(Vi(e)){for(const n in e)ft(e[n],t,a);for(const n of Object.getOwnPropertySymbols(e))Object.prototype.propertyIsEnumerable.call(e,n)&&ft(e[n],t,a)}return e}/**
* @vue/runtime-core v3.5.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/function Ya(e,t,a,n){try{return n?e(...n):e()}catch(r){wn(r,t,a)}}function dt(e,t,a,n){if(Q(e)){const r=Ya(e,t,a,n);return r&&qi(r)&&r.catch(i=>{wn(i,t,a)}),r}if(V(e)){const r=[];for(let i=0;i<e.length;i++)r.push(dt(e[i],t,a,n));return r}}function wn(e,t,a,n=!0){const r=t?t.vnode:null,{errorHandler:i,throwUnhandledErrorInProduction:s}=t&&t.appContext.config||de;if(t){let o=t.parent;const d=t.proxy,c=`https://vuejs.org/error-reference/#runtime-${a}`;for(;o;){const u=o.ec;if(u){for(let l=0;l<u.length;l++)if(u[l](e,d,c)===!1)return}o=o.parent}if(i){gt(),Ya(i,null,10,[e,d,c]),ht();return}}Hu(e,a,r,n,s)}function Hu(e,t,a,n=!0,r=!1){if(r)throw e;console.error(e)}const Ee=[];let rt=-1;const Qt=[];let vt=null,qt=0;const hs=Promise.resolve();let Xa=null;function Dr(e){const t=Xa||hs;return e?t.then(this?e.bind(this):e):t}function Gu(e){let t=rt+1,a=Ee.length;for(;t<a;){const n=t+a>>>1,r=Ee[n],i=Aa(r);i<e||i===e&&r.flags&2?t=n+1:a=n}return t}function br(e){if(!(e.flags&1)){const t=Aa(e),a=Ee[Ee.length-1];!a||!(e.flags&2)&&t>=Aa(a)?Ee.push(e):Ee.splice(Gu(t),0,e),e.flags|=1,Ds()}}function Ds(){Xa||(Xa=hs.then(ws))}function Uu(e){V(e)?Qt.push(...e):vt&&e.id===-1?vt.splice(qt+1,0,e):e.flags&1||(Qt.push(e),e.flags|=1),Ds()}function Jr(e,t,a=rt+1){for(;a<Ee.length;a++){const n=Ee[a];if(n&&n.flags&2){if(e&&n.id!==e.uid)continue;Ee.splice(a,1),a--,n.flags&4&&(n.flags&=-2),n(),n.flags&4||(n.flags&=-2)}}}function bs(e){if(Qt.length){const t=[...new Set(Qt)].sort((a,n)=>Aa(a)-Aa(n));if(Qt.length=0,vt){vt.push(...t);return}for(vt=t,qt=0;qt<vt.length;qt++){const a=vt[qt];a.flags&4&&(a.flags&=-2),a.flags&8||a(),a.flags&=-2}vt=null,qt=0}}const Aa=e=>e.id==null?e.flags&2?-1:1/0:e.id;function ws(e){try{for(rt=0;rt<Ee.length;rt++){const t=Ee[rt];t&&!(t.flags&8)&&(t.flags&4&&(t.flags&=-2),Ya(t,t.i,t.i?15:14),t.flags&4||(t.flags&=-2))}}finally{for(;rt<Ee.length;rt++){const t=Ee[rt];t&&(t.flags&=-2)}rt=-1,Ee.length=0,bs(),Xa=null,(Ee.length||Qt.length)&&ws()}}let $e=null,xs=null;function en(e){const t=$e;return $e=e,xs=e&&e.type.__scopeId||null,t}function Ce(e,t=$e,a){if(!t||e._n)return e;const n=(...r)=>{n._d&&nn(-1);const i=en(t);let s;try{s=e(...r)}finally{en(i),n._d&&nn(1)}return s};return n._n=!0,n._c=!0,n._d=!0,n}function be(e,t){if($e===null)return e;const a=Sn($e),n=e.dirs||(e.dirs=[]);for(let r=0;r<t.length;r++){let[i,s,o,d=de]=t[r];i&&(Q(i)&&(i={mounted:i,updated:i}),i.deep&&ft(s),n.push({dir:i,instance:a,value:s,oldValue:void 0,arg:o,modifiers:d}))}return e}function Et(e,t,a,n){const r=e.dirs,i=t&&t.dirs;for(let s=0;s<r.length;s++){const o=r[s];i&&(o.oldValue=i[s].value);let d=o.dir[n];d&&(gt(),dt(d,a,8,[e.el,o,e,t]),ht())}}const Wu=Symbol("_vte"),qu=e=>e.__isTeleport,$u=Symbol("_leaveCb");function wr(e,t){e.shapeFlag&6&&e.component?(e.transition=t,wr(e.component.subTree,t)):e.shapeFlag&128?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function Ts(e,t){return Q(e)?Me({name:e.name},t,{setup:e}):e}function vs(e){e.ids=[e.ids[0]+e.ids[2]+++"-",0,0]}const tn=new WeakMap;function Da(e,t,a,n,r=!1){if(V(e)){e.forEach((k,C)=>Da(k,t&&(V(t)?t[C]:t),a,n,r));return}if(ba(n)&&!r){n.shapeFlag&512&&n.type.__asyncResolved&&n.component.subTree.component&&Da(e,t,a,n.component.subTree);return}const i=n.shapeFlag&4?Sn(n.component):n.el,s=r?null:i,{i:o,r:d}=e,c=t&&t.r,u=o.refs===de?o.refs={}:o.refs,l=o.setupState,m=ne(l),g=l===de?Wi:k=>re(m,k);if(c!=null&&c!==d){if(Xr(t),he(c))u[c]=null,g(c)&&(l[c]=null);else if(Se(c)){c.value=null;const k=t;k.k&&(u[k.k]=null)}}if(Q(d))Ya(d,o,12,[s,u]);else{const k=he(d),C=Se(d);if(k||C){const H=()=>{if(e.f){const Y=k?g(d)?l[d]:u[d]:d.value;if(r)V(Y)&&dr(Y,i);else if(V(Y))Y.includes(i)||Y.push(i);else if(k)u[d]=[i],g(d)&&(l[d]=u[d]);else{const O=[i];d.value=O,e.k&&(u[e.k]=O)}}else k?(u[d]=s,g(d)&&(l[d]=s)):C&&(d.value=s,e.k&&(u[e.k]=s))};if(s){const Y=()=>{H(),tn.delete(e)};Y.id=-1,tn.set(e,Y),He(Y,a)}else Xr(e),H()}}}function Xr(e){const t=tn.get(e);t&&(t.flags|=8,tn.delete(e))}gn().requestIdleCallback;gn().cancelIdleCallback;const ba=e=>!!e.type.__asyncLoader,Ss=e=>e.type.__isKeepAlive;function Vu(e,t){Ms(e,"a",t)}function ju(e,t){Ms(e,"da",t)}function Ms(e,t,a=Ye){const n=e.__wdc||(e.__wdc=()=>{let r=a;for(;r;){if(r.isDeactivated)return;r=r.parent}return e()});if(xn(t,n,a),a){let r=a.parent;for(;r&&r.parent;)Ss(r.parent.vnode)&&Ku(n,t,a,r),r=r.parent}}function Ku(e,t,a,n){const r=xn(t,e,n,!0);ks(()=>{dr(n[t],r)},a)}function xn(e,t,a=Ye,n=!1){if(a){const r=a[e]||(a[e]=[]),i=t.__weh||(t.__weh=(...s)=>{gt();const o=Oa(a),d=dt(t,a,e,s);return o(),ht(),d});return n?r.unshift(i):r.push(i),i}}const wt=e=>(t,a=Ye)=>{(!Ia||e==="sp")&&xn(e,(...n)=>t(...n),a)},Qu=wt("bm"),za=wt("m"),Zu=wt("bu"),Ju=wt("u"),Xu=wt("bum"),ks=wt("um"),ec=wt("sp"),tc=wt("rtg"),ac=wt("rtc");function nc(e,t=Ye){xn("ec",e,t)}const rc=Symbol.for("v-ndc");function fe(e,t,a,n){let r;const i=a,s=V(e);if(s||he(e)){const o=s&&Kt(e);let d=!1,c=!1;o&&(d=!Ve(e),c=Ct(e),e=Dn(e)),r=new Array(e.length);for(let u=0,l=e.length;u<l;u++)r[u]=t(d?c?Za(xe(e[u])):xe(e[u]):e[u],u,void 0,i)}else if(typeof e=="number"){r=new Array(e);for(let o=0;o<e;o++)r[o]=t(o+1,o,void 0,i)}else if(me(e))if(e[Symbol.iterator])r=Array.from(e,(o,d)=>t(o,d,void 0,i));else{const o=Object.keys(e);r=new Array(o.length);for(let d=0,c=o.length;d<c;d++){const u=o[d];r[d]=t(e[u],u,d,i)}}else r=[];return r}const Kn=e=>e?Vs(e)?Sn(e):Kn(e.parent):null,wa=Me(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>Kn(e.parent),$root:e=>Kn(e.root),$host:e=>e.ce,$emit:e=>e.emit,$options:e=>Cs(e),$forceUpdate:e=>e.f||(e.f=()=>{br(e.update)}),$nextTick:e=>e.n||(e.n=Dr.bind(e.proxy)),$watch:e=>Mc.bind(e)}),Pn=(e,t)=>e!==de&&!e.__isScriptSetup&&re(e,t),ic={get({_:e},t){if(t==="__v_skip")return!0;const{ctx:a,setupState:n,data:r,props:i,accessCache:s,type:o,appContext:d}=e;let c;if(t[0]!=="$"){const g=s[t];if(g!==void 0)switch(g){case 1:return n[t];case 2:return r[t];case 4:return a[t];case 3:return i[t]}else{if(Pn(n,t))return s[t]=1,n[t];if(r!==de&&re(r,t))return s[t]=2,r[t];if((c=e.propsOptions[0])&&re(c,t))return s[t]=3,i[t];if(a!==de&&re(a,t))return s[t]=4,a[t];Qn&&(s[t]=0)}}const u=wa[t];let l,m;if(u)return t==="$attrs"&&Te(e.attrs,"get",""),u(e);if((l=o.__cssModules)&&(l=l[t]))return l;if(a!==de&&re(a,t))return s[t]=4,a[t];if(m=d.config.globalProperties,re(m,t))return m[t]},set({_:e},t,a){const{data:n,setupState:r,ctx:i}=e;return Pn(r,t)?(r[t]=a,!0):n!==de&&re(n,t)?(n[t]=a,!0):re(e.props,t)||t[0]==="$"&&t.slice(1)in e?!1:(i[t]=a,!0)},has({_:{data:e,setupState:t,accessCache:a,ctx:n,appContext:r,propsOptions:i,type:s}},o){let d,c;return!!(a[o]||e!==de&&o[0]!=="$"&&re(e,o)||Pn(t,o)||(d=i[0])&&re(d,o)||re(n,o)||re(wa,o)||re(r.config.globalProperties,o)||(c=s.__cssModules)&&c[o])},defineProperty(e,t,a){return a.get!=null?e._.accessCache[t]=0:re(a,"value")&&this.set(e,t,a.value,null),Reflect.defineProperty(e,t,a)}};function ei(e){return V(e)?e.reduce((t,a)=>(t[a]=null,t),{}):e}let Qn=!0;function sc(e){const t=Cs(e),a=e.proxy,n=e.ctx;Qn=!1,t.beforeCreate&&ti(t.beforeCreate,e,"bc");const{data:r,computed:i,methods:s,watch:o,provide:d,inject:c,created:u,beforeMount:l,mounted:m,beforeUpdate:g,updated:k,activated:C,deactivated:H,beforeDestroy:Y,beforeUnmount:O,destroyed:h,unmounted:b,render:x,renderTracked:I,renderTriggered:B,errorCaptured:Z,serverPrefetch:pe,expose:ee,inheritAttrs:Be,components:Je,directives:ke,filters:ua}=t;if(c&&oc(c,n,null),s)for(const se in s){const te=s[se];Q(te)&&(n[se]=te.bind(a))}if(r){const se=r.call(a,a);me(se)&&(e.data=bn(se))}if(Qn=!0,i)for(const se in i){const te=i[se],ut=Q(te)?te.bind(a,a):Q(te.get)?te.get.bind(a,a):st,xt=!Q(te)&&Q(te.set)?te.set.bind(a):st,Xe=Ue({get:ut,set:xt});Object.defineProperty(n,se,{enumerable:!0,configurable:!0,get:()=>Xe.value,set:ze=>Xe.value=ze})}if(o)for(const se in o)As(o[se],n,a,se);if(d){const se=Q(d)?d.call(a):d;Reflect.ownKeys(se).forEach(te=>{Wa(te,se[te])})}u&&ti(u,e,"c");function De(se,te){V(te)?te.forEach(ut=>se(ut.bind(a))):te&&se(te.bind(a))}if(De(Qu,l),De(za,m),De(Zu,g),De(Ju,k),De(Vu,C),De(ju,H),De(nc,Z),De(ac,I),De(tc,B),De(Xu,O),De(ks,b),De(ec,pe),V(ee))if(ee.length){const se=e.exposed||(e.exposed={});ee.forEach(te=>{Object.defineProperty(se,te,{get:()=>a[te],set:ut=>a[te]=ut,enumerable:!0})})}else e.exposed||(e.exposed={});x&&e.render===st&&(e.render=x),Be!=null&&(e.inheritAttrs=Be),Je&&(e.components=Je),ke&&(e.directives=ke),pe&&vs(e)}function oc(e,t,a=st){V(e)&&(e=Zn(e));for(const n in e){const r=e[n];let i;me(r)?"default"in r?i=yt(r.from||n,r.default,!0):i=yt(r.from||n):i=yt(r),Se(i)?Object.defineProperty(t,n,{enumerable:!0,configurable:!0,get:()=>i.value,set:s=>i.value=s}):t[n]=i}}function ti(e,t,a){dt(V(e)?e.map(n=>n.bind(t.proxy)):e.bind(t.proxy),t,a)}function As(e,t,a,n){let r=n.includes(".")?Hs(a,n):()=>a[n];if(he(e)){const i=t[e];Q(i)&&qa(r,i)}else if(Q(e))qa(r,e.bind(a));else if(me(e))if(V(e))e.forEach(i=>As(i,t,a,n));else{const i=Q(e.handler)?e.handler.bind(a):t[e.handler];Q(i)&&qa(r,i,e)}}function Cs(e){const t=e.type,{mixins:a,extends:n}=t,{mixins:r,optionsCache:i,config:{optionMergeStrategies:s}}=e.appContext,o=i.get(t);let d;return o?d=o:!r.length&&!a&&!n?d=t:(d={},r.length&&r.forEach(c=>an(d,c,s,!0)),an(d,t,s)),me(t)&&i.set(t,d),d}function an(e,t,a,n=!1){const{mixins:r,extends:i}=t;i&&an(e,i,a,!0),r&&r.forEach(s=>an(e,s,a,!0));for(const s in t)if(!(n&&s==="expose")){const o=dc[s]||a&&a[s];e[s]=o?o(e[s],t[s]):t[s]}return e}const dc={data:ai,props:ni,emits:ni,methods:fa,computed:fa,beforeCreate:Ae,created:Ae,beforeMount:Ae,mounted:Ae,beforeUpdate:Ae,updated:Ae,beforeDestroy:Ae,beforeUnmount:Ae,destroyed:Ae,unmounted:Ae,activated:Ae,deactivated:Ae,errorCaptured:Ae,serverPrefetch:Ae,components:fa,directives:fa,watch:cc,provide:ai,inject:uc};function ai(e,t){return t?e?function(){return Me(Q(e)?e.call(this,this):e,Q(t)?t.call(this,this):t)}:t:e}function uc(e,t){return fa(Zn(e),Zn(t))}function Zn(e){if(V(e)){const t={};for(let a=0;a<e.length;a++)t[e[a]]=e[a];return t}return e}function Ae(e,t){return e?[...new Set([].concat(e,t))]:t}function fa(e,t){return e?Me(Object.create(null),e,t):t}function ni(e,t){return e?V(e)&&V(t)?[...new Set([...e,...t])]:Me(Object.create(null),ei(e),ei(t??{})):t}function cc(e,t){if(!e)return t;if(!t)return e;const a=Me(Object.create(null),e);for(const n in t)a[n]=Ae(e[n],t[n]);return a}function Is(){return{app:null,config:{isNativeTag:Wi,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let lc=0;function mc(e,t){return function(n,r=null){Q(n)||(n=Me({},n)),r!=null&&!me(r)&&(r=null);const i=Is(),s=new WeakSet,o=[];let d=!1;const c=i.app={_uid:lc++,_component:n,_props:r,_container:null,_context:i,_instance:null,version:Vc,get config(){return i.config},set config(u){},use(u,...l){return s.has(u)||(u&&Q(u.install)?(s.add(u),u.install(c,...l)):Q(u)&&(s.add(u),u(c,...l))),c},mixin(u){return i.mixins.includes(u)||i.mixins.push(u),c},component(u,l){return l?(i.components[u]=l,c):i.components[u]},directive(u,l){return l?(i.directives[u]=l,c):i.directives[u]},mount(u,l,m){if(!d){const g=c._ceVNode||q(n,r);return g.appContext=i,m===!0?m="svg":m===!1&&(m=void 0),e(g,u,m),d=!0,c._container=u,u.__vue_app__=c,Sn(g.component)}},onUnmount(u){o.push(u)},unmount(){d&&(dt(o,c._instance,16),e(null,c._container),delete c._container.__vue_app__)},provide(u,l){return i.provides[u]=l,c},runWithContext(u){const l=Zt;Zt=c;try{return u()}finally{Zt=l}}};return c}}let Zt=null;function Wa(e,t){if(Ye){let a=Ye.provides;const n=Ye.parent&&Ye.parent.provides;n===a&&(a=Ye.provides=Object.create(n)),a[e]=t}}function yt(e,t,a=!1){const n=Hc();if(n||Zt){let r=Zt?Zt._context.provides:n?n.parent==null||n.ce?n.vnode.appContext&&n.vnode.appContext.provides:n.parent.provides:void 0;if(r&&e in r)return r[e];if(arguments.length>1)return a&&Q(t)?t.call(n&&n.proxy):t}}const Es={},_s=()=>Object.create(Es),Ns=e=>Object.getPrototypeOf(e)===Es;function pc(e,t,a,n=!1){const r={},i=_s();e.propsDefaults=Object.create(null),Ys(e,t,r,i);for(const s in e.propsOptions[0])s in r||(r[s]=void 0);a?e.props=n?r:ps(r):e.type.props?e.props=r:e.props=i,e.attrs=i}function fc(e,t,a,n){const{props:r,attrs:i,vnode:{patchFlag:s}}=e,o=ne(r),[d]=e.propsOptions;let c=!1;if((n||s>0)&&!(s&16)){if(s&8){const u=e.vnode.dynamicProps;for(let l=0;l<u.length;l++){let m=u[l];if(Tn(e.emitsOptions,m))continue;const g=t[m];if(d)if(re(i,m))g!==i[m]&&(i[m]=g,c=!0);else{const k=At(m);r[k]=Jn(d,o,k,g,e,!1)}else g!==i[m]&&(i[m]=g,c=!0)}}}else{Ys(e,t,r,i)&&(c=!0);let u;for(const l in o)(!t||!re(t,l)&&((u=Rt(l))===l||!re(t,u)))&&(d?a&&(a[l]!==void 0||a[u]!==void 0)&&(r[l]=Jn(d,o,l,void 0,e,!0)):delete r[l]);if(i!==o)for(const l in i)(!t||!re(t,l))&&(delete i[l],c=!0)}c&&pt(e.attrs,"set","")}function Ys(e,t,a,n){const[r,i]=e.propsOptions;let s=!1,o;if(t)for(let d in t){if(ya(d))continue;const c=t[d];let u;r&&re(r,u=At(d))?!i||!i.includes(u)?a[u]=c:(o||(o={}))[u]=c:Tn(e.emitsOptions,d)||(!(d in n)||c!==n[d])&&(n[d]=c,s=!0)}if(i){const d=ne(a),c=o||de;for(let u=0;u<i.length;u++){const l=i[u];a[l]=Jn(r,d,l,c[l],e,!re(c,l))}}return s}function Jn(e,t,a,n,r,i){const s=e[a];if(s!=null){const o=re(s,"default");if(o&&n===void 0){const d=s.default;if(s.type!==Function&&!s.skipFactory&&Q(d)){const{propsDefaults:c}=r;if(a in c)n=c[a];else{const u=Oa(r);n=c[a]=d.call(null,t),u()}}else n=d;r.ce&&r.ce._setProp(a,n)}s[0]&&(i&&!o?n=!1:s[1]&&(n===""||n===Rt(a))&&(n=!0))}return n}const yc=new WeakMap;function zs(e,t,a=!1){const n=a?yc:t.propsCache,r=n.get(e);if(r)return r;const i=e.props,s={},o=[];let d=!1;if(!Q(e)){const u=l=>{d=!0;const[m,g]=zs(l,t,!0);Me(s,m),g&&o.push(...g)};!a&&t.mixins.length&&t.mixins.forEach(u),e.extends&&u(e.extends),e.mixins&&e.mixins.forEach(u)}if(!i&&!d)return me(e)&&n.set(e,Vt),Vt;if(V(i))for(let u=0;u<i.length;u++){const l=At(i[u]);ri(l)&&(s[l]=de)}else if(i)for(const u in i){const l=At(u);if(ri(l)){const m=i[u],g=s[l]=V(m)||Q(m)?{type:m}:Me({},m),k=g.type;let C=!1,H=!0;if(V(k))for(let Y=0;Y<k.length;++Y){const O=k[Y],h=Q(O)&&O.name;if(h==="Boolean"){C=!0;break}else h==="String"&&(H=!1)}else C=Q(k)&&k.name==="Boolean";g[0]=C,g[1]=H,(C||re(g,"default"))&&o.push(l)}}const c=[s,o];return me(e)&&n.set(e,c),c}function ri(e){return e[0]!=="$"&&!ya(e)}const xr=e=>e==="_"||e==="_ctx"||e==="$stable",Tr=e=>V(e)?e.map(it):[it(e)],gc=(e,t,a)=>{if(t._n)return t;const n=Ce((...r)=>Tr(t(...r)),a);return n._c=!1,n},Os=(e,t,a)=>{const n=e._ctx;for(const r in e){if(xr(r))continue;const i=e[r];if(Q(i))t[r]=gc(r,i,n);else if(i!=null){const s=Tr(i);t[r]=()=>s}}},Fs=(e,t)=>{const a=Tr(t);e.slots.default=()=>a},Rs=(e,t,a)=>{for(const n in t)(a||!xr(n))&&(e[n]=t[n])},hc=(e,t,a)=>{const n=e.slots=_s();if(e.vnode.shapeFlag&32){const r=t._;r?(Rs(n,t,a),a&&Ki(n,"_",r,!0)):Os(t,n)}else t&&Fs(e,t)},Dc=(e,t,a)=>{const{vnode:n,slots:r}=e;let i=!0,s=de;if(n.shapeFlag&32){const o=t._;o?a&&o===1?i=!1:Rs(r,t,a):(i=!t.$stable,Os(t,r)),s=t}else t&&(Fs(e,t),s={default:1});if(i)for(const o in r)!xr(o)&&s[o]==null&&delete r[o]},He=Yc;function bc(e){return wc(e)}function wc(e,t){const a=gn();a.__VUE__=!0;const{insert:n,remove:r,patchProp:i,createElement:s,createText:o,createComment:d,setText:c,setElementText:u,parentNode:l,nextSibling:m,setScopeId:g=st,insertStaticContent:k}=e,C=(f,y,D,S=null,A=null,v=null,R=void 0,F=null,z=!!y.dynamicChildren)=>{if(f===y)return;f&&!ma(f,y)&&(S=M(f),ze(f,A,v,!0),f=null),y.patchFlag===-2&&(z=!1,y.dynamicChildren=null);const{type:E,ref:$,shapeFlag:L}=y;switch(E){case vn:H(f,y,D,S);break;case It:Y(f,y,D,S);break;case $a:f==null&&O(y,D,S,R);break;case X:Je(f,y,D,S,A,v,R,F,z);break;default:L&1?x(f,y,D,S,A,v,R,F,z):L&6?ke(f,y,D,S,A,v,R,F,z):(L&64||L&128)&&E.process(f,y,D,S,A,v,R,F,z,U)}$!=null&&A?Da($,f&&f.ref,v,y||f,!y):$==null&&f&&f.ref!=null&&Da(f.ref,null,v,f,!0)},H=(f,y,D,S)=>{if(f==null)n(y.el=o(y.children),D,S);else{const A=y.el=f.el;y.children!==f.children&&c(A,y.children)}},Y=(f,y,D,S)=>{f==null?n(y.el=d(y.children||""),D,S):y.el=f.el},O=(f,y,D,S)=>{[f.el,f.anchor]=k(f.children,y,D,S,f.el,f.anchor)},h=({el:f,anchor:y},D,S)=>{let A;for(;f&&f!==y;)A=m(f),n(f,D,S),f=A;n(y,D,S)},b=({el:f,anchor:y})=>{let D;for(;f&&f!==y;)D=m(f),r(f),f=D;r(y)},x=(f,y,D,S,A,v,R,F,z)=>{y.type==="svg"?R="svg":y.type==="math"&&(R="mathml"),f==null?I(y,D,S,A,v,R,F,z):pe(f,y,A,v,R,F,z)},I=(f,y,D,S,A,v,R,F)=>{let z,E;const{props:$,shapeFlag:L,transition:W,dirs:j}=f;if(z=f.el=s(f.type,v,$&&$.is,$),L&8?u(z,f.children):L&16&&Z(f.children,z,null,S,A,Bn(f,v),R,F),j&&Et(f,null,S,"created"),B(z,f,f.scopeId,R,S),$){for(const ue in $)ue!=="value"&&!ya(ue)&&i(z,ue,null,$[ue],v,S);"value"in $&&i(z,"value",null,$.value,v),(E=$.onVnodeBeforeMount)&&nt(E,S,f)}j&&Et(f,null,S,"beforeMount");const J=xc(A,W);J&&W.beforeEnter(z),n(z,y,D),((E=$&&$.onVnodeMounted)||J||j)&&He(()=>{E&&nt(E,S,f),J&&W.enter(z),j&&Et(f,null,S,"mounted")},A)},B=(f,y,D,S,A)=>{if(D&&g(f,D),S)for(let v=0;v<S.length;v++)g(f,S[v]);if(A){let v=A.subTree;if(y===v||Us(v.type)&&(v.ssContent===y||v.ssFallback===y)){const R=A.vnode;B(f,R,R.scopeId,R.slotScopeIds,A.parent)}}},Z=(f,y,D,S,A,v,R,F,z=0)=>{for(let E=z;E<f.length;E++){const $=f[E]=F?St(f[E]):it(f[E]);C(null,$,y,D,S,A,v,R,F)}},pe=(f,y,D,S,A,v,R)=>{const F=y.el=f.el;let{patchFlag:z,dynamicChildren:E,dirs:$}=y;z|=f.patchFlag&16;const L=f.props||de,W=y.props||de;let j;if(D&&_t(D,!1),(j=W.onVnodeBeforeUpdate)&&nt(j,D,y,f),$&&Et(y,f,D,"beforeUpdate"),D&&_t(D,!0),(L.innerHTML&&W.innerHTML==null||L.textContent&&W.textContent==null)&&u(F,""),E?ee(f.dynamicChildren,E,F,D,S,Bn(y,A),v):R||te(f,y,F,null,D,S,Bn(y,A),v,!1),z>0){if(z&16)Be(F,L,W,D,A);else if(z&2&&L.class!==W.class&&i(F,"class",null,W.class,A),z&4&&i(F,"style",L.style,W.style,A),z&8){const J=y.dynamicProps;for(let ue=0;ue<J.length;ue++){const ie=J[ue],Oe=L[ie],Fe=W[ie];(Fe!==Oe||ie==="value")&&i(F,ie,Oe,Fe,A,D)}}z&1&&f.children!==y.children&&u(F,y.children)}else!R&&E==null&&Be(F,L,W,D,A);((j=W.onVnodeUpdated)||$)&&He(()=>{j&&nt(j,D,y,f),$&&Et(y,f,D,"updated")},S)},ee=(f,y,D,S,A,v,R)=>{for(let F=0;F<y.length;F++){const z=f[F],E=y[F],$=z.el&&(z.type===X||!ma(z,E)||z.shapeFlag&198)?l(z.el):D;C(z,E,$,null,S,A,v,R,!0)}},Be=(f,y,D,S,A)=>{if(y!==D){if(y!==de)for(const v in y)!ya(v)&&!(v in D)&&i(f,v,y[v],null,A,S);for(const v in D){if(ya(v))continue;const R=D[v],F=y[v];R!==F&&v!=="value"&&i(f,v,F,R,A,S)}"value"in D&&i(f,"value",y.value,D.value,A)}},Je=(f,y,D,S,A,v,R,F,z)=>{const E=y.el=f?f.el:o(""),$=y.anchor=f?f.anchor:o("");let{patchFlag:L,dynamicChildren:W,slotScopeIds:j}=y;j&&(F=F?F.concat(j):j),f==null?(n(E,D,S),n($,D,S),Z(y.children||[],D,$,A,v,R,F,z)):L>0&&L&64&&W&&f.dynamicChildren?(ee(f.dynamicChildren,W,D,A,v,R,F),(y.key!=null||A&&y===A.subTree)&&Ps(f,y,!0)):te(f,y,D,$,A,v,R,F,z)},ke=(f,y,D,S,A,v,R,F,z)=>{y.slotScopeIds=F,f==null?y.shapeFlag&512?A.ctx.activate(y,D,S,R,z):ua(y,D,S,A,v,R,z):Lt(f,y,z)},ua=(f,y,D,S,A,v,R)=>{const F=f.component=Lc(f,S,A);if(Ss(f)&&(F.ctx.renderer=U),Gc(F,!1,R),F.asyncDep){if(A&&A.registerDep(F,De,R),!f.el){const z=F.subTree=q(It);Y(null,z,y,D),f.placeholder=z.el}}else De(F,f,y,D,A,v,R)},Lt=(f,y,D)=>{const S=y.component=f.component;if(_c(f,y,D))if(S.asyncDep&&!S.asyncResolved){se(S,y,D);return}else S.next=y,S.update();else y.el=f.el,S.vnode=y},De=(f,y,D,S,A,v,R)=>{const F=()=>{if(f.isMounted){let{next:L,bu:W,u:j,parent:J,vnode:ue}=f;{const tt=Bs(f);if(tt){L&&(L.el=ue.el,se(f,L,R)),tt.asyncDep.then(()=>{f.isUnmounted||F()});return}}let ie=L,Oe;_t(f,!1),L?(L.el=ue.el,se(f,L,R)):L=ue,W&&Ua(W),(Oe=L.props&&L.props.onVnodeBeforeUpdate)&&nt(Oe,J,L,ue),_t(f,!0);const Fe=si(f),et=f.subTree;f.subTree=Fe,C(et,Fe,l(et.el),M(et),f,A,v),L.el=Fe.el,ie===null&&Nc(f,Fe.el),j&&He(j,A),(Oe=L.props&&L.props.onVnodeUpdated)&&He(()=>nt(Oe,J,L,ue),A)}else{let L;const{el:W,props:j}=y,{bm:J,m:ue,parent:ie,root:Oe,type:Fe}=f,et=ba(y);_t(f,!1),J&&Ua(J),!et&&(L=j&&j.onVnodeBeforeMount)&&nt(L,ie,y),_t(f,!0);{Oe.ce&&Oe.ce._def.shadowRoot!==!1&&Oe.ce._injectChildStyle(Fe);const tt=f.subTree=si(f);C(null,tt,D,S,f,A,v),y.el=tt.el}if(ue&&He(ue,A),!et&&(L=j&&j.onVnodeMounted)){const tt=y;He(()=>nt(L,ie,tt),A)}(y.shapeFlag&256||ie&&ba(ie.vnode)&&ie.vnode.shapeFlag&256)&&f.a&&He(f.a,A),f.isMounted=!0,y=D=S=null}};f.scope.on();const z=f.effect=new Xi(F);f.scope.off();const E=f.update=z.run.bind(z),$=f.job=z.runIfDirty.bind(z);$.i=f,$.id=f.uid,z.scheduler=()=>br($),_t(f,!0),E()},se=(f,y,D)=>{y.component=f;const S=f.vnode.props;f.vnode=y,f.next=null,fc(f,y.props,S,D),Dc(f,y.children,D),gt(),Jr(f),ht()},te=(f,y,D,S,A,v,R,F,z=!1)=>{const E=f&&f.children,$=f?f.shapeFlag:0,L=y.children,{patchFlag:W,shapeFlag:j}=y;if(W>0){if(W&128){xt(E,L,D,S,A,v,R,F,z);return}else if(W&256){ut(E,L,D,S,A,v,R,F,z);return}}j&8?($&16&&qe(E,A,v),L!==E&&u(D,L)):$&16?j&16?xt(E,L,D,S,A,v,R,F,z):qe(E,A,v,!0):($&8&&u(D,""),j&16&&Z(L,D,S,A,v,R,F,z))},ut=(f,y,D,S,A,v,R,F,z)=>{f=f||Vt,y=y||Vt;const E=f.length,$=y.length,L=Math.min(E,$);let W;for(W=0;W<L;W++){const j=y[W]=z?St(y[W]):it(y[W]);C(f[W],j,D,null,A,v,R,F,z)}E>$?qe(f,A,v,!0,!1,L):Z(y,D,S,A,v,R,F,z,L)},xt=(f,y,D,S,A,v,R,F,z)=>{let E=0;const $=y.length;let L=f.length-1,W=$-1;for(;E<=L&&E<=W;){const j=f[E],J=y[E]=z?St(y[E]):it(y[E]);if(ma(j,J))C(j,J,D,null,A,v,R,F,z);else break;E++}for(;E<=L&&E<=W;){const j=f[L],J=y[W]=z?St(y[W]):it(y[W]);if(ma(j,J))C(j,J,D,null,A,v,R,F,z);else break;L--,W--}if(E>L){if(E<=W){const j=W+1,J=j<$?y[j].el:S;for(;E<=W;)C(null,y[E]=z?St(y[E]):it(y[E]),D,J,A,v,R,F,z),E++}}else if(E>W)for(;E<=L;)ze(f[E],A,v,!0),E++;else{const j=E,J=E,ue=new Map;for(E=J;E<=W;E++){const Le=y[E]=z?St(y[E]):it(y[E]);Le.key!=null&&ue.set(Le.key,E)}let ie,Oe=0;const Fe=W-J+1;let et=!1,tt=0;const ca=new Array(Fe);for(E=0;E<Fe;E++)ca[E]=0;for(E=j;E<=L;E++){const Le=f[E];if(Oe>=Fe){ze(Le,A,v,!0);continue}let at;if(Le.key!=null)at=ue.get(Le.key);else for(ie=J;ie<=W;ie++)if(ca[ie-J]===0&&ma(Le,y[ie])){at=ie;break}at===void 0?ze(Le,A,v,!0):(ca[at-J]=E+1,at>=tt?tt=at:et=!0,C(Le,y[at],D,null,A,v,R,F,z),Oe++)}const qr=et?Tc(ca):Vt;for(ie=qr.length-1,E=Fe-1;E>=0;E--){const Le=J+E,at=y[Le],$r=y[Le+1],Vr=Le+1<$?$r.el||$r.placeholder:S;ca[E]===0?C(null,at,D,Vr,A,v,R,F,z):et&&(ie<0||E!==qr[ie]?Xe(at,D,Vr,2):ie--)}}},Xe=(f,y,D,S,A=null)=>{const{el:v,type:R,transition:F,children:z,shapeFlag:E}=f;if(E&6){Xe(f.component.subTree,y,D,S);return}if(E&128){f.suspense.move(y,D,S);return}if(E&64){R.move(f,y,D,U);return}if(R===X){n(v,y,D);for(let L=0;L<z.length;L++)Xe(z[L],y,D,S);n(f.anchor,y,D);return}if(R===$a){h(f,y,D);return}if(S!==2&&E&1&&F)if(S===0)F.beforeEnter(v),n(v,y,D),He(()=>F.enter(v),A);else{const{leave:L,delayLeave:W,afterLeave:j}=F,J=()=>{f.ctx.isUnmounted?r(v):n(v,y,D)},ue=()=>{v._isLeaving&&v[$u](!0),L(v,()=>{J(),j&&j()})};W?W(v,J,ue):ue()}else n(v,y,D)},ze=(f,y,D,S=!1,A=!1)=>{const{type:v,props:R,ref:F,children:z,dynamicChildren:E,shapeFlag:$,patchFlag:L,dirs:W,cacheIndex:j}=f;if(L===-2&&(A=!1),F!=null&&(gt(),Da(F,null,D,f,!0),ht()),j!=null&&(y.renderCache[j]=void 0),$&256){y.ctx.deactivate(f);return}const J=$&1&&W,ue=!ba(f);let ie;if(ue&&(ie=R&&R.onVnodeBeforeUnmount)&&nt(ie,y,f),$&6)Ra(f.component,D,S);else{if($&128){f.suspense.unmount(D,S);return}J&&Et(f,null,y,"beforeUnmount"),$&64?f.type.remove(f,y,D,U,S):E&&!E.hasOnce&&(v!==X||L>0&&L&64)?qe(E,y,D,!1,!0):(v===X&&L&384||!A&&$&16)&&qe(z,y,D),S&&Ht(f)}(ue&&(ie=R&&R.onVnodeUnmounted)||J)&&He(()=>{ie&&nt(ie,y,f),J&&Et(f,null,y,"unmounted")},D)},Ht=f=>{const{type:y,el:D,anchor:S,transition:A}=f;if(y===X){Gt(D,S);return}if(y===$a){b(f);return}const v=()=>{r(D),A&&!A.persisted&&A.afterLeave&&A.afterLeave()};if(f.shapeFlag&1&&A&&!A.persisted){const{leave:R,delayLeave:F}=A,z=()=>R(D,v);F?F(f.el,v,z):z()}else v()},Gt=(f,y)=>{let D;for(;f!==y;)D=m(f),r(f),f=D;r(y)},Ra=(f,y,D)=>{const{bum:S,scope:A,job:v,subTree:R,um:F,m:z,a:E}=f;ii(z),ii(E),S&&Ua(S),A.stop(),v&&(v.flags|=8,ze(R,f,y,D)),F&&He(F,y),He(()=>{f.isUnmounted=!0},y)},qe=(f,y,D,S=!1,A=!1,v=0)=>{for(let R=v;R<f.length;R++)ze(f[R],y,D,S,A)},M=f=>{if(f.shapeFlag&6)return M(f.component.subTree);if(f.shapeFlag&128)return f.suspense.next();const y=m(f.anchor||f.el),D=y&&y[Wu];return D?m(D):y};let G=!1;const P=(f,y,D)=>{f==null?y._vnode&&ze(y._vnode,null,null,!0):C(y._vnode||null,f,y,null,null,null,D),y._vnode=f,G||(G=!0,Jr(),bs(),G=!1)},U={p:C,um:ze,m:Xe,r:Ht,mt:ua,mc:Z,pc:te,pbc:ee,n:M,o:e};return{render:P,hydrate:void 0,createApp:mc(P)}}function Bn({type:e,props:t},a){return a==="svg"&&e==="foreignObject"||a==="mathml"&&e==="annotation-xml"&&t&&t.encoding&&t.encoding.includes("html")?void 0:a}function _t({effect:e,job:t},a){a?(e.flags|=32,t.flags|=4):(e.flags&=-33,t.flags&=-5)}function xc(e,t){return(!e||e&&!e.pendingBranch)&&t&&!t.persisted}function Ps(e,t,a=!1){const n=e.children,r=t.children;if(V(n)&&V(r))for(let i=0;i<n.length;i++){const s=n[i];let o=r[i];o.shapeFlag&1&&!o.dynamicChildren&&((o.patchFlag<=0||o.patchFlag===32)&&(o=r[i]=St(r[i]),o.el=s.el),!a&&o.patchFlag!==-2&&Ps(s,o)),o.type===vn&&o.patchFlag!==-1&&(o.el=s.el),o.type===It&&!o.el&&(o.el=s.el)}}function Tc(e){const t=e.slice(),a=[0];let n,r,i,s,o;const d=e.length;for(n=0;n<d;n++){const c=e[n];if(c!==0){if(r=a[a.length-1],e[r]<c){t[n]=r,a.push(n);continue}for(i=0,s=a.length-1;i<s;)o=i+s>>1,e[a[o]]<c?i=o+1:s=o;c<e[a[i]]&&(i>0&&(t[n]=a[i-1]),a[i]=n)}}for(i=a.length,s=a[i-1];i-- >0;)a[i]=s,s=t[s];return a}function Bs(e){const t=e.subTree.component;if(t)return t.asyncDep&&!t.asyncResolved?t:Bs(t)}function ii(e){if(e)for(let t=0;t<e.length;t++)e[t].flags|=8}const vc=Symbol.for("v-scx"),Sc=()=>yt(vc);function qa(e,t,a){return Ls(e,t,a)}function Ls(e,t,a=de){const{immediate:n,deep:r,flush:i,once:s}=a,o=Me({},a),d=t&&n||!t&&i!=="post";let c;if(Ia){if(i==="sync"){const g=Sc();c=g.__watcherHandles||(g.__watcherHandles=[])}else if(!d){const g=()=>{};return g.stop=st,g.resume=st,g.pause=st,g}}const u=Ye;o.call=(g,k,C)=>dt(g,u,k,C);let l=!1;i==="post"?o.scheduler=g=>{He(g,u&&u.suspense)}:i!=="sync"&&(l=!0,o.scheduler=(g,k)=>{k?g():br(g)}),o.augmentJob=g=>{t&&(g.flags|=4),l&&(g.flags|=2,u&&(g.id=u.uid,g.i=u))};const m=Lu(e,t,o);return Ia&&(c?c.push(m):d&&m()),m}function Mc(e,t,a){const n=this.proxy,r=he(e)?e.includes(".")?Hs(n,e):()=>n[e]:e.bind(n,n);let i;Q(t)?i=t:(i=t.handler,a=t);const s=Oa(this),o=Ls(r,i.bind(n),a);return s(),o}function Hs(e,t){const a=t.split(".");return()=>{let n=e;for(let r=0;r<a.length&&n;r++)n=n[a[r]];return n}}const kc=(e,t)=>t==="modelValue"||t==="model-value"?e.modelModifiers:e[`${t}Modifiers`]||e[`${At(t)}Modifiers`]||e[`${Rt(t)}Modifiers`];function Ac(e,t,...a){if(e.isUnmounted)return;const n=e.vnode.props||de;let r=a;const i=t.startsWith("update:"),s=i&&kc(n,t.slice(7));s&&(s.trim&&(r=a.map(u=>he(u)?u.trim():u)),s.number&&(r=a.map(Qa)));let o,d=n[o=Yn(t)]||n[o=Yn(At(t))];!d&&i&&(d=n[o=Yn(Rt(t))]),d&&dt(d,e,6,r);const c=n[o+"Once"];if(c){if(!e.emitted)e.emitted={};else if(e.emitted[o])return;e.emitted[o]=!0,dt(c,e,6,r)}}const Cc=new WeakMap;function Gs(e,t,a=!1){const n=a?Cc:t.emitsCache,r=n.get(e);if(r!==void 0)return r;const i=e.emits;let s={},o=!1;if(!Q(e)){const d=c=>{const u=Gs(c,t,!0);u&&(o=!0,Me(s,u))};!a&&t.mixins.length&&t.mixins.forEach(d),e.extends&&d(e.extends),e.mixins&&e.mixins.forEach(d)}return!i&&!o?(me(e)&&n.set(e,null),null):(V(i)?i.forEach(d=>s[d]=null):Me(s,i),me(e)&&n.set(e,s),s)}function Tn(e,t){return!e||!pn(t)?!1:(t=t.slice(2).replace(/Once$/,""),re(e,t[0].toLowerCase()+t.slice(1))||re(e,Rt(t))||re(e,t))}function si(e){const{type:t,vnode:a,proxy:n,withProxy:r,propsOptions:[i],slots:s,attrs:o,emit:d,render:c,renderCache:u,props:l,data:m,setupState:g,ctx:k,inheritAttrs:C}=e,H=en(e);let Y,O;try{if(a.shapeFlag&4){const b=r||n,x=b;Y=it(c.call(x,b,u,l,g,m,k)),O=o}else{const b=t;Y=it(b.length>1?b(l,{attrs:o,slots:s,emit:d}):b(l,null)),O=t.props?o:Ic(o)}}catch(b){xa.length=0,wn(b,e,1),Y=q(It)}let h=Y;if(O&&C!==!1){const b=Object.keys(O),{shapeFlag:x}=h;b.length&&x&7&&(i&&b.some(or)&&(O=Ec(O,i)),h=ea(h,O,!1,!0))}return a.dirs&&(h=ea(h,null,!1,!0),h.dirs=h.dirs?h.dirs.concat(a.dirs):a.dirs),a.transition&&wr(h,a.transition),Y=h,en(H),Y}const Ic=e=>{let t;for(const a in e)(a==="class"||a==="style"||pn(a))&&((t||(t={}))[a]=e[a]);return t},Ec=(e,t)=>{const a={};for(const n in e)(!or(n)||!(n.slice(9)in t))&&(a[n]=e[n]);return a};function _c(e,t,a){const{props:n,children:r,component:i}=e,{props:s,children:o,patchFlag:d}=t,c=i.emitsOptions;if(t.dirs||t.transition)return!0;if(a&&d>=0){if(d&1024)return!0;if(d&16)return n?oi(n,s,c):!!s;if(d&8){const u=t.dynamicProps;for(let l=0;l<u.length;l++){const m=u[l];if(s[m]!==n[m]&&!Tn(c,m))return!0}}}else return(r||o)&&(!o||!o.$stable)?!0:n===s?!1:n?s?oi(n,s,c):!0:!!s;return!1}function oi(e,t,a){const n=Object.keys(t);if(n.length!==Object.keys(e).length)return!0;for(let r=0;r<n.length;r++){const i=n[r];if(t[i]!==e[i]&&!Tn(a,i))return!0}return!1}function Nc({vnode:e,parent:t},a){for(;t;){const n=t.subTree;if(n.suspense&&n.suspense.activeBranch===e&&(n.el=e.el),n===e)(e=t.vnode).el=a,t=t.parent;else break}}const Us=e=>e.__isSuspense;function Yc(e,t){t&&t.pendingBranch?V(e)?t.effects.push(...e):t.effects.push(e):Uu(e)}const X=Symbol.for("v-fgt"),vn=Symbol.for("v-txt"),It=Symbol.for("v-cmt"),$a=Symbol.for("v-stc"),xa=[];let We=null;function _(e=!1){xa.push(We=e?null:[])}function zc(){xa.pop(),We=xa[xa.length-1]||null}let Ca=1;function nn(e,t=!1){Ca+=e,e<0&&We&&t&&(We.hasOnce=!0)}function Ws(e){return e.dynamicChildren=Ca>0?We||Vt:null,zc(),Ca>0&&We&&We.push(e),e}function N(e,t,a,n,r,i){return Ws(p(e,t,a,n,r,i,!0))}function qs(e,t,a,n,r){return Ws(q(e,t,a,n,r,!0))}function rn(e){return e?e.__v_isVNode===!0:!1}function ma(e,t){return e.type===t.type&&e.key===t.key}const $s=({key:e})=>e??null,Va=({ref:e,ref_key:t,ref_for:a})=>(typeof e=="number"&&(e=""+e),e!=null?he(e)||Se(e)||Q(e)?{i:$e,r:e,k:t,f:!!a}:e:null);function p(e,t=null,a=null,n=0,r=null,i=e===X?0:1,s=!1,o=!1){const d={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&$s(t),ref:t&&Va(t),scopeId:xs,slotScopeIds:null,children:a,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetStart:null,targetAnchor:null,staticCount:0,shapeFlag:i,patchFlag:n,dynamicProps:r,dynamicChildren:null,appContext:null,ctx:$e};return o?(vr(d,a),i&128&&e.normalize(d)):a&&(d.shapeFlag|=he(a)?8:16),Ca>0&&!s&&We&&(d.patchFlag>0||i&6)&&d.patchFlag!==32&&We.push(d),d}const q=Oc;function Oc(e,t=null,a=null,n=0,r=null,i=!1){if((!e||e===rc)&&(e=It),rn(e)){const o=ea(e,t,!0);return a&&vr(o,a),Ca>0&&!i&&We&&(o.shapeFlag&6?We[We.indexOf(e)]=o:We.push(o)),o.patchFlag=-2,o}if($c(e)&&(e=e.__vccOpts),t){t=Fc(t);let{class:o,style:d}=t;o&&!he(o)&&(t.class=Ge(o)),me(d)&&(hr(d)&&!V(d)&&(d=Me({},d)),t.style=cr(d))}const s=he(e)?1:Us(e)?128:qu(e)?64:me(e)?4:Q(e)?2:0;return p(e,t,a,n,r,s,i,!0)}function Fc(e){return e?hr(e)||Ns(e)?Me({},e):e:null}function ea(e,t,a=!1,n=!1){const{props:r,ref:i,patchFlag:s,children:o,transition:d}=e,c=t?Rc(r||{},t):r,u={__v_isVNode:!0,__v_skip:!0,type:e.type,props:c,key:c&&$s(c),ref:t&&t.ref?a&&i?V(i)?i.concat(Va(t)):[i,Va(t)]:Va(t):i,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:o,target:e.target,targetStart:e.targetStart,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==X?s===-1?16:s|16:s,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:d,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&ea(e.ssContent),ssFallback:e.ssFallback&&ea(e.ssFallback),placeholder:e.placeholder,el:e.el,anchor:e.anchor,ctx:e.ctx,ce:e.ce};return d&&n&&wr(u,d.clone(u)),u}function ye(e=" ",t=0){return q(vn,null,e,t)}function Ot(e,t){const a=q($a,null,e);return a.staticCount=t,a}function Ne(e="",t=!1){return t?(_(),qs(It,null,e)):q(It,null,e)}function it(e){return e==null||typeof e=="boolean"?q(It):V(e)?q(X,null,e.slice()):rn(e)?St(e):q(vn,null,String(e))}function St(e){return e.el===null&&e.patchFlag!==-1||e.memo?e:ea(e)}function vr(e,t){let a=0;const{shapeFlag:n}=e;if(t==null)t=null;else if(V(t))a=16;else if(typeof t=="object")if(n&65){const r=t.default;r&&(r._c&&(r._d=!1),vr(e,r()),r._c&&(r._d=!0));return}else{a=32;const r=t._;!r&&!Ns(t)?t._ctx=$e:r===3&&$e&&($e.slots._===1?t._=1:(t._=2,e.patchFlag|=1024))}else Q(t)?(t={default:t,_ctx:$e},a=32):(t=String(t),n&64?(a=16,t=[ye(t)]):a=8);e.children=t,e.shapeFlag|=a}function Rc(...e){const t={};for(let a=0;a<e.length;a++){const n=e[a];for(const r in n)if(r==="class")t.class!==n.class&&(t.class=Ge([t.class,n.class]));else if(r==="style")t.style=cr([t.style,n.style]);else if(pn(r)){const i=t[r],s=n[r];s&&i!==s&&!(V(i)&&i.includes(s))&&(t[r]=i?[].concat(i,s):s)}else r!==""&&(t[r]=n[r])}return t}function nt(e,t,a,n=null){dt(e,t,7,[a,n])}const Pc=Is();let Bc=0;function Lc(e,t,a){const n=e.type,r=(t?t.appContext:e.appContext)||Pc,i={uid:Bc++,vnode:e,type:n,parent:t,appContext:r,root:null,next:null,subTree:null,effect:null,update:null,job:null,scope:new pu(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(r.provides),ids:t?t.ids:["",0,0],accessCache:null,renderCache:[],components:null,directives:null,propsOptions:zs(n,r),emitsOptions:Gs(n,r),emit:null,emitted:null,propsDefaults:de,inheritAttrs:n.inheritAttrs,ctx:de,data:de,props:de,attrs:de,slots:de,refs:de,setupState:de,setupContext:null,suspense:a,suspenseId:a?a.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return i.ctx={_:i},i.root=t?t.root:i,i.emit=Ac.bind(null,i),e.ce&&e.ce(i),i}let Ye=null;const Hc=()=>Ye||$e;let sn,Xn;{const e=gn(),t=(a,n)=>{let r;return(r=e[a])||(r=e[a]=[]),r.push(n),i=>{r.length>1?r.forEach(s=>s(i)):r[0](i)}};sn=t("__VUE_INSTANCE_SETTERS__",a=>Ye=a),Xn=t("__VUE_SSR_SETTERS__",a=>Ia=a)}const Oa=e=>{const t=Ye;return sn(e),e.scope.on(),()=>{e.scope.off(),sn(t)}},di=()=>{Ye&&Ye.scope.off(),sn(null)};function Vs(e){return e.vnode.shapeFlag&4}let Ia=!1;function Gc(e,t=!1,a=!1){t&&Xn(t);const{props:n,children:r}=e.vnode,i=Vs(e);pc(e,n,i,t),hc(e,r,a||t);const s=i?Uc(e,t):void 0;return t&&Xn(!1),s}function Uc(e,t){const a=e.type;e.accessCache=Object.create(null),e.proxy=new Proxy(e.ctx,ic);const{setup:n}=a;if(n){gt();const r=e.setupContext=n.length>1?qc(e):null,i=Oa(e),s=Ya(n,e,0,[e.props,r]),o=qi(s);if(ht(),i(),(o||e.sp)&&!ba(e)&&vs(e),o){if(s.then(di,di),t)return s.then(d=>{ui(e,d)}).catch(d=>{wn(d,e,0)});e.asyncDep=s}else ui(e,s)}else js(e)}function ui(e,t,a){Q(t)?e.type.__ssrInlineRender?e.ssrRender=t:e.render=t:me(t)&&(e.setupState=gs(t)),js(e)}function js(e,t,a){const n=e.type;e.render||(e.render=n.render||st);{const r=Oa(e);gt();try{sc(e)}finally{ht(),r()}}}const Wc={get(e,t){return Te(e,"get",""),e[t]}};function qc(e){const t=a=>{e.exposed=a||{}};return{attrs:new Proxy(e.attrs,Wc),slots:e.slots,emit:e.emit,expose:t}}function Sn(e){return e.exposed?e.exposeProxy||(e.exposeProxy=new Proxy(gs(Yu(e.exposed)),{get(t,a){if(a in t)return t[a];if(a in wa)return wa[a](e)},has(t,a){return a in t||a in wa}})):e.proxy}function $c(e){return Q(e)&&"__vccOpts"in e}const Ue=(e,t)=>Pu(e,t,Ia);function Ks(e,t,a){const n=(i,s,o)=>{nn(-1);try{return q(i,s,o)}finally{nn(1)}},r=arguments.length;return r===2?me(t)&&!V(t)?rn(t)?n(e,null,[t]):n(e,t):n(e,null,t):(r>3?a=Array.prototype.slice.call(arguments,2):r===3&&rn(a)&&(a=[a]),n(e,t,a))}const Vc="3.5.21";/**
* @vue/runtime-dom v3.5.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/let er;const ci=typeof window<"u"&&window.trustedTypes;if(ci)try{er=ci.createPolicy("vue",{createHTML:e=>e})}catch{}const Qs=er?e=>er.createHTML(e):e=>e,jc="http://www.w3.org/2000/svg",Kc="http://www.w3.org/1998/Math/MathML",mt=typeof document<"u"?document:null,li=mt&&mt.createElement("template"),Qc={insert:(e,t,a)=>{t.insertBefore(e,a||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,a,n)=>{const r=t==="svg"?mt.createElementNS(jc,e):t==="mathml"?mt.createElementNS(Kc,e):a?mt.createElement(e,{is:a}):mt.createElement(e);return e==="select"&&n&&n.multiple!=null&&r.setAttribute("multiple",n.multiple),r},createText:e=>mt.createTextNode(e),createComment:e=>mt.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>mt.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},insertStaticContent(e,t,a,n,r,i){const s=a?a.previousSibling:t.lastChild;if(r&&(r===i||r.nextSibling))for(;t.insertBefore(r.cloneNode(!0),a),!(r===i||!(r=r.nextSibling)););else{li.innerHTML=Qs(n==="svg"?`<svg>${e}</svg>`:n==="mathml"?`<math>${e}</math>`:e);const o=li.content;if(n==="svg"||n==="mathml"){const d=o.firstChild;for(;d.firstChild;)o.appendChild(d.firstChild);o.removeChild(d)}t.insertBefore(o,a)}return[s?s.nextSibling:t.firstChild,a?a.previousSibling:t.lastChild]}},Zc=Symbol("_vtc");function Jc(e,t,a){const n=e[Zc];n&&(t=(t?[t,...n]:[...n]).join(" ")),t==null?e.removeAttribute("class"):a?e.setAttribute("class",t):e.className=t}const mi=Symbol("_vod"),Xc=Symbol("_vsh"),el=Symbol(""),tl=/(?:^|;)\s*display\s*:/;function al(e,t,a){const n=e.style,r=he(a);let i=!1;if(a&&!r){if(t)if(he(t))for(const s of t.split(";")){const o=s.slice(0,s.indexOf(":")).trim();a[o]==null&&ja(n,o,"")}else for(const s in t)a[s]==null&&ja(n,s,"");for(const s in a)s==="display"&&(i=!0),ja(n,s,a[s])}else if(r){if(t!==a){const s=n[el];s&&(a+=";"+s),n.cssText=a,i=tl.test(a)}}else t&&e.removeAttribute("style");mi in e&&(e[mi]=i?n.display:"",e[Xc]&&(n.display="none"))}const pi=/\s*!important$/;function ja(e,t,a){if(V(a))a.forEach(n=>ja(e,t,n));else if(a==null&&(a=""),t.startsWith("--"))e.setProperty(t,a);else{const n=nl(e,t);pi.test(a)?e.setProperty(Rt(n),a.replace(pi,""),"important"):e[n]=a}}const fi=["Webkit","Moz","ms"],Ln={};function nl(e,t){const a=Ln[t];if(a)return a;let n=At(t);if(n!=="filter"&&n in e)return Ln[t]=n;n=ji(n);for(let r=0;r<fi.length;r++){const i=fi[r]+n;if(i in e)return Ln[t]=i}return t}const yi="http://www.w3.org/1999/xlink";function gi(e,t,a,n,r,i=cu(t)){n&&t.startsWith("xlink:")?a==null?e.removeAttributeNS(yi,t.slice(6,t.length)):e.setAttributeNS(yi,t,a):a==null||i&&!Qi(a)?e.removeAttribute(t):e.setAttribute(t,i?"":ot(a)?String(a):a)}function hi(e,t,a,n,r){if(t==="innerHTML"||t==="textContent"){a!=null&&(e[t]=t==="innerHTML"?Qs(a):a);return}const i=e.tagName;if(t==="value"&&i!=="PROGRESS"&&!i.includes("-")){const o=i==="OPTION"?e.getAttribute("value")||"":e.value,d=a==null?e.type==="checkbox"?"on":"":String(a);(o!==d||!("_value"in e))&&(e.value=d),a==null&&e.removeAttribute(t),e._value=a;return}let s=!1;if(a===""||a==null){const o=typeof e[t];o==="boolean"?a=Qi(a):a==null&&o==="string"?(a="",s=!0):o==="number"&&(a=0,s=!0)}try{e[t]=a}catch{}s&&e.removeAttribute(r||t)}function Yt(e,t,a,n){e.addEventListener(t,a,n)}function rl(e,t,a,n){e.removeEventListener(t,a,n)}const Di=Symbol("_vei");function il(e,t,a,n,r=null){const i=e[Di]||(e[Di]={}),s=i[t];if(n&&s)s.value=n;else{const[o,d]=sl(t);if(n){const c=i[t]=ul(n,r);Yt(e,o,c,d)}else s&&(rl(e,o,s,d),i[t]=void 0)}}const bi=/(?:Once|Passive|Capture)$/;function sl(e){let t;if(bi.test(e)){t={};let n;for(;n=e.match(bi);)e=e.slice(0,e.length-n[0].length),t[n[0].toLowerCase()]=!0}return[e[2]===":"?e.slice(3):Rt(e.slice(2)),t]}let Hn=0;const ol=Promise.resolve(),dl=()=>Hn||(ol.then(()=>Hn=0),Hn=Date.now());function ul(e,t){const a=n=>{if(!n._vts)n._vts=Date.now();else if(n._vts<=a.attached)return;dt(cl(n,a.value),t,5,[n])};return a.value=e,a.attached=dl(),a}function cl(e,t){if(V(t)){const a=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{a.call(e),e._stopped=!0},t.map(n=>r=>!r._stopped&&n&&n(r))}else return t}const wi=e=>e.charCodeAt(0)===111&&e.charCodeAt(1)===110&&e.charCodeAt(2)>96&&e.charCodeAt(2)<123,ll=(e,t,a,n,r,i)=>{const s=r==="svg";t==="class"?Jc(e,n,s):t==="style"?al(e,a,n):pn(t)?or(t)||il(e,t,a,n,i):(t[0]==="."?(t=t.slice(1),!0):t[0]==="^"?(t=t.slice(1),!1):ml(e,t,n,s))?(hi(e,t,n),!e.tagName.includes("-")&&(t==="value"||t==="checked"||t==="selected")&&gi(e,t,n,s,i,t!=="value")):e._isVueCE&&(/[A-Z]/.test(t)||!he(n))?hi(e,At(t),n,i,t):(t==="true-value"?e._trueValue=n:t==="false-value"&&(e._falseValue=n),gi(e,t,n,s))};function ml(e,t,a,n){if(n)return!!(t==="innerHTML"||t==="textContent"||t in e&&wi(t)&&Q(a));if(t==="spellcheck"||t==="draggable"||t==="translate"||t==="autocorrect"||t==="form"||t==="list"&&e.tagName==="INPUT"||t==="type"&&e.tagName==="TEXTAREA")return!1;if(t==="width"||t==="height"){const r=e.tagName;if(r==="IMG"||r==="VIDEO"||r==="CANVAS"||r==="SOURCE")return!1}return wi(t)&&he(a)?!1:t in e}const on=e=>{const t=e.props["onUpdate:modelValue"]||!1;return V(t)?a=>Ua(t,a):t};function pl(e){e.target.composing=!0}function xi(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const Jt=Symbol("_assign"),Re={created(e,{modifiers:{lazy:t,trim:a,number:n}},r){e[Jt]=on(r);const i=n||r.props&&r.props.type==="number";Yt(e,t?"change":"input",s=>{if(s.target.composing)return;let o=e.value;a&&(o=o.trim()),i&&(o=Qa(o)),e[Jt](o)}),a&&Yt(e,"change",()=>{e.value=e.value.trim()}),t||(Yt(e,"compositionstart",pl),Yt(e,"compositionend",xi),Yt(e,"change",xi))},mounted(e,{value:t}){e.value=t??""},beforeUpdate(e,{value:t,oldValue:a,modifiers:{lazy:n,trim:r,number:i}},s){if(e[Jt]=on(s),e.composing)return;const o=(i||e.type==="number")&&!/^0\d/.test(e.value)?Qa(e.value):e.value,d=t??"";o!==d&&(document.activeElement===e&&e.type!=="range"&&(n&&t===a||r&&e.value.trim()===d)||(e.value=d))}},Ha={deep:!0,created(e,{value:t,modifiers:{number:a}},n){const r=fn(t);Yt(e,"change",()=>{const i=Array.prototype.filter.call(e.options,s=>s.selected).map(s=>a?Qa(dn(s)):dn(s));e[Jt](e.multiple?r?new Set(i):i:i[0]),e._assigning=!0,Dr(()=>{e._assigning=!1})}),e[Jt]=on(n)},mounted(e,{value:t}){Ti(e,t)},beforeUpdate(e,t,a){e[Jt]=on(a)},updated(e,{value:t}){e._assigning||Ti(e,t)}};function Ti(e,t){const a=e.multiple,n=V(t);if(!(a&&!n&&!fn(t))){for(let r=0,i=e.options.length;r<i;r++){const s=e.options[r],o=dn(s);if(a)if(n){const d=typeof o;d==="string"||d==="number"?s.selected=t.some(c=>String(c)===String(o)):s.selected=mu(t,o)>-1}else s.selected=t.has(o);else if(hn(dn(s),t)){e.selectedIndex!==r&&(e.selectedIndex=r);return}}!a&&e.selectedIndex!==-1&&(e.selectedIndex=-1)}}function dn(e){return"_value"in e?e._value:e.value}const fl=["ctrl","shift","alt","meta"],yl={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&e.button!==0,middle:e=>"button"in e&&e.button!==1,right:e=>"button"in e&&e.button!==2,exact:(e,t)=>fl.some(a=>e[`${a}Key`]&&!t.includes(a))},Xt=(e,t)=>{const a=e._withMods||(e._withMods={}),n=t.join(".");return a[n]||(a[n]=((r,...i)=>{for(let s=0;s<t.length;s++){const o=yl[t[s]];if(o&&o(r,t))return}return e(r,...i)}))},gl=Me({patchProp:ll},Qc);let vi;function hl(){return vi||(vi=bc(gl))}const Dl=((...e)=>{const t=hl().createApp(...e),{mount:a}=t;return t.mount=n=>{const r=wl(n);if(!r)return;const i=t._component;!Q(i)&&!i.render&&!i.template&&(i.template=r.innerHTML),r.nodeType===1&&(r.textContent="");const s=a(r,!1,bl(r));return r instanceof Element&&(r.removeAttribute("v-cloak"),r.setAttribute("data-v-app","")),s},t});function bl(e){if(e instanceof SVGElement)return"svg";if(typeof MathMLElement=="function"&&e instanceof MathMLElement)return"mathml"}function wl(e){return he(e)?document.querySelector(e):e}/*!
  * vue-router v4.5.1
  * (c) 2025 Eduardo San Martin Morote
  * @license MIT
  */const $t=typeof document<"u";function Zs(e){return typeof e=="object"||"displayName"in e||"props"in e||"__vccOpts"in e}function xl(e){return e.__esModule||e[Symbol.toStringTag]==="Module"||e.default&&Zs(e.default)}const ae=Object.assign;function Gn(e,t){const a={};for(const n in t){const r=t[n];a[n]=Ze(r)?r.map(e):e(r)}return a}const Ta=()=>{},Ze=Array.isArray,Js=/#/g,Tl=/&/g,vl=/\//g,Sl=/=/g,Ml=/\?/g,Xs=/\+/g,kl=/%5B/g,Al=/%5D/g,eo=/%5E/g,Cl=/%60/g,to=/%7B/g,Il=/%7C/g,ao=/%7D/g,El=/%20/g;function Sr(e){return encodeURI(""+e).replace(Il,"|").replace(kl,"[").replace(Al,"]")}function _l(e){return Sr(e).replace(to,"{").replace(ao,"}").replace(eo,"^")}function tr(e){return Sr(e).replace(Xs,"%2B").replace(El,"+").replace(Js,"%23").replace(Tl,"%26").replace(Cl,"`").replace(to,"{").replace(ao,"}").replace(eo,"^")}function Nl(e){return tr(e).replace(Sl,"%3D")}function Yl(e){return Sr(e).replace(Js,"%23").replace(Ml,"%3F")}function zl(e){return e==null?"":Yl(e).replace(vl,"%2F")}function Ea(e){try{return decodeURIComponent(""+e)}catch{}return""+e}const Ol=/\/$/,Fl=e=>e.replace(Ol,"");function Un(e,t,a="/"){let n,r={},i="",s="";const o=t.indexOf("#");let d=t.indexOf("?");return o<d&&o>=0&&(d=-1),d>-1&&(n=t.slice(0,d),i=t.slice(d+1,o>-1?o:t.length),r=e(i)),o>-1&&(n=n||t.slice(0,o),s=t.slice(o,t.length)),n=Ll(n??t,a),{fullPath:n+(i&&"?")+i+s,path:n,query:r,hash:Ea(s)}}function Rl(e,t){const a=t.query?e(t.query):"";return t.path+(a&&"?")+a+(t.hash||"")}function Si(e,t){return!t||!e.toLowerCase().startsWith(t.toLowerCase())?e:e.slice(t.length)||"/"}function Pl(e,t,a){const n=t.matched.length-1,r=a.matched.length-1;return n>-1&&n===r&&ta(t.matched[n],a.matched[r])&&no(t.params,a.params)&&e(t.query)===e(a.query)&&t.hash===a.hash}function ta(e,t){return(e.aliasOf||e)===(t.aliasOf||t)}function no(e,t){if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const a in e)if(!Bl(e[a],t[a]))return!1;return!0}function Bl(e,t){return Ze(e)?Mi(e,t):Ze(t)?Mi(t,e):e===t}function Mi(e,t){return Ze(t)?e.length===t.length&&e.every((a,n)=>a===t[n]):e.length===1&&e[0]===t}function Ll(e,t){if(e.startsWith("/"))return e;if(!e)return t;const a=t.split("/"),n=e.split("/"),r=n[n.length-1];(r===".."||r===".")&&n.push("");let i=a.length-1,s,o;for(s=0;s<n.length;s++)if(o=n[s],o!==".")if(o==="..")i>1&&i--;else break;return a.slice(0,i).join("/")+"/"+n.slice(s).join("/")}const Tt={path:"/",name:void 0,params:{},query:{},hash:"",fullPath:"/",matched:[],meta:{},redirectedFrom:void 0};var _a;(function(e){e.pop="pop",e.push="push"})(_a||(_a={}));var va;(function(e){e.back="back",e.forward="forward",e.unknown=""})(va||(va={}));function Hl(e){if(!e)if($t){const t=document.querySelector("base");e=t&&t.getAttribute("href")||"/",e=e.replace(/^\w+:\/\/[^\/]+/,"")}else e="/";return e[0]!=="/"&&e[0]!=="#"&&(e="/"+e),Fl(e)}const Gl=/^[^#]+#/;function Ul(e,t){return e.replace(Gl,"#")+t}function Wl(e,t){const a=document.documentElement.getBoundingClientRect(),n=e.getBoundingClientRect();return{behavior:t.behavior,left:n.left-a.left-(t.left||0),top:n.top-a.top-(t.top||0)}}const Mn=()=>({left:window.scrollX,top:window.scrollY});function ql(e){let t;if("el"in e){const a=e.el,n=typeof a=="string"&&a.startsWith("#"),r=typeof a=="string"?n?document.getElementById(a.slice(1)):document.querySelector(a):a;if(!r)return;t=Wl(r,e)}else t=e;"scrollBehavior"in document.documentElement.style?window.scrollTo(t):window.scrollTo(t.left!=null?t.left:window.scrollX,t.top!=null?t.top:window.scrollY)}function ki(e,t){return(history.state?history.state.position-t:-1)+e}const ar=new Map;function $l(e,t){ar.set(e,t)}function Vl(e){const t=ar.get(e);return ar.delete(e),t}let jl=()=>location.protocol+"//"+location.host;function ro(e,t){const{pathname:a,search:n,hash:r}=t,i=e.indexOf("#");if(i>-1){let o=r.includes(e.slice(i))?e.slice(i).length:1,d=r.slice(o);return d[0]!=="/"&&(d="/"+d),Si(d,"")}return Si(a,e)+n+r}function Kl(e,t,a,n){let r=[],i=[],s=null;const o=({state:m})=>{const g=ro(e,location),k=a.value,C=t.value;let H=0;if(m){if(a.value=g,t.value=m,s&&s===k){s=null;return}H=C?m.position-C.position:0}else n(g);r.forEach(Y=>{Y(a.value,k,{delta:H,type:_a.pop,direction:H?H>0?va.forward:va.back:va.unknown})})};function d(){s=a.value}function c(m){r.push(m);const g=()=>{const k=r.indexOf(m);k>-1&&r.splice(k,1)};return i.push(g),g}function u(){const{history:m}=window;m.state&&m.replaceState(ae({},m.state,{scroll:Mn()}),"")}function l(){for(const m of i)m();i=[],window.removeEventListener("popstate",o),window.removeEventListener("beforeunload",u)}return window.addEventListener("popstate",o),window.addEventListener("beforeunload",u,{passive:!0}),{pauseListeners:d,listen:c,destroy:l}}function Ai(e,t,a,n=!1,r=!1){return{back:e,current:t,forward:a,replaced:n,position:window.history.length,scroll:r?Mn():null}}function Ql(e){const{history:t,location:a}=window,n={value:ro(e,a)},r={value:t.state};r.value||i(n.value,{back:null,current:n.value,forward:null,position:t.length-1,replaced:!0,scroll:null},!0);function i(d,c,u){const l=e.indexOf("#"),m=l>-1?(a.host&&document.querySelector("base")?e:e.slice(l))+d:jl()+e+d;try{t[u?"replaceState":"pushState"](c,"",m),r.value=c}catch(g){console.error(g),a[u?"replace":"assign"](m)}}function s(d,c){const u=ae({},t.state,Ai(r.value.back,d,r.value.forward,!0),c,{position:r.value.position});i(d,u,!0),n.value=d}function o(d,c){const u=ae({},r.value,t.state,{forward:d,scroll:Mn()});i(u.current,u,!0);const l=ae({},Ai(n.value,d,null),{position:u.position+1},c);i(d,l,!1),n.value=d}return{location:n,state:r,push:o,replace:s}}function Zl(e){e=Hl(e);const t=Ql(e),a=Kl(e,t.state,t.location,t.replace);function n(i,s=!0){s||a.pauseListeners(),history.go(i)}const r=ae({location:"",base:e,go:n,createHref:Ul.bind(null,e)},t,a);return Object.defineProperty(r,"location",{enumerable:!0,get:()=>t.location.value}),Object.defineProperty(r,"state",{enumerable:!0,get:()=>t.state.value}),r}function Jl(e){return typeof e=="string"||e&&typeof e=="object"}function io(e){return typeof e=="string"||typeof e=="symbol"}const so=Symbol("");var Ci;(function(e){e[e.aborted=4]="aborted",e[e.cancelled=8]="cancelled",e[e.duplicated=16]="duplicated"})(Ci||(Ci={}));function aa(e,t){return ae(new Error,{type:e,[so]:!0},t)}function lt(e,t){return e instanceof Error&&so in e&&(t==null||!!(e.type&t))}const Ii="[^/]+?",Xl={sensitive:!1,strict:!1,start:!0,end:!0},em=/[.+*?^${}()[\]/\\]/g;function tm(e,t){const a=ae({},Xl,t),n=[];let r=a.start?"^":"";const i=[];for(const c of e){const u=c.length?[]:[90];a.strict&&!c.length&&(r+="/");for(let l=0;l<c.length;l++){const m=c[l];let g=40+(a.sensitive?.25:0);if(m.type===0)l||(r+="/"),r+=m.value.replace(em,"\\$&"),g+=40;else if(m.type===1){const{value:k,repeatable:C,optional:H,regexp:Y}=m;i.push({name:k,repeatable:C,optional:H});const O=Y||Ii;if(O!==Ii){g+=10;try{new RegExp(`(${O})`)}catch(b){throw new Error(`Invalid custom RegExp for param "${k}" (${O}): `+b.message)}}let h=C?`((?:${O})(?:/(?:${O}))*)`:`(${O})`;l||(h=H&&c.length<2?`(?:/${h})`:"/"+h),H&&(h+="?"),r+=h,g+=20,H&&(g+=-8),C&&(g+=-20),O===".*"&&(g+=-50)}u.push(g)}n.push(u)}if(a.strict&&a.end){const c=n.length-1;n[c][n[c].length-1]+=.7000000000000001}a.strict||(r+="/?"),a.end?r+="$":a.strict&&!r.endsWith("/")&&(r+="(?:/|$)");const s=new RegExp(r,a.sensitive?"":"i");function o(c){const u=c.match(s),l={};if(!u)return null;for(let m=1;m<u.length;m++){const g=u[m]||"",k=i[m-1];l[k.name]=g&&k.repeatable?g.split("/"):g}return l}function d(c){let u="",l=!1;for(const m of e){(!l||!u.endsWith("/"))&&(u+="/"),l=!1;for(const g of m)if(g.type===0)u+=g.value;else if(g.type===1){const{value:k,repeatable:C,optional:H}=g,Y=k in c?c[k]:"";if(Ze(Y)&&!C)throw new Error(`Provided param "${k}" is an array but it is not repeatable (* or + modifiers)`);const O=Ze(Y)?Y.join("/"):Y;if(!O)if(H)m.length<2&&(u.endsWith("/")?u=u.slice(0,-1):l=!0);else throw new Error(`Missing required param "${k}"`);u+=O}}return u||"/"}return{re:s,score:n,keys:i,parse:o,stringify:d}}function am(e,t){let a=0;for(;a<e.length&&a<t.length;){const n=t[a]-e[a];if(n)return n;a++}return e.length<t.length?e.length===1&&e[0]===80?-1:1:e.length>t.length?t.length===1&&t[0]===80?1:-1:0}function oo(e,t){let a=0;const n=e.score,r=t.score;for(;a<n.length&&a<r.length;){const i=am(n[a],r[a]);if(i)return i;a++}if(Math.abs(r.length-n.length)===1){if(Ei(n))return 1;if(Ei(r))return-1}return r.length-n.length}function Ei(e){const t=e[e.length-1];return e.length>0&&t[t.length-1]<0}const nm={type:0,value:""},rm=/[a-zA-Z0-9_]/;function im(e){if(!e)return[[]];if(e==="/")return[[nm]];if(!e.startsWith("/"))throw new Error(`Invalid path "${e}"`);function t(g){throw new Error(`ERR (${a})/"${c}": ${g}`)}let a=0,n=a;const r=[];let i;function s(){i&&r.push(i),i=[]}let o=0,d,c="",u="";function l(){c&&(a===0?i.push({type:0,value:c}):a===1||a===2||a===3?(i.length>1&&(d==="*"||d==="+")&&t(`A repeatable param (${c}) must be alone in its segment. eg: '/:ids+.`),i.push({type:1,value:c,regexp:u,repeatable:d==="*"||d==="+",optional:d==="*"||d==="?"})):t("Invalid state to consume buffer"),c="")}function m(){c+=d}for(;o<e.length;){if(d=e[o++],d==="\\"&&a!==2){n=a,a=4;continue}switch(a){case 0:d==="/"?(c&&l(),s()):d===":"?(l(),a=1):m();break;case 4:m(),a=n;break;case 1:d==="("?a=2:rm.test(d)?m():(l(),a=0,d!=="*"&&d!=="?"&&d!=="+"&&o--);break;case 2:d===")"?u[u.length-1]=="\\"?u=u.slice(0,-1)+d:a=3:u+=d;break;case 3:l(),a=0,d!=="*"&&d!=="?"&&d!=="+"&&o--,u="";break;default:t("Unknown state");break}}return a===2&&t(`Unfinished custom RegExp for param "${c}"`),l(),s(),r}function sm(e,t,a){const n=tm(im(e.path),a),r=ae(n,{record:e,parent:t,children:[],alias:[]});return t&&!r.record.aliasOf==!t.record.aliasOf&&t.children.push(r),r}function om(e,t){const a=[],n=new Map;t=zi({strict:!1,end:!0,sensitive:!1},t);function r(l){return n.get(l)}function i(l,m,g){const k=!g,C=Ni(l);C.aliasOf=g&&g.record;const H=zi(t,l),Y=[C];if("alias"in l){const b=typeof l.alias=="string"?[l.alias]:l.alias;for(const x of b)Y.push(Ni(ae({},C,{components:g?g.record.components:C.components,path:x,aliasOf:g?g.record:C})))}let O,h;for(const b of Y){const{path:x}=b;if(m&&x[0]!=="/"){const I=m.record.path,B=I[I.length-1]==="/"?"":"/";b.path=m.record.path+(x&&B+x)}if(O=sm(b,m,H),g?g.alias.push(O):(h=h||O,h!==O&&h.alias.push(O),k&&l.name&&!Yi(O)&&s(l.name)),uo(O)&&d(O),C.children){const I=C.children;for(let B=0;B<I.length;B++)i(I[B],O,g&&g.children[B])}g=g||O}return h?()=>{s(h)}:Ta}function s(l){if(io(l)){const m=n.get(l);m&&(n.delete(l),a.splice(a.indexOf(m),1),m.children.forEach(s),m.alias.forEach(s))}else{const m=a.indexOf(l);m>-1&&(a.splice(m,1),l.record.name&&n.delete(l.record.name),l.children.forEach(s),l.alias.forEach(s))}}function o(){return a}function d(l){const m=cm(l,a);a.splice(m,0,l),l.record.name&&!Yi(l)&&n.set(l.record.name,l)}function c(l,m){let g,k={},C,H;if("name"in l&&l.name){if(g=n.get(l.name),!g)throw aa(1,{location:l});H=g.record.name,k=ae(_i(m.params,g.keys.filter(h=>!h.optional).concat(g.parent?g.parent.keys.filter(h=>h.optional):[]).map(h=>h.name)),l.params&&_i(l.params,g.keys.map(h=>h.name))),C=g.stringify(k)}else if(l.path!=null)C=l.path,g=a.find(h=>h.re.test(C)),g&&(k=g.parse(C),H=g.record.name);else{if(g=m.name?n.get(m.name):a.find(h=>h.re.test(m.path)),!g)throw aa(1,{location:l,currentLocation:m});H=g.record.name,k=ae({},m.params,l.params),C=g.stringify(k)}const Y=[];let O=g;for(;O;)Y.unshift(O.record),O=O.parent;return{name:H,path:C,params:k,matched:Y,meta:um(Y)}}e.forEach(l=>i(l));function u(){a.length=0,n.clear()}return{addRoute:i,resolve:c,removeRoute:s,clearRoutes:u,getRoutes:o,getRecordMatcher:r}}function _i(e,t){const a={};for(const n of t)n in e&&(a[n]=e[n]);return a}function Ni(e){const t={path:e.path,redirect:e.redirect,name:e.name,meta:e.meta||{},aliasOf:e.aliasOf,beforeEnter:e.beforeEnter,props:dm(e),children:e.children||[],instances:{},leaveGuards:new Set,updateGuards:new Set,enterCallbacks:{},components:"components"in e?e.components||null:e.component&&{default:e.component}};return Object.defineProperty(t,"mods",{value:{}}),t}function dm(e){const t={},a=e.props||!1;if("component"in e)t.default=a;else for(const n in e.components)t[n]=typeof a=="object"?a[n]:a;return t}function Yi(e){for(;e;){if(e.record.aliasOf)return!0;e=e.parent}return!1}function um(e){return e.reduce((t,a)=>ae(t,a.meta),{})}function zi(e,t){const a={};for(const n in e)a[n]=n in t?t[n]:e[n];return a}function cm(e,t){let a=0,n=t.length;for(;a!==n;){const i=a+n>>1;oo(e,t[i])<0?n=i:a=i+1}const r=lm(e);return r&&(n=t.lastIndexOf(r,n-1)),n}function lm(e){let t=e;for(;t=t.parent;)if(uo(t)&&oo(e,t)===0)return t}function uo({record:e}){return!!(e.name||e.components&&Object.keys(e.components).length||e.redirect)}function mm(e){const t={};if(e===""||e==="?")return t;const n=(e[0]==="?"?e.slice(1):e).split("&");for(let r=0;r<n.length;++r){const i=n[r].replace(Xs," "),s=i.indexOf("="),o=Ea(s<0?i:i.slice(0,s)),d=s<0?null:Ea(i.slice(s+1));if(o in t){let c=t[o];Ze(c)||(c=t[o]=[c]),c.push(d)}else t[o]=d}return t}function Oi(e){let t="";for(let a in e){const n=e[a];if(a=Nl(a),n==null){n!==void 0&&(t+=(t.length?"&":"")+a);continue}(Ze(n)?n.map(i=>i&&tr(i)):[n&&tr(n)]).forEach(i=>{i!==void 0&&(t+=(t.length?"&":"")+a,i!=null&&(t+="="+i))})}return t}function pm(e){const t={};for(const a in e){const n=e[a];n!==void 0&&(t[a]=Ze(n)?n.map(r=>r==null?null:""+r):n==null?n:""+n)}return t}const fm=Symbol(""),Fi=Symbol(""),Mr=Symbol(""),co=Symbol(""),nr=Symbol("");function pa(){let e=[];function t(n){return e.push(n),()=>{const r=e.indexOf(n);r>-1&&e.splice(r,1)}}function a(){e=[]}return{add:t,list:()=>e.slice(),reset:a}}function Mt(e,t,a,n,r,i=s=>s()){const s=n&&(n.enterCallbacks[r]=n.enterCallbacks[r]||[]);return()=>new Promise((o,d)=>{const c=m=>{m===!1?d(aa(4,{from:a,to:t})):m instanceof Error?d(m):Jl(m)?d(aa(2,{from:t,to:m})):(s&&n.enterCallbacks[r]===s&&typeof m=="function"&&s.push(m),o())},u=i(()=>e.call(n&&n.instances[r],t,a,c));let l=Promise.resolve(u);e.length<3&&(l=l.then(c)),l.catch(m=>d(m))})}function Wn(e,t,a,n,r=i=>i()){const i=[];for(const s of e)for(const o in s.components){let d=s.components[o];if(!(t!=="beforeRouteEnter"&&!s.instances[o]))if(Zs(d)){const u=(d.__vccOpts||d)[t];u&&i.push(Mt(u,a,n,s,o,r))}else{let c=d();i.push(()=>c.then(u=>{if(!u)throw new Error(`Couldn't resolve component "${o}" at "${s.path}"`);const l=xl(u)?u.default:u;s.mods[o]=u,s.components[o]=l;const g=(l.__vccOpts||l)[t];return g&&Mt(g,a,n,s,o,r)()}))}}return i}function Ri(e){const t=yt(Mr),a=yt(co),n=Ue(()=>{const d=ge(e.to);return t.resolve(d)}),r=Ue(()=>{const{matched:d}=n.value,{length:c}=d,u=d[c-1],l=a.matched;if(!u||!l.length)return-1;const m=l.findIndex(ta.bind(null,u));if(m>-1)return m;const g=Pi(d[c-2]);return c>1&&Pi(u)===g&&l[l.length-1].path!==g?l.findIndex(ta.bind(null,d[c-2])):m}),i=Ue(()=>r.value>-1&&Dm(a.params,n.value.params)),s=Ue(()=>r.value>-1&&r.value===a.matched.length-1&&no(a.params,n.value.params));function o(d={}){if(hm(d)){const c=t[ge(e.replace)?"replace":"push"](ge(e.to)).catch(Ta);return e.viewTransition&&typeof document<"u"&&"startViewTransition"in document&&document.startViewTransition(()=>c),c}return Promise.resolve()}return{route:n,href:Ue(()=>n.value.href),isActive:i,isExactActive:s,navigate:o}}function ym(e){return e.length===1?e[0]:e}const gm=Ts({name:"RouterLink",compatConfig:{MODE:3},props:{to:{type:[String,Object],required:!0},replace:Boolean,activeClass:String,exactActiveClass:String,custom:Boolean,ariaCurrentValue:{type:String,default:"page"},viewTransition:Boolean},useLink:Ri,setup(e,{slots:t}){const a=bn(Ri(e)),{options:n}=yt(Mr),r=Ue(()=>({[Bi(e.activeClass,n.linkActiveClass,"router-link-active")]:a.isActive,[Bi(e.exactActiveClass,n.linkExactActiveClass,"router-link-exact-active")]:a.isExactActive}));return()=>{const i=t.default&&ym(t.default(a));return e.custom?i:Ks("a",{"aria-current":a.isExactActive?e.ariaCurrentValue:null,href:a.href,onClick:a.navigate,class:r.value},i)}}}),Ie=gm;function hm(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)&&!e.defaultPrevented&&!(e.button!==void 0&&e.button!==0)){if(e.currentTarget&&e.currentTarget.getAttribute){const t=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(t))return}return e.preventDefault&&e.preventDefault(),!0}}function Dm(e,t){for(const a in t){const n=t[a],r=e[a];if(typeof n=="string"){if(n!==r)return!1}else if(!Ze(r)||r.length!==n.length||n.some((i,s)=>i!==r[s]))return!1}return!0}function Pi(e){return e?e.aliasOf?e.aliasOf.path:e.path:""}const Bi=(e,t,a)=>e??t??a,bm=Ts({name:"RouterView",inheritAttrs:!1,props:{name:{type:String,default:"default"},route:Object},compatConfig:{MODE:3},setup(e,{attrs:t,slots:a}){const n=yt(nr),r=Ue(()=>e.route||n.value),i=yt(Fi,0),s=Ue(()=>{let c=ge(i);const{matched:u}=r.value;let l;for(;(l=u[c])&&!l.components;)c++;return c}),o=Ue(()=>r.value.matched[s.value]);Wa(Fi,Ue(()=>s.value+1)),Wa(fm,o),Wa(nr,r);const d=ve();return qa(()=>[d.value,o.value,e.name],([c,u,l],[m,g,k])=>{u&&(u.instances[l]=c,g&&g!==u&&c&&c===m&&(u.leaveGuards.size||(u.leaveGuards=g.leaveGuards),u.updateGuards.size||(u.updateGuards=g.updateGuards))),c&&u&&(!g||!ta(u,g)||!m)&&(u.enterCallbacks[l]||[]).forEach(C=>C(c))},{flush:"post"}),()=>{const c=r.value,u=e.name,l=o.value,m=l&&l.components[u];if(!m)return Li(a.default,{Component:m,route:c});const g=l.props[u],k=g?g===!0?c.params:typeof g=="function"?g(c):g:null,H=Ks(m,ae({},k,t,{onVnodeUnmounted:Y=>{Y.component.isUnmounted&&(l.instances[u]=null)},ref:d}));return Li(a.default,{Component:H,route:c})||H}}});function Li(e,t){if(!e)return null;const a=e(t);return a.length===1?a[0]:a}const lo=bm;function wm(e){const t=om(e.routes,e),a=e.parseQuery||mm,n=e.stringifyQuery||Oi,r=e.history,i=pa(),s=pa(),o=pa(),d=zu(Tt);let c=Tt;$t&&e.scrollBehavior&&"scrollRestoration"in history&&(history.scrollRestoration="manual");const u=Gn.bind(null,M=>""+M),l=Gn.bind(null,zl),m=Gn.bind(null,Ea);function g(M,G){let P,U;return io(M)?(P=t.getRecordMatcher(M),U=G):U=M,t.addRoute(U,P)}function k(M){const G=t.getRecordMatcher(M);G&&t.removeRoute(G)}function C(){return t.getRoutes().map(M=>M.record)}function H(M){return!!t.getRecordMatcher(M)}function Y(M,G){if(G=ae({},G||d.value),typeof M=="string"){const D=Un(a,M,G.path),S=t.resolve({path:D.path},G),A=r.createHref(D.fullPath);return ae(D,S,{params:m(S.params),hash:Ea(D.hash),redirectedFrom:void 0,href:A})}let P;if(M.path!=null)P=ae({},M,{path:Un(a,M.path,G.path).path});else{const D=ae({},M.params);for(const S in D)D[S]==null&&delete D[S];P=ae({},M,{params:l(D)}),G.params=l(G.params)}const U=t.resolve(P,G),oe=M.hash||"";U.params=u(m(U.params));const f=Rl(n,ae({},M,{hash:_l(oe),path:U.path})),y=r.createHref(f);return ae({fullPath:f,hash:oe,query:n===Oi?pm(M.query):M.query||{}},U,{redirectedFrom:void 0,href:y})}function O(M){return typeof M=="string"?Un(a,M,d.value.path):ae({},M)}function h(M,G){if(c!==M)return aa(8,{from:G,to:M})}function b(M){return B(M)}function x(M){return b(ae(O(M),{replace:!0}))}function I(M){const G=M.matched[M.matched.length-1];if(G&&G.redirect){const{redirect:P}=G;let U=typeof P=="function"?P(M):P;return typeof U=="string"&&(U=U.includes("?")||U.includes("#")?U=O(U):{path:U},U.params={}),ae({query:M.query,hash:M.hash,params:U.path!=null?{}:M.params},U)}}function B(M,G){const P=c=Y(M),U=d.value,oe=M.state,f=M.force,y=M.replace===!0,D=I(P);if(D)return B(ae(O(D),{state:typeof D=="object"?ae({},oe,D.state):oe,force:f,replace:y}),G||P);const S=P;S.redirectedFrom=G;let A;return!f&&Pl(n,U,P)&&(A=aa(16,{to:S,from:U}),Xe(U,U,!0,!1)),(A?Promise.resolve(A):ee(S,U)).catch(v=>lt(v)?lt(v,2)?v:xt(v):te(v,S,U)).then(v=>{if(v){if(lt(v,2))return B(ae({replace:y},O(v.to),{state:typeof v.to=="object"?ae({},oe,v.to.state):oe,force:f}),G||S)}else v=Je(S,U,!0,y,oe);return Be(S,U,v),v})}function Z(M,G){const P=h(M,G);return P?Promise.reject(P):Promise.resolve()}function pe(M){const G=Gt.values().next().value;return G&&typeof G.runWithContext=="function"?G.runWithContext(M):M()}function ee(M,G){let P;const[U,oe,f]=xm(M,G);P=Wn(U.reverse(),"beforeRouteLeave",M,G);for(const D of U)D.leaveGuards.forEach(S=>{P.push(Mt(S,M,G))});const y=Z.bind(null,M,G);return P.push(y),qe(P).then(()=>{P=[];for(const D of i.list())P.push(Mt(D,M,G));return P.push(y),qe(P)}).then(()=>{P=Wn(oe,"beforeRouteUpdate",M,G);for(const D of oe)D.updateGuards.forEach(S=>{P.push(Mt(S,M,G))});return P.push(y),qe(P)}).then(()=>{P=[];for(const D of f)if(D.beforeEnter)if(Ze(D.beforeEnter))for(const S of D.beforeEnter)P.push(Mt(S,M,G));else P.push(Mt(D.beforeEnter,M,G));return P.push(y),qe(P)}).then(()=>(M.matched.forEach(D=>D.enterCallbacks={}),P=Wn(f,"beforeRouteEnter",M,G,pe),P.push(y),qe(P))).then(()=>{P=[];for(const D of s.list())P.push(Mt(D,M,G));return P.push(y),qe(P)}).catch(D=>lt(D,8)?D:Promise.reject(D))}function Be(M,G,P){o.list().forEach(U=>pe(()=>U(M,G,P)))}function Je(M,G,P,U,oe){const f=h(M,G);if(f)return f;const y=G===Tt,D=$t?history.state:{};P&&(U||y?r.replace(M.fullPath,ae({scroll:y&&D&&D.scroll},oe)):r.push(M.fullPath,oe)),d.value=M,Xe(M,G,P,y),xt()}let ke;function ua(){ke||(ke=r.listen((M,G,P)=>{if(!Ra.listening)return;const U=Y(M),oe=I(U);if(oe){B(ae(oe,{replace:!0,force:!0}),U).catch(Ta);return}c=U;const f=d.value;$t&&$l(ki(f.fullPath,P.delta),Mn()),ee(U,f).catch(y=>lt(y,12)?y:lt(y,2)?(B(ae(O(y.to),{force:!0}),U).then(D=>{lt(D,20)&&!P.delta&&P.type===_a.pop&&r.go(-1,!1)}).catch(Ta),Promise.reject()):(P.delta&&r.go(-P.delta,!1),te(y,U,f))).then(y=>{y=y||Je(U,f,!1),y&&(P.delta&&!lt(y,8)?r.go(-P.delta,!1):P.type===_a.pop&&lt(y,20)&&r.go(-1,!1)),Be(U,f,y)}).catch(Ta)}))}let Lt=pa(),De=pa(),se;function te(M,G,P){xt(M);const U=De.list();return U.length?U.forEach(oe=>oe(M,G,P)):console.error(M),Promise.reject(M)}function ut(){return se&&d.value!==Tt?Promise.resolve():new Promise((M,G)=>{Lt.add([M,G])})}function xt(M){return se||(se=!M,ua(),Lt.list().forEach(([G,P])=>M?P(M):G()),Lt.reset()),M}function Xe(M,G,P,U){const{scrollBehavior:oe}=e;if(!$t||!oe)return Promise.resolve();const f=!P&&Vl(ki(M.fullPath,0))||(U||!P)&&history.state&&history.state.scroll||null;return Dr().then(()=>oe(M,G,f)).then(y=>y&&ql(y)).catch(y=>te(y,M,G))}const ze=M=>r.go(M);let Ht;const Gt=new Set,Ra={currentRoute:d,listening:!0,addRoute:g,removeRoute:k,clearRoutes:t.clearRoutes,hasRoute:H,getRoutes:C,resolve:Y,options:e,push:b,replace:x,go:ze,back:()=>ze(-1),forward:()=>ze(1),beforeEach:i.add,beforeResolve:s.add,afterEach:o.add,onError:De.add,isReady:ut,install(M){const G=this;M.component("RouterLink",Ie),M.component("RouterView",lo),M.config.globalProperties.$router=G,Object.defineProperty(M.config.globalProperties,"$route",{enumerable:!0,get:()=>ge(d)}),$t&&!Ht&&d.value===Tt&&(Ht=!0,b(r.location).catch(oe=>{}));const P={};for(const oe in Tt)Object.defineProperty(P,oe,{get:()=>d.value[oe],enumerable:!0});M.provide(Mr,G),M.provide(co,ps(P)),M.provide(nr,d);const U=M.unmount;Gt.add(M),M.unmount=function(){Gt.delete(M),Gt.size<1&&(c=Tt,ke&&ke(),ke=null,d.value=Tt,Ht=!1,se=!1),U()}}};function qe(M){return M.reduce((G,P)=>G.then(()=>pe(P)),Promise.resolve())}return Ra}function xm(e,t){const a=[],n=[],r=[],i=Math.max(t.matched.length,e.matched.length);for(let s=0;s<i;s++){const o=t.matched[s];o&&(e.matched.find(c=>ta(c,o))?n.push(o):a.push(o));const d=e.matched[s];d&&(t.matched.find(c=>ta(c,d))||r.push(d))}return[a,n,r]}var Tm=Object.defineProperty,vm=Object.defineProperties,Sm=Object.getOwnPropertyDescriptors,Hi=Object.getOwnPropertySymbols,Mm=Object.prototype.hasOwnProperty,km=Object.prototype.propertyIsEnumerable,Gi=(e,t,a)=>t in e?Tm(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,kn=(e,t)=>{for(var a in t||(t={}))Mm.call(t,a)&&Gi(e,a,t[a]);if(Hi)for(var a of Hi(t))km.call(t,a)&&Gi(e,a,t[a]);return e},An=(e,t)=>vm(e,Sm(t)),Ga={AD:{name:"Andorra",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Epiphany",date:"01-06",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Whit Monday",date:"easter+50",type:"calculated"},{name:"Assumption Day",date:"08-15",type:"fixed"},{name:"National Day",date:"09-08",type:"fixed"},{name:"All Saints' Day",date:"11-01",type:"fixed"},{name:"Immaculate Conception",date:"12-08",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"}]},AE:{name:"United Arab Emirates",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Commemoration Day",date:"11-30",type:"fixed"},{name:"National Day",date:"12-02",type:"fixed"},{name:"National Day",date:"12-03",type:"fixed"}]},AF:{name:"Afghanistan",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Nowruz",date:"03-21",type:"fixed"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Victory Day",date:"05-08",type:"fixed"},{name:"Independence Day",date:"08-19",type:"fixed"},{name:"Islamic New Year",date:"islamic-new-year",type:"calculated"},{name:"Eid al-Fitr",date:"eid-al-fitr",type:"calculated"},{name:"Eid al-Adha",date:"eid-al-adha",type:"calculated"}]},AG:{name:"Antigua and Barbuda",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Caribbean Community Day",date:"07-02",type:"fixed"},{name:"Independence Day",date:"11-01",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"}]},AL:{name:"Albania",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"New Year's Day",date:"01-02",type:"fixed"},{name:"Summer Day",date:"03-14",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Sunday",date:"easter",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Mother Teresa Day",date:"10-19",type:"fixed"},{name:"Independence Day",date:"11-28",type:"fixed"},{name:"Liberation Day",date:"11-29",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"}]},AM:{name:"Armenia",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"New Year's Day",date:"01-02",type:"fixed"},{name:"Christmas Day",date:"01-06",type:"fixed"},{name:"Women's Day",date:"03-08",type:"fixed"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Victory and Peace Day",date:"05-09",type:"fixed"},{name:"Republic Day",date:"05-28",type:"fixed"},{name:"Constitution Day",date:"07-05",type:"fixed"},{name:"Independence Day",date:"09-21",type:"fixed"},{name:"New Year's Eve",date:"12-31",type:"fixed"}]},BA:{name:"Bosnia and Herzegovina",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"New Year's Day",date:"01-02",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Sunday",date:"easter",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Labour Day",date:"05-02",type:"fixed"},{name:"Statehood Day",date:"11-25",type:"fixed"},{name:"Independence Day",date:"03-01",type:"fixed"},{name:"Day of the Army of Republika Srpska",date:"01-09",type:"fixed"},{name:"Day of the Republic",date:"11-21",type:"fixed"}]},BB:{name:"Barbados",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Errol Barrow Day",date:"01-21",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Whit Monday",date:"easter+50",type:"calculated"},{name:"Emancipation Day",date:"08-01",type:"fixed"},{name:"Independence Day",date:"11-30",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"}]},BD:{name:"Bangladesh",holidays:[{name:"Bangabandhu Homecoming Day",date:"01-10",type:"fixed"},{name:"International Mother Language Day",date:"02-21",type:"fixed"},{name:"Independence Day",date:"03-26",type:"fixed"},{name:"Bengali New Year",date:"04-14",type:"fixed"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"National Mourning Day",date:"08-15",type:"fixed"},{name:"Victory Day",date:"12-16",type:"fixed"},{name:"Eid ul-Fitr",date:"eid-ul-fitr",type:"calculated"},{name:"Eid ul-Adha",date:"eid-ul-adha",type:"calculated"}]},BE:{name:"Belgium",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Sunday",date:"easter",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Ascension Day",date:"easter+39",type:"calculated"},{name:"Whit Sunday",date:"easter+49",type:"calculated"},{name:"Whit Monday",date:"easter+50",type:"calculated"},{name:"National Day",date:"07-21",type:"fixed"},{name:"Assumption Day",date:"08-15",type:"fixed"},{name:"All Saints' Day",date:"11-01",type:"fixed"},{name:"Armistice Day",date:"11-11",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"}]},BF:{name:"Burkina Faso",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Anniversary of the 1966 Revolution",date:"01-03",type:"fixed"},{name:"International Women's Day",date:"03-08",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Africa Day",date:"05-25",type:"fixed"},{name:"Independence Day",date:"08-05",type:"fixed"},{name:"All Saints' Day",date:"11-01",type:"fixed"},{name:"Prophet's Birthday",date:"prophet-birthday",type:"calculated"},{name:"Christmas Day",date:"12-25",type:"fixed"}]},BG:{name:"Bulgaria",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Liberation Day",date:"03-03",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Sunday",date:"easter",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"St. George's Day",date:"05-06",type:"fixed"},{name:"St. Cyril and St. Methodius Day",date:"05-24",type:"fixed"},{name:"Unification Day",date:"09-06",type:"fixed"},{name:"Independence Day",date:"09-22",type:"fixed"},{name:"Christmas Eve",date:"12-24",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"}]},CA:{name:"Canada",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Family Day",date:"third-monday-february",type:"calculated"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Victoria Day",date:"last-monday-may",type:"calculated"},{name:"Canada Day",date:"07-01",type:"fixed"},{name:"Civic Holiday",date:"first-monday-august",type:"calculated"},{name:"Labour Day",date:"first-monday-september",type:"calculated"},{name:"Thanksgiving",date:"second-monday-october",type:"calculated"},{name:"Remembrance Day",date:"11-11",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"}]},CH:{name:"Switzerland",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Sunday",date:"easter",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Ascension Day",date:"easter+39",type:"calculated"},{name:"Whit Sunday",date:"easter+49",type:"calculated"},{name:"Whit Monday",date:"easter+50",type:"calculated"},{name:"National Day",date:"08-01",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"}]},CL:{name:"Chile",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Saturday",date:"easter-1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Navy Day",date:"05-21",type:"fixed"},{name:"Saint Peter and Saint Paul",date:"last-monday-june",type:"calculated"},{name:"Our Lady of Mount Carmel",date:"07-16",type:"fixed"},{name:"Assumption Day",date:"08-15",type:"fixed"},{name:"Independence Day",date:"09-18",type:"fixed"},{name:"Army Day",date:"09-19",type:"fixed"},{name:"Discovery of Two Worlds",date:"second-monday-october",type:"calculated"},{name:"Day of Evangelical Churches",date:"last-monday-october",type:"calculated"},{name:"All Saints' Day",date:"11-01",type:"fixed"},{name:"Immaculate Conception",date:"12-08",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"}]},DE:{name:"Germany",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Sunday",date:"easter",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Ascension Day",date:"easter+39",type:"calculated"},{name:"Whit Sunday",date:"easter+49",type:"calculated"},{name:"Whit Monday",date:"easter+50",type:"calculated"},{name:"German Unity Day",date:"10-03",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"}]},DK:{name:"Denmark",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Sunday",date:"easter",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Ascension Day",date:"easter+39",type:"calculated"},{name:"Whit Sunday",date:"easter+49",type:"calculated"},{name:"Whit Monday",date:"easter+50",type:"calculated"},{name:"Constitution Day",date:"06-05",type:"fixed"},{name:"Christmas Eve",date:"12-24",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"},{name:"New Year's Eve",date:"12-31",type:"fixed"}]},DM:{name:"Dominica",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Whit Monday",date:"easter+50",type:"calculated"},{name:"Emancipation Day",date:"08-01",type:"fixed"},{name:"Independence Day",date:"11-03",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"}]},EE:{name:"Estonia",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Independence Day",date:"02-24",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Sunday",date:"easter",type:"calculated"},{name:"Spring Day",date:"05-01",type:"fixed"},{name:"Victory Day",date:"06-23",type:"fixed"},{name:"Midsummer Day",date:"06-24",type:"fixed"},{name:"Day of Restoration of Independence",date:"08-20",type:"fixed"},{name:"Christmas Eve",date:"12-24",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"}]},EG:{name:"Egypt",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Coptic Christmas Day",date:"01-07",type:"fixed"},{name:"Revolution Day",date:"01-25",type:"fixed"},{name:"Spring Festival",date:"spring-festival",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Revolution Day",date:"07-23",type:"fixed"},{name:"Armed Forces Day",date:"10-06",type:"fixed"},{name:"Sinai Liberation Day",date:"10-25",type:"fixed"}]},ES:{name:"Spain",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Epiphany",date:"01-06",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Assumption Day",date:"08-15",type:"fixed"},{name:"Hispanic Day",date:"10-12",type:"fixed"},{name:"All Saints' Day",date:"11-01",type:"fixed"},{name:"Constitution Day",date:"12-06",type:"fixed"},{name:"Immaculate Conception",date:"12-08",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"}]},FI:{name:"Finland",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Epiphany",date:"01-06",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Sunday",date:"easter",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"May Day",date:"05-01",type:"fixed"},{name:"Ascension Day",date:"easter+39",type:"calculated"},{name:"Whit Sunday",date:"easter+49",type:"calculated"},{name:"Midsummer Eve",date:"friday-after-06-19",type:"calculated"},{name:"Independence Day",date:"12-06",type:"fixed"},{name:"Christmas Eve",date:"12-24",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"}]},FJ:{name:"Fiji",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Constitution Day",date:"07-10",type:"fixed"},{name:"Fiji Day",date:"10-10",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"}]},FR:{name:"France",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Victory in Europe Day",date:"05-08",type:"fixed"},{name:"Ascension Day",date:"easter+39",type:"calculated"},{name:"Whit Monday",date:"easter+50",type:"calculated"},{name:"Bastille Day",date:"07-14",type:"fixed"},{name:"Assumption Day",date:"08-15",type:"fixed"},{name:"All Saints' Day",date:"11-01",type:"fixed"},{name:"Armistice Day",date:"11-11",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"}]},GB:{name:"United Kingdom",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Early May Bank Holiday",date:"first-monday-may",type:"calculated"},{name:"Spring Bank Holiday",date:"last-monday-may",type:"calculated"},{name:"Summer Bank Holiday",date:"last-monday-august",type:"calculated"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"}]},GE:{name:"Georgia",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"New Year's Day",date:"01-02",type:"fixed"},{name:"Orthodox Christmas Day",date:"01-07",type:"fixed"},{name:"Mother's Day",date:"03-03",type:"fixed"},{name:"International Women's Day",date:"03-08",type:"fixed"},{name:"Good Friday",date:"orthodox-good-friday",type:"calculated"},{name:"Great Saturday",date:"orthodox-great-saturday",type:"calculated"},{name:"Orthodox Easter",date:"orthodox-easter",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Victory Day",date:"05-09",type:"fixed"},{name:"St. Andrew's Day",date:"05-12",type:"fixed"},{name:"Independence Day",date:"05-26",type:"fixed"},{name:"St. Mary's Day",date:"08-28",type:"fixed"},{name:"Day of Svetitskhoveli",date:"10-14",type:"fixed"}]},GH:{name:"Ghana",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Constitution Day",date:"01-07",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Africa Day",date:"05-25",type:"fixed"},{name:"Republic Day",date:"07-01",type:"fixed"},{name:"Independence Day",date:"03-06",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"}]},HR:{name:"Croatia",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"New Year's Day",date:"01-02",type:"fixed"},{name:"Epiphany",date:"01-06",type:"fixed"},{name:"Easter Sunday",date:"easter",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Statehood Day",date:"05-30",type:"fixed"},{name:"Corpus Christi",date:"easter+60",type:"calculated"},{name:"Anti-Fascist Struggle Day",date:"06-22",type:"fixed"},{name:"Victory and Homeland Thanksgiving Day",date:"08-05",type:"fixed"},{name:"Assumption Day",date:"08-15",type:"fixed"},{name:"Independence Day",date:"10-08",type:"fixed"},{name:"All Saints' Day",date:"11-01",type:"fixed"},{name:"Remembrance Day",date:"11-18",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"St. Stephen's Day",date:"12-26",type:"fixed"}]},HU:{name:"Hungary",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"National Day",date:"03-15",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Sunday",date:"easter",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Whit Sunday",date:"easter+49",type:"calculated"},{name:"Whit Monday",date:"easter+50",type:"calculated"},{name:"State Foundation Day",date:"08-20",type:"fixed"},{name:"National Day",date:"10-23",type:"fixed"},{name:"All Saints' Day",date:"11-01",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Second Day of Christmas",date:"12-26",type:"fixed"}]},ID:{name:"Indonesia",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Chinese New Year",date:"chinese-new-year",type:"calculated"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Ascension Day of Jesus Christ",date:"easter+39",type:"calculated"},{name:"Vesak Day",date:"vesak-day",type:"calculated"},{name:"Pancasila Day",date:"06-01",type:"fixed"},{name:"Independence Day",date:"08-17",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"}]},IE:{name:"Ireland",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"St. Patrick's Day",date:"03-17",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"May Day",date:"05-01",type:"fixed"},{name:"June Bank Holiday",date:"first-monday-june",type:"calculated"},{name:"August Bank Holiday",date:"first-monday-august",type:"calculated"},{name:"October Bank Holiday",date:"last-monday-october",type:"calculated"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"St. Stephen's Day",date:"12-26",type:"fixed"}]},IL:{name:"Israel",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Yom HaShoah",date:"april-27-or-28",type:"calculated"},{name:"Yom HaZikaron",date:"may-4-or-5",type:"calculated"},{name:"Independence Day",date:"may-5-or-6",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Yom Yerushalayim",date:"28th-of-iyar",type:"calculated"},{name:"Shavuot",date:"shavuot",type:"calculated"},{name:"Rosh Hashanah",date:"rosh-hashanah",type:"calculated"},{name:"Yom Kippur",date:"yom-kippur",type:"calculated"},{name:"Sukkot",date:"sukkot",type:"calculated"},{name:"Simchat Torah",date:"shemini-atzeret",type:"calculated"}]},IN:{name:"India",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Republic Day",date:"01-26",type:"fixed"},{name:"Independence Day",date:"08-15",type:"fixed"},{name:"Gandhi Jayanti",date:"10-02",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"}]},IQ:{name:"Iraq",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Victory Day",date:"05-08",type:"fixed"},{name:"Revolution Day",date:"07-14",type:"fixed"},{name:"Republic Day",date:"07-14",type:"fixed"},{name:"Kerbala Day",date:"kerbala",type:"calculated"},{name:"Eid al-Fitr",date:"eid-al-fitr",type:"calculated"},{name:"Eid al-Adha",date:"eid-al-adha",type:"calculated"}]},IR:{name:"Iran",holidays:[{name:"Nowruz",date:"03-21",type:"fixed"},{name:"Nowruz Holiday",date:"03-22",type:"fixed"},{name:"Oil Nationalization Day",date:"03-29",type:"fixed"},{name:"Nowruz Holiday",date:"04-01",type:"fixed"},{name:"Martyrdom of Imam Reza",date:"safar-20",type:"calculated"},{name:"Death of Khomeini",date:"khordad-14",type:"calculated"},{name:"Revolution Day",date:"bahman-11",type:"calculated"},{name:"Martyrdom of Fatima",date:"esfand-20",type:"calculated"}]},IS:{name:"Iceland",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Sunday",date:"easter",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"First Day of Summer",date:"first-thursday-after-04-18",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Ascension Day",date:"easter+39",type:"calculated"},{name:"Whit Sunday",date:"easter+49",type:"calculated"},{name:"Commerce Day",date:"first-monday-august",type:"calculated"},{name:"Christmas Eve",date:"12-24",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"},{name:"New Year's Eve",date:"12-31",type:"fixed"}]},IT:{name:"Italy",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Epiphany",date:"01-06",type:"fixed"},{name:"Easter Sunday",date:"easter",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Liberation Day",date:"04-25",type:"fixed"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Republic Day",date:"06-02",type:"fixed"},{name:"Assumption Day",date:"08-15",type:"fixed"},{name:"All Saints' Day",date:"11-01",type:"fixed"},{name:"Immaculate Conception",date:"12-08",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"St. Stephen's Day",date:"12-26",type:"fixed"}]},JM:{name:"Jamaica",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Emancipation Day",date:"08-01",type:"fixed"},{name:"Independence Day",date:"08-06",type:"fixed"},{name:"National Heroes Day",date:"third-monday-october",type:"calculated"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"}]},JO:{name:"Jordan",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Sunday",date:"easter",type:"calculated"},{name:"Eid al-Fitr",date:"eid-al-fitr",type:"calculated"},{name:"Independence Day",date:"05-25",type:"fixed"},{name:"Eid al-Adha",date:"eid-al-adha",type:"calculated"},{name:"Islamic New Year",date:"islamic-new-year",type:"calculated"},{name:"Prophet's Birthday",date:"prophet-birthday",type:"calculated"},{name:"Christmas Day",date:"12-25",type:"fixed"}]},JP:{name:"Japan",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Coming of Age Day",date:"second-monday-january",type:"calculated"},{name:"National Foundation Day",date:"02-11",type:"fixed"},{name:"Vernal Equinox Day",date:"march-equinox",type:"calculated"},{name:"Showa Day",date:"04-29",type:"fixed"},{name:"Constitution Memorial Day",date:"05-03",type:"fixed"},{name:"Greenery Day",date:"05-04",type:"fixed"},{name:"Children's Day",date:"05-05",type:"fixed"},{name:"Marine Day",date:"third-monday-july",type:"calculated"},{name:"Mountain Day",date:"08-11",type:"fixed"},{name:"Respect for the Aged Day",date:"third-monday-september",type:"calculated"},{name:"Autumnal Equinox Day",date:"september-equinox",type:"calculated"},{name:"Health and Sports Day",date:"second-monday-october",type:"calculated"},{name:"Culture Day",date:"11-03",type:"fixed"},{name:"Labour Thanksgiving Day",date:"11-23",type:"fixed"},{name:"Emperor's Birthday",date:"12-23",type:"fixed"}]},KE:{name:"Kenya",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Madaraka Day",date:"06-01",type:"fixed"},{name:"Moi Day",date:"10-10",type:"fixed"},{name:"Jamhuri Day",date:"12-12",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"}]},KG:{name:"Kyrgyzstan",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"New Year's Day",date:"01-02",type:"fixed"},{name:"Orthodox Christmas Day",date:"01-07",type:"fixed"},{name:"Defender of the Fatherland Day",date:"02-23",type:"fixed"},{name:"International Women's Day",date:"03-08",type:"fixed"},{name:"Nooruz",date:"03-21",type:"fixed"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Victory Day",date:"05-09",type:"fixed"},{name:"Constitution Day",date:"05-05",type:"fixed"},{name:"Independence Day",date:"08-31",type:"fixed"},{name:"Days of History and Commemoration of Ancestors",date:"11-07",type:"fixed"},{name:"New Year's Eve",date:"12-31",type:"fixed"}]},KH:{name:"Cambodia",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Independence Day",date:"11-09",type:"fixed"},{name:"King's Birthday",date:"11-09",type:"fixed"},{name:"Meak Bochea Day",date:"meak-bochea",type:"calculated"},{name:"Khmer New Year",date:"april-13-15",type:"calculated"},{name:"Visak Bochea Day",date:"visak-bochea",type:"calculated"},{name:"Royal Ploughing Ceremony",date:"may-10-or-14",type:"calculated"},{name:"Water Festival (Bon Om Touk)",date:"november-full-moon",type:"calculated"}]},KR:{name:"South Korea",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Seollal",date:"korean-new-year",type:"calculated"},{name:"Independence Movement Day",date:"03-01",type:"fixed"},{name:"Buddha's Birthday",date:"buddhas-birthday",type:"calculated"},{name:"Children's Day",date:"05-05",type:"fixed"},{name:"Memorial Day",date:"06-06",type:"fixed"},{name:"Constitution Day",date:"07-17",type:"fixed"},{name:"Liberation Day",date:"08-15",type:"fixed"},{name:"Chuseok",date:"korean-thanksgiving",type:"calculated"},{name:"National Foundation Day",date:"10-03",type:"fixed"},{name:"Hangeul Day",date:"10-09",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"}]},LB:{name:"Lebanon",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Martyrs' Day",date:"05-25",type:"fixed"},{name:"Independence Day",date:"11-22",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"}]},LK:{name:"Sri Lanka",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"National Day",date:"02-04",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Sunday",date:"easter",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Vesak Full Moon Day",date:"vesak-full-moon",type:"calculated"},{name:"Independence Day",date:"02-04",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"}]},LT:{name:"Lithuania",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"State Day of Lithuania",date:"03-11",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Sunday",date:"easter",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"St. John's Day",date:"06-24",type:"fixed"},{name:"Statehood Day",date:"07-06",type:"fixed"},{name:"Assumption Day",date:"08-15",type:"fixed"},{name:"All Saints' Day",date:"11-01",type:"fixed"},{name:"Christmas Eve",date:"12-24",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Second Day of Christmas",date:"12-26",type:"fixed"}]},LU:{name:"Luxembourg",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Ascension Day",date:"easter+39",type:"calculated"},{name:"Whit Monday",date:"easter+50",type:"calculated"},{name:"National Day",date:"06-23",type:"fixed"},{name:"Assumption Day",date:"08-15",type:"fixed"},{name:"All Saints' Day",date:"11-01",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"}]},LV:{name:"Latvia",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Sunday",date:"easter",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Independence Day",date:"05-04",type:"fixed"},{name:"Midsummer Day",date:"06-23",type:"fixed"},{name:"Midsummer Day",date:"06-24",type:"fixed"},{name:"Proclamation Day",date:"11-18",type:"fixed"},{name:"Christmas Eve",date:"12-24",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"},{name:"New Year's Eve",date:"12-31",type:"fixed"}]},MA:{name:"Morocco",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Independence Manifesto Day",date:"01-11",type:"fixed"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Throne Day",date:"07-30",type:"fixed"},{name:"Oued Ed-Dahab Day",date:"08-14",type:"fixed"},{name:"Revolution of the King and the People Day",date:"08-20",type:"fixed"},{name:"Youth Day",date:"08-21",type:"fixed"},{name:"Green March Day",date:"11-06",type:"fixed"},{name:"Independence Day",date:"11-18",type:"fixed"}]},MC:{name:"Monaco",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Sunday",date:"easter",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Ascension Day",date:"easter+39",type:"calculated"},{name:"Whit Monday",date:"easter+50",type:"calculated"},{name:"National Day",date:"11-19",type:"fixed"},{name:"Assumption Day",date:"08-15",type:"fixed"},{name:"All Saints' Day",date:"11-01",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Saint Stephen's Day",date:"12-26",type:"fixed"}]},ME:{name:"Montenegro",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"New Year's Day",date:"01-02",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Sunday",date:"easter",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Labour Day",date:"05-02",type:"fixed"},{name:"Good Friday",date:"orthodox-good-friday",type:"calculated"},{name:"Orthodox Easter",date:"orthodox-easter",type:"calculated"},{name:"Statehood Day",date:"07-13",type:"fixed"},{name:"Independence Day",date:"05-21",type:"fixed"},{name:"Victory Day",date:"05-09",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"}]},MG:{name:"Madagascar",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Women's Day",date:"02-26",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Ascension Day",date:"easter+39",type:"calculated"},{name:"Independence Day",date:"06-26",type:"fixed"},{name:"Assumption Day",date:"08-15",type:"fixed"},{name:"All Saints' Day",date:"11-01",type:"fixed"},{name:"Republic Day",date:"12-11",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"}]},MK:{name:"North Macedonia",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"New Year's Day",date:"01-02",type:"fixed"},{name:"Good Friday",date:"orthodox-good-friday",type:"calculated"},{name:"Orthodox Easter",date:"orthodox-easter",type:"calculated"},{name:"Orthodox Easter Monday",date:"orthodox-easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Labour Day",date:"05-02",type:"fixed"},{name:"Saint Clement of Ohrid Day",date:"07-02",type:"fixed"},{name:"Independence Day",date:"09-08",type:"fixed"},{name:"Revolution Day",date:"10-11",type:"fixed"},{name:"Day of Macedonian Uprising",date:"10-23",type:"fixed"},{name:"Christmas Day",date:"01-07",type:"fixed"}]},ML:{name:"Mali",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"International Women's Day",date:"03-08",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Africa Day",date:"05-25",type:"fixed"},{name:"Independence Day",date:"09-22",type:"fixed"},{name:"Prophet's Birthday",date:"prophet-birthday",type:"calculated"},{name:"Christmas Day",date:"12-25",type:"fixed"}]},MM:{name:"Myanmar",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Independence Day",date:"01-04",type:"fixed"},{name:"Union Day",date:"02-12",type:"fixed"},{name:"Peasant's Day",date:"03-02",type:"fixed"},{name:"Full Moon Day of Tabodwe",date:"tabodwe-full-moon",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Full Moon Day of Kasone",date:"kasone-full-moon",type:"calculated"},{name:"Martyrs' Day",date:"07-19",type:"fixed"},{name:"Full Moon Day of Waso",date:"waso-full-moon",type:"calculated"},{name:"World War II Veterans Day",date:"12-27",type:"fixed"}]},MN:{name:"Mongolia",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"New Year's Day",date:"01-02",type:"fixed"},{name:"Women's Day",date:"03-08",type:"fixed"},{name:"Naadam Holiday",date:"07-11",type:"fixed"},{name:"Naadam Holiday",date:"07-12",type:"fixed"},{name:"Naadam Holiday",date:"07-13",type:"fixed"},{name:"Republic Day",date:"11-26",type:"fixed"},{name:"New Year's Eve",date:"12-31",type:"fixed"}]},MT:{name:"Malta",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Feast of St. Paul's Shipwreck",date:"02-10",type:"fixed"},{name:"Feast of St. Joseph",date:"03-19",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Feast of St. Peter and St. Paul",date:"06-29",type:"fixed"},{name:"Assumption Day",date:"08-15",type:"fixed"},{name:"Feast of Our Lady of Victories",date:"09-08",type:"fixed"},{name:"Independence Day",date:"09-21",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"}]},MU:{name:"Mauritius",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Chinese Spring Festival",date:"chinese-new-year",type:"calculated"},{name:"Shiv Churni",date:"march-04",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Arrival of Indentured Labourers",date:"05-02",type:"fixed"},{name:"Abolition of Slavery",date:"02-01",type:"fixed"},{name:"Independence Day",date:"03-12",type:"fixed"},{name:"Diwali",date:"diwali",type:"calculated"},{name:"Christmas Day",date:"12-25",type:"fixed"}]},MX:{name:"Mexico",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Constitution Day",date:"first-monday-february",type:"calculated"},{name:"Benito Juárez's Birthday",date:"third-monday-march",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Independence Day",date:"09-16",type:"fixed"},{name:"Revolution Day",date:"third-monday-november",type:"calculated"},{name:"Christmas Day",date:"12-25",type:"fixed"}]},MY:{name:"Malaysia",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Chinese New Year",date:"chinese-new-year",type:"calculated"},{name:"Chinese New Year",date:"chinese-new-year+1",type:"calculated"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Wesak Day",date:"vesak-day",type:"calculated"},{name:"National Day",date:"08-31",type:"fixed"},{name:"Malaysia Day",date:"09-16",type:"fixed"},{name:"Deepavali",date:"deepavali",type:"calculated"},{name:"Christmas Day",date:"12-25",type:"fixed"}]},NG:{name:"Nigeria",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Worker's Day",date:"05-01",type:"fixed"},{name:"Democracy Day",date:"05-29",type:"fixed"},{name:"Independence Day",date:"10-01",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"}]},NI:{name:"Nicaragua",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Army Day",date:"05-27",type:"fixed"},{name:"Independence Day",date:"09-15",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"}]},NL:{name:"Netherlands",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Sunday",date:"easter",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"King's Day",date:"04-27",type:"fixed"},{name:"Liberation Day",date:"05-05",type:"fixed"},{name:"Ascension Day",date:"easter+39",type:"calculated"},{name:"Whit Sunday",date:"easter+49",type:"calculated"},{name:"Whit Monday",date:"easter+50",type:"calculated"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"}]},NO:{name:"Norway",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Sunday",date:"easter",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Constitution Day",date:"05-17",type:"fixed"},{name:"Ascension Day",date:"easter+39",type:"calculated"},{name:"Whit Sunday",date:"easter+49",type:"calculated"},{name:"Whit Monday",date:"easter+50",type:"calculated"},{name:"Christmas Eve",date:"12-24",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"},{name:"New Year's Eve",date:"12-31",type:"fixed"}]},NP:{name:"Nepal",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"National Democracy Day",date:"02-19",type:"fixed"},{name:"Martyrs' Day",date:"04-08",type:"fixed"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Constitution Day",date:"09-20",type:"fixed"},{name:"Dashain",date:"dashain",type:"calculated"},{name:"Tihar",date:"tihar",type:"calculated"},{name:"Laxmi Puja",date:"laxmi-puja",type:"calculated"},{name:"Gai Jatra",date:"gai-jatra",type:"calculated"}]},NZ:{name:"New Zealand",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Day after New Year's Day",date:"01-02",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"ANZAC Day",date:"04-25",type:"fixed"},{name:"Queen's Birthday",date:"first-monday-june",type:"calculated"},{name:"Labour Day",date:"fourth-monday-october",type:"calculated"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"}]},OM:{name:"Oman",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Birthday of Sultan Qaboos",date:"11-18",type:"fixed"},{name:"National Day",date:"11-18",type:"fixed"}]},PA:{name:"Panama",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Martyrs' Day",date:"01-09",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Independence Day",date:"11-03",type:"fixed"},{name:"Separation Day",date:"11-04",type:"fixed"},{name:"President's Day",date:"11-05",type:"fixed"},{name:"Independence from Spain",date:"11-28",type:"fixed"},{name:"Mothers' Day",date:"12-08",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"}]},PE:{name:"Peru",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Holy Thursday",date:"easter-3",type:"calculated"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Battle of Arica",date:"06-07",type:"fixed"},{name:"Independence Day",date:"07-28",type:"fixed"},{name:"Independence Day",date:"07-29",type:"fixed"},{name:"Santa Rosa de Lima",date:"08-30",type:"fixed"},{name:"Battle of Angamos",date:"10-08",type:"fixed"},{name:"All Saints' Day",date:"11-01",type:"fixed"},{name:"Immaculate Conception",date:"12-08",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"}]},PG:{name:"Papua New Guinea",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Queen's Birthday",date:"second-saturday-june",type:"calculated"},{name:"Remembrance Day",date:"07-23",type:"fixed"},{name:"Independence Day",date:"09-16",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"}]},PH:{name:"Philippines",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Maundy Thursday",date:"easter-3",type:"calculated"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Sunday",date:"easter",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Independence Day",date:"06-12",type:"fixed"},{name:"Bonifacio Day",date:"11-30",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Rizal Day",date:"12-30",type:"fixed"}]},PK:{name:"Pakistan",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Kashmir Day",date:"02-05",type:"fixed"},{name:"Pakistan Day",date:"03-23",type:"fixed"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Independence Day",date:"08-14",type:"fixed"},{name:"Iqbal Day",date:"11-09",type:"fixed"},{name:"Quaid-e-Azam Day",date:"12-25",type:"fixed"},{name:"Eid ul-Fitr",date:"eid-ul-fitr",type:"calculated"},{name:"Eid ul-Adha",date:"eid-ul-adha",type:"calculated"}]},PL:{name:"Poland",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Epiphany",date:"01-06",type:"fixed"},{name:"Easter Sunday",date:"easter",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Constitution Day",date:"05-03",type:"fixed"},{name:"Corpus Christi",date:"easter+60",type:"calculated"},{name:"Assumption Day",date:"08-15",type:"fixed"},{name:"All Saints' Day",date:"11-01",type:"fixed"},{name:"Independence Day",date:"11-11",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"}]},PT:{name:"Portugal",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Sunday",date:"easter",type:"calculated"},{name:"Freedom Day",date:"04-25",type:"fixed"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Portugal Day",date:"06-10",type:"fixed"},{name:"Assumption Day",date:"08-15",type:"fixed"},{name:"Republic Day",date:"10-05",type:"fixed"},{name:"All Saints' Day",date:"11-01",type:"fixed"},{name:"Restoration of Independence",date:"12-01",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"}]},PY:{name:"Paraguay",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Independence Day",date:"05-15",type:"fixed"},{name:"Chaco Armistice",date:"06-12",type:"fixed"},{name:"Founding of Asunción",date:"08-15",type:"fixed"},{name:"Boquerón Battle",date:"09-29",type:"fixed"},{name:"Virgin of Caacupé",date:"12-08",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"}]},QA:{name:"Qatar",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Eid al-Fitr",date:"eid-al-fitr",type:"calculated"},{name:"Eid al-Adha",date:"eid-al-adha",type:"calculated"},{name:"Islamic New Year",date:"islamic-new-year",type:"calculated"},{name:"Prophet's Birthday",date:"prophet-birthday",type:"calculated"},{name:"National Day",date:"12-18",type:"fixed"}]},RO:{name:"Romania",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"New Year's Day",date:"01-02",type:"fixed"},{name:"Unification Day",date:"01-24",type:"fixed"},{name:"Good Friday",date:"orthodox-good-friday",type:"calculated"},{name:"Easter Sunday",date:"orthodox-easter",type:"calculated"},{name:"Easter Monday",date:"orthodox-easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Pentecost",date:"orthodox-easter+49",type:"calculated"},{name:"Whit Monday",date:"orthodox-easter+50",type:"calculated"},{name:"Children's Day",date:"06-01",type:"fixed"},{name:"St. Andrew's Day",date:"11-30",type:"fixed"},{name:"National Day",date:"12-01",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"}]},RS:{name:"Serbia",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"New Year's Day",date:"01-02",type:"fixed"},{name:"Good Friday",date:"orthodox-good-friday",type:"calculated"},{name:"Orthodox Easter",date:"orthodox-easter",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Labour Day",date:"05-02",type:"fixed"},{name:"Armistice Day",date:"11-11",type:"fixed"},{name:"Statehood Day",date:"02-15",type:"fixed"},{name:"Independence Day",date:"06-28",type:"fixed"}]},RU:{name:"Russia",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"New Year's Day",date:"01-02",type:"fixed"},{name:"Orthodox Christmas Day",date:"01-07",type:"fixed"},{name:"Defender of the Fatherland Day",date:"02-23",type:"fixed"},{name:"International Women's Day",date:"03-08",type:"fixed"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Victory Day",date:"05-09",type:"fixed"},{name:"Russia Day",date:"06-12",type:"fixed"},{name:"Unity Day",date:"11-04",type:"fixed"}]},RW:{name:"Rwanda",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Independence Day",date:"07-01",type:"fixed"},{name:"Liberation Day",date:"07-04",type:"fixed"},{name:"Genocide Memorial Day",date:"04-07",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"}]},SA:{name:"Saudi Arabia",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Eid al-Fitr",date:"eid-al-fitr",type:"calculated"},{name:"Eid al-Adha",date:"eid-al-adha",type:"calculated"},{name:"Islamic New Year",date:"islamic-new-year",type:"calculated"},{name:"Prophet's Birthday",date:"prophet-birthday",type:"calculated"},{name:"National Day",date:"09-23",type:"fixed"}]},SE:{name:"Sweden",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Epiphany",date:"01-06",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Sunday",date:"easter",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"May Day",date:"05-01",type:"fixed"},{name:"Ascension Day",date:"easter+39",type:"calculated"},{name:"Whit Sunday",date:"easter+49",type:"calculated"},{name:"National Day",date:"06-06",type:"fixed"},{name:"Midsummer Eve",date:"friday-after-06-19",type:"calculated"},{name:"Midsummer Day",date:"saturday-after-06-19",type:"calculated"},{name:"All Saints' Day",date:"saturday-before-10-31",type:"calculated"},{name:"Christmas Eve",date:"12-24",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"},{name:"New Year's Eve",date:"12-31",type:"fixed"}]},SG:{name:"Singapore",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Chinese New Year",date:"chinese-new-year",type:"calculated"},{name:"Chinese New Year",date:"chinese-new-year+1",type:"calculated"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Vesak Day",date:"vesak-day",type:"calculated"},{name:"National Day",date:"08-09",type:"fixed"},{name:"Deepavali",date:"deepavali",type:"calculated"},{name:"Christmas Day",date:"12-25",type:"fixed"}]},SI:{name:"Slovenia",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"New Year's Day",date:"01-02",type:"fixed"},{name:"Preseren Day",date:"02-08",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Sunday",date:"easter",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Labour Day",date:"05-02",type:"fixed"},{name:"Statehood Day",date:"06-25",type:"fixed"},{name:"Assumption Day",date:"08-15",type:"fixed"},{name:"Reformation Day",date:"10-31",type:"fixed"},{name:"Remembrance Day",date:"11-01",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Independence and Unity Day",date:"12-26",type:"fixed"}]},SK:{name:"Slovakia",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Epiphany",date:"01-06",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Liberation Day",date:"05-08",type:"fixed"},{name:"St. Cyril and Methodius Day",date:"07-05",type:"fixed"},{name:"Slovak National Uprising",date:"08-29",type:"fixed"},{name:"Constitution Day",date:"09-01",type:"fixed"},{name:"Our Lady of the Seven Sorrows",date:"09-15",type:"fixed"},{name:"All Saints' Day",date:"11-01",type:"fixed"},{name:"Freedom and Democracy Day",date:"11-17",type:"fixed"},{name:"Christmas Eve",date:"12-24",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"St. Stephen's Day",date:"12-26",type:"fixed"}]},SN:{name:"Senegal",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Africa Day",date:"05-25",type:"fixed"},{name:"Independence Day",date:"04-04",type:"fixed"},{name:"Tabaski",date:"tabaski",type:"calculated"},{name:"Prophet's Birthday",date:"prophet-birthday",type:"calculated"},{name:"Christmas Day",date:"12-25",type:"fixed"}]},TH:{name:"Thailand",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Makha Bucha Day",date:"makhapuja",type:"calculated"},{name:"Chakri Day",date:"04-06",type:"fixed"},{name:"Songkran",date:"04-13",type:"fixed"},{name:"Songkran",date:"04-14",type:"fixed"},{name:"Songkran",date:"04-15",type:"fixed"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Coronation Day",date:"05-04",type:"fixed"},{name:"Wisakha Bucha Day",date:"visakhapuja",type:"calculated"},{name:"Asalha Bucha Day",date:"asalhapuja",type:"calculated"},{name:"Mother's Day",date:"08-12",type:"fixed"},{name:"King's Birthday",date:"12-05",type:"fixed"},{name:"Constitution Day",date:"12-10",type:"fixed"},{name:"Father's Day",date:"12-28",type:"fixed"}]},TN:{name:"Tunisia",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Independence Day",date:"03-20",type:"fixed"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Victory Day",date:"06-01",type:"fixed"},{name:"Martyrs' Day",date:"04-09",type:"fixed"},{name:"Eid al-Fitr",date:"eid-al-fitr",type:"calculated"},{name:"Eid al-Adha",date:"eid-al-adha",type:"calculated"},{name:"Islamic New Year",date:"islamic-new-year",type:"calculated"},{name:"Prophet's Birthday",date:"prophet-birthday",type:"calculated"},{name:"Women's Day",date:"08-13",type:"fixed"},{name:"Republic Day",date:"10-15",type:"fixed"}]},TR:{name:"Turkey",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"National Sovereignty Day",date:"04-23",type:"fixed"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Atatürk Commemoration & Youth Day",date:"05-19",type:"fixed"},{name:"Victory Day",date:"08-30",type:"fixed"},{name:"Republic Day",date:"10-29",type:"fixed"},{name:"Eid al-Fitr",date:"eid-al-fitr",type:"calculated"},{name:"Eid al-Fitr",date:"eid-al-fitr+1",type:"calculated"},{name:"Eid al-Adha",date:"eid-al-adha",type:"calculated"},{name:"Eid al-Adha",date:"eid-al-adha+1",type:"calculated"}]},TZ:{name:"Tanzania",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Africa Day",date:"05-25",type:"fixed"},{name:"Saba Saba",date:"07-07",type:"fixed"},{name:"Farmers' Day",date:"08-08",type:"fixed"},{name:"Independence Day",date:"12-09",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"}]},UA:{name:"Ukraine",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Orthodox Christmas Day",date:"01-07",type:"fixed"},{name:"Good Friday",date:"orthodox-good-friday",type:"calculated"},{name:"Orthodox Easter",date:"orthodox-easter",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Labour Day",date:"05-02",type:"fixed"},{name:"Victory Day",date:"05-09",type:"fixed"},{name:"Constitution Day",date:"06-28",type:"fixed"},{name:"Independence Day",date:"08-24",type:"fixed"},{name:"Defender of Ukraine Day",date:"10-14",type:"fixed"},{name:"Catholic Christmas Day",date:"12-25",type:"fixed"}]},UG:{name:"Uganda",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Martyrs' Day",date:"06-03",type:"fixed"},{name:"Independence Day",date:"10-09",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"}]},US:{name:"United States",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Martin Luther King Jr. Day",date:"third-monday-january",type:"calculated"},{name:"Presidents' Day",date:"third-monday-february",type:"calculated"},{name:"Memorial Day",date:"last-monday-may",type:"calculated"},{name:"Independence Day",date:"07-04",type:"fixed"},{name:"Labour Day",date:"first-monday-september",type:"calculated"},{name:"Columbus Day",date:"second-monday-october",type:"calculated"},{name:"Veterans Day",date:"11-11",type:"fixed"},{name:"Thanksgiving",date:"fourth-thursday-november",type:"calculated"},{name:"Christmas Day",date:"12-25",type:"fixed"}]},UY:{name:"Uruguay",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Birthday of Artigas",date:"04-19",type:"fixed"},{name:"Independence Day",date:"08-25",type:"fixed"},{name:"Day of the Race",date:"10-12",type:"fixed"},{name:"All Saints' Day",date:"11-01",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"}]},UZ:{name:"Uzbekistan",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Women's Day",date:"03-08",type:"fixed"},{name:"Spring Festival",date:"03-21",type:"fixed"},{name:"Constitution Day",date:"05-09",type:"fixed"},{name:"Independence Day",date:"09-01",type:"fixed"},{name:"Teacher's Day",date:"10-01",type:"fixed"},{name:"University Day",date:"10-14",type:"fixed"}]},VE:{name:"Venezuela",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Independence Day",date:"07-05",type:"fixed"},{name:"Battle of Carabobo",date:"06-24",type:"fixed"},{name:"Bolívar's Birthday",date:"07-24",type:"fixed"},{name:"Columbus Day",date:"10-12",type:"fixed"},{name:"All Saints' Day",date:"11-01",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"}]},VN:{name:"Vietnam",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Tet (Lunar New Year)",date:"tet",type:"calculated"},{name:"Hung Kings Commemoration Day",date:"march-10th-lunar",type:"calculated"},{name:"Reunification Day",date:"04-30",type:"fixed"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"National Day",date:"09-02",type:"fixed"}]},ZA:{name:"South Africa",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Human Rights Day",date:"03-21",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Family Day",date:"easter+1",type:"calculated"},{name:"Freedom Day",date:"04-27",type:"fixed"},{name:"Workers' Day",date:"05-01",type:"fixed"},{name:"Youth Day",date:"06-16",type:"fixed"},{name:"National Women's Day",date:"08-09",type:"fixed"},{name:"Heritage Day",date:"09-24",type:"fixed"},{name:"Day of Reconciliation",date:"12-16",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Day of Goodwill",date:"12-26",type:"fixed"}]},ZM:{name:"Zambia",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Africa Day",date:"05-25",type:"fixed"},{name:"Heroes' Day",date:"first-monday-july",type:"calculated"},{name:"Unity Day",date:"07-02",type:"fixed"},{name:"Independence Day",date:"10-24",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"}]},ZW:{name:"Zimbabwe",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Labour Day",date:"05-01",type:"fixed"},{name:"Africa Day",date:"05-25",type:"fixed"},{name:"Heroes' Day",date:"second-monday-august",type:"calculated"},{name:"Defence Forces Day",date:"third-monday-august",type:"calculated"},{name:"Independence Day",date:"10-01",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"}]},UK:{name:"United Kingdom",holidays:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Good Friday",date:"easter-2",type:"calculated"},{name:"Easter Monday",date:"easter+1",type:"calculated"},{name:"Early May Bank Holiday",date:"first-monday-may",type:"calculated"},{name:"Spring Bank Holiday",date:"last-monday-may",type:"calculated"},{name:"Summer Bank Holiday",date:"last-monday-august",type:"calculated"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"}]}},Am=["aa-ER","af-NA","af-ZA","am-ET","ar-AE","ar-BH","ar-DJ","ar-DZ","ar-EG","ar-ER","ar-IL","ar-IQ","ar-JO","ar-KM","ar-KW","ar-LB","ar-LY","ar-MA","ar-MR","ar-OM","ar-PS","ar-QA","ar-SA","ar-SD","ar-SO","ar-SY","ar-TD","ar-TN","ar-YE","ay-BO","az-AZ","be-BY","bg-BG","bi-VU","bn-BD","bs-BA","bs-ME","byn-ER","ca-AD","ch-GU","ch-MP","cs-CZ","da-DK","de-AT","de-BE","de-CH","de-DE","de-LI","de-LU","de-VA","dv-MV","dz-BT","el-CY","el-GR","en-AG","en-AI","en-AQ","en-AS","en-AU","en-BB","en-BM","en-BS","en-BW","en-BZ","en-CA","en-CC","en-CK","en-CM","en-CW","en-CX","en-DM","en-ER","en-FJ","en-FK","en-FM","en-GB","en-GD","en-GG","en-GH","en-GI","en-GM","en-GS","en-GU","en-GY","en-HM","en-IE","en-IM","en-IN","en-IO","en-JE","en-JM","en-KE","en-KI","en-KN","en-KY","en-LC","en-LR","en-LS","en-MG","en-MH","en-MP","en-MS","en-MT","en-MU","en-MW","en-NA","en-NF","en-NG","en-NR","en-NU","en-NZ","en-PG","en-PH","en-PK","en-PN","en-PR","en-PW","en-RW","en-SB","en-SC","en-SD","en-SG","en-SH","en-SL","en-SS","en-SX","en-SZ","en-TC","en-TK","en-TO","en-TT","en-TV","en-TZ","en-UG","en-UM","en-US","en-VC","en-VG","en-VI","en-VU","en-WS","en-ZA","en-ZM","en-ZW","es-AR","es-BO","es-CL","es-CO","es-CR","es-CU","es-DO","es-EA","es-EC","es-ES","es-GQ","es-GT","es-HN","es-IC","es-MX","es-NI","es-PA","es-PE","es-PH","es-PR","es-PY","es-SV","es-US","es-UY","es-VE","et-EE","eu-ES","fa-AF","fa-IR","ff-SN","fi-FI","fj-FJ","fo-FO","fr-BE","fr-BF","fr-BI","fr-BJ","fr-BL","fr-CA","fr-CD","fr-CF","fr-CG","fr-CH","fr-CI","fr-CM","fr-DJ","fr-DZ","fr-FR","fr-GA","fr-GF","fr-GN","fr-GP","fr-GQ","fr-HT","fr-KM","fr-LU","fr-MA","fr-MC","fr-MF","fr-MG","fr-ML","fr-MQ","fr-MR","fr-MU","fr-NC","fr-NE","fr-PF","fr-PM","fr-RE","fr-RW","fr-SC","fr-SN","fr-SY","fr-TD","fr-TG","fr-TN","fr-VU","fr-WF","fr-YT","fy-NL","ga-IE","gd-GB","gl-ES","gn-PY","gu-IN","gv-IM","ha-GH","ha-NE","ha-NG","he-IL","hi-IN","ho-PG","hr-BA","hr-HR","ht-HT","hu-HU","hy-AM","id-ID","ie-EE","ig-NG","ii-CN","is-IS","it-CH","it-IT","it-SM","it-VA","ja-JP","ka-GE","kg-CD","kk-KZ","kl-GL","km-KH","kn-IN","ko-KP","ko-KR","ku-TR","kw-GB","ky-KG","la-VA","lb-LU","lg-UG","ln-CD","ln-CF","lo-LA","lt-LT","lu-CD","lv-LV","mg-MG","mh-MH","mi-NZ","mk-MK","ml-IN","mn-MN","mr-IN","ms-BN","ms-MY","ms-SG","mt-MT","my-MM","na-NR","nb-NO","nb-SJ","nd-ZW","ne-IN","ne-NP","nl-AW","nl-BE","nl-BQ","nl-CW","nl-NL","nl-SR","nl-SX","nn-NO","no-NO","nr-ZA","nso-ZA","ny-MW","oc-FR","om-ET","om-KE","or-IN","os-GE","pa-IN","pa-PK","pl-PL","ps-AF","pt-AO","pt-BR","pt-CV","pt-GW","pt-MO","pt-MZ","pt-PT","pt-ST","pt-TL","qu-BO","qu-EC","qu-PE","rm-CH","rn-BI","ro-MD","ro-RO","ru-BY","ru-KG","ru-KZ","ru-MD","ru-RU","ru-UA","rw-RW","sa-IN","sc-IT","sd-PK","se-FI","se-NO","se-SE","sg-CF","si-LK","sk-SK","sl-SI","sm-AS","sm-WS","sn-ZW","so-DJ","so-ET","so-KE","so-SO","sq-AL","sq-MK","sr-BA","sr-ME","sr-RS","ss-SZ","ss-ZA","st-LS","st-ZA","sv-AX","sv-FI","sv-SE","sw-CD","sw-KE","sw-TZ","sw-UG","ta-IN","ta-LK","ta-MY","ta-SG","te-IN","tg-TJ","th-TH","ti-ER","ti-ET","tk-TM","tl-PH","tn-BW","tn-ZA","to-TO","tr-CY","tr-TR","ts-ZA","tt-RU","ty-PF","ug-CN","uk-UA","ur-IN","ur-PK","uz-AF","uz-UZ","ve-ZA","vi-VN","wo-SN","xh-ZA","yi-001","yo-BJ","yo-NG","zh-CN","zh-HK","zh-MO","zh-SG","zh-TW","zu-ZA"],Cm=["en-US","en-GB","es-ES","fr-FR","de-DE","it-IT","pt-BR","ja-JP","ko-KR","zh-CN","zh-TW","ru-RU","ar-SA","hi-IN","th-TH","tr-TR","pl-PL","nl-NL","sv-SE","da-DK","no-NO","fi-FI"],Im={"North America":["en-US","en-CA","es-MX","fr-CA","es-US"],Europe:["en-GB","fr-FR","de-DE","it-IT","es-ES","pt-PT","nl-NL","sv-SE","da-DK","no-NO","fi-FI","pl-PL","ru-RU","de-AT","de-CH","fr-BE","nl-BE","it-CH","cs-CZ","sk-SK","hu-HU","ro-RO","bg-BG","hr-HR","sl-SI","et-EE","lv-LV","lt-LT","el-GR","mt-MT","ga-IE","cy-GB","is-IS","fo-FO","eu-ES","ca-ES","gl-ES"],Asia:["ja-JP","ko-KR","zh-CN","zh-TW","zh-HK","hi-IN","th-TH","id-ID","vi-VN","ms-MY","tl-PH","ur-PK","bn-BD","ta-IN","te-IN","ml-IN","kn-IN","gu-IN","or-IN","pa-IN","as-IN","ne-NP","si-LK","my-MM","km-KH","lo-LA","ka-GE","hy-AM","az-AZ","kk-KZ","ky-KG","uz-UZ","tg-TJ","tk-TM","mn-MN","ug-CN","bo-CN"],"South America":["pt-BR","es-AR","es-CO","es-CL","es-PE","es-VE","es-EC","es-UY","es-PY","es-BO","fr-GF","nl-SR","en-GY"],Africa:["ar-EG","ar-MA","ar-DZ","ar-TN","ar-LY","ar-SD","ar-SO","sw-KE","sw-TZ","sw-UG","af-ZA","en-ZA","fr-SN","fr-CI","fr-ML","fr-BF","fr-NE","fr-TD","fr-CF","fr-CD","fr-CG","fr-GA","fr-CM","fr-DJ","fr-MG","fr-RW","fr-BI","pt-AO","pt-MZ","pt-CV","pt-GW","pt-ST","am-ET","ti-ET","om-ET","so-SO","ar-ER","ti-ER"],Oceania:["en-AU","en-NZ","en-FJ","en-PG","en-SB","en-VU","en-NC","en-PF","en-WS","en-TO","en-KI","en-TV","en-NR","en-MH","en-FM","en-PW","mi-NZ","fj-FJ","sm-WS","to-TO","ty-PF"],"Middle East":["ar-SA","ar-AE","ar-QA","ar-KW","ar-BH","ar-OM","ar-YE","ar-JO","ar-LB","ar-SY","ar-IQ","ar-IL","ar-PS","he-IL","fa-IR","fa-AF","tr-TR","ku-TR"]},Fa=[{id:"Etc/GMT+12",offset:-12,description:"GMT-12:00"},{id:"Pacific/Midway",offset:-11,description:"Samoa Standard Time"},{id:"Pacific/Pago_Pago",offset:-11,description:"Samoa Standard Time"},{id:"Pacific/Samoa",offset:-11,description:"Samoa Standard Time"},{id:"US/Samoa",offset:-11,description:"Samoa Standard Time"},{id:"Etc/GMT+11",offset:-11,description:"GMT-11:00"},{id:"Pacific/Honolulu",offset:-10,description:"Hawaii Standard Time"},{id:"US/Hawaii",offset:-10,description:"Hawaii Standard Time"},{id:"Pacific/Rarotonga",offset:-10,description:"Cook Is. Time"},{id:"Pacific/Tahiti",offset:-10,description:"Tahiti Time"},{id:"Etc/GMT+10",offset:-10,description:"GMT-10:00"},{id:"US/Alaska",offset:-9,description:"Alaska Standard Time"},{id:"America/Anchorage",offset:-9,description:"Alaska Standard Time"},{id:"America/Juneau",offset:-9,description:"Alaska Standard Time"},{id:"America/Nome",offset:-9,description:"Alaska Standard Time"},{id:"America/Yakutat",offset:-9,description:"Alaska Standard Time"},{id:"Pacific/Gambier",offset:-9,description:"Gambier Time"},{id:"Etc/GMT+9",offset:-9,description:"GMT-09:00"},{id:"US/Pacific",offset:-8,description:"Pacific Standard Time"},{id:"America/Los_Angeles",offset:-8,description:"Pacific Standard Time"},{id:"America/Vancouver",offset:-8,description:"Pacific Standard Time"},{id:"America/Tijuana",offset:-8,description:"Pacific Standard Time"},{id:"Pacific/Pitcairn",offset:-8,description:"Pitcairn Standard Time"},{id:"Etc/GMT+8",offset:-8,description:"GMT-08:00"},{id:"US/Mountain",offset:-7,description:"Mountain Standard Time"},{id:"America/Denver",offset:-7,description:"Mountain Standard Time"},{id:"America/Phoenix",offset:-7,description:"Mountain Standard Time"},{id:"America/Calgary",offset:-7,description:"Mountain Standard Time"},{id:"America/Edmonton",offset:-7,description:"Mountain Standard Time"},{id:"US/Arizona",offset:-7,description:"Mountain Standard Time"},{id:"Etc/GMT+7",offset:-7,description:"GMT-07:00"},{id:"US/Central",offset:-6,description:"Central Standard Time"},{id:"America/Chicago",offset:-6,description:"Central Standard Time"},{id:"America/Mexico_City",offset:-6,description:"Central Standard Time"},{id:"America/Winnipeg",offset:-6,description:"Central Standard Time"},{id:"America/Guatemala",offset:-6,description:"Central Standard Time"},{id:"Pacific/Easter",offset:-6,description:"Easter Is. Time"},{id:"Etc/GMT+6",offset:-6,description:"GMT-06:00"},{id:"US/Eastern",offset:-5,description:"Eastern Standard Time"},{id:"America/New_York",offset:-5,description:"Eastern Standard Time"},{id:"America/Toronto",offset:-5,description:"Eastern Standard Time"},{id:"America/Montreal",offset:-5,description:"Eastern Standard Time"},{id:"America/Bogota",offset:-5,description:"Colombia Time"},{id:"America/Lima",offset:-5,description:"Peru Time"},{id:"America/Panama",offset:-5,description:"Eastern Standard Time"},{id:"Etc/GMT+5",offset:-5,description:"GMT-05:00"},{id:"America/Caracas",offset:-4,description:"Venezuela Time"},{id:"America/Santiago",offset:-4,description:"Chile Time"},{id:"America/La_Paz",offset:-4,description:"Bolivia Time"},{id:"America/Halifax",offset:-4,description:"Atlantic Standard Time"},{id:"America/Barbados",offset:-4,description:"Atlantic Standard Time"},{id:"Atlantic/Bermuda",offset:-4,description:"Atlantic Standard Time"},{id:"Etc/GMT+4",offset:-4,description:"GMT-04:00"},{id:"America/Sao_Paulo",offset:-3,description:"Brazil Time"},{id:"America/Buenos_Aires",offset:-3,description:"Argentina Time"},{id:"America/Montevideo",offset:-3,description:"Uruguay Time"},{id:"America/Cayenne",offset:-3,description:"French Guiana Time"},{id:"America/Godthab",offset:-3,description:"West Greenland Time"},{id:"Etc/GMT+3",offset:-3,description:"GMT-03:00"},{id:"America/Noronha",offset:-2,description:"Fernando de Noronha Time"},{id:"Atlantic/South_Georgia",offset:-2,description:"South Georgia Time"},{id:"Etc/GMT+2",offset:-2,description:"GMT-02:00"},{id:"Atlantic/Azores",offset:-1,description:"Azores Time"},{id:"Atlantic/Cape_Verde",offset:-1,description:"Cape Verde Time"},{id:"Etc/GMT+1",offset:-1,description:"GMT-01:00"},{id:"UTC",offset:0,description:"Coordinated Universal Time"},{id:"GMT",offset:0,description:"Greenwich Mean Time"},{id:"Europe/London",offset:0,description:"Greenwich Mean Time"},{id:"Europe/Dublin",offset:0,description:"Irish Standard Time"},{id:"Africa/Casablanca",offset:0,description:"Western European Time"},{id:"Atlantic/Reykjavik",offset:0,description:"Greenwich Mean Time"},{id:"Etc/GMT",offset:0,description:"GMT"},{id:"Europe/Paris",offset:1,description:"Central European Time"},{id:"Europe/Berlin",offset:1,description:"Central European Time"},{id:"Europe/Rome",offset:1,description:"Central European Time"},{id:"Europe/Madrid",offset:1,description:"Central European Time"},{id:"Europe/Amsterdam",offset:1,description:"Central European Time"},{id:"Europe/Brussels",offset:1,description:"Central European Time"},{id:"Europe/Vienna",offset:1,description:"Central European Time"},{id:"Europe/Zurich",offset:1,description:"Central European Time"},{id:"Africa/Lagos",offset:1,description:"West Africa Time"},{id:"Etc/GMT-1",offset:1,description:"GMT+01:00"},{id:"Europe/Helsinki",offset:2,description:"Eastern European Time"},{id:"Europe/Athens",offset:2,description:"Eastern European Time"},{id:"Europe/Istanbul",offset:2,description:"Turkey Time"},{id:"Europe/Kiev",offset:2,description:"Eastern European Time"},{id:"Africa/Cairo",offset:2,description:"Eastern European Time"},{id:"Africa/Johannesburg",offset:2,description:"South Africa Standard Time"},{id:"Asia/Jerusalem",offset:2,description:"Israel Standard Time"},{id:"Etc/GMT-2",offset:2,description:"GMT+02:00"},{id:"Europe/Moscow",offset:3,description:"Moscow Standard Time"},{id:"Asia/Riyadh",offset:3,description:"Arabia Standard Time"},{id:"Asia/Kuwait",offset:3,description:"Arabia Standard Time"},{id:"Asia/Baghdad",offset:3,description:"Arabia Standard Time"},{id:"Africa/Nairobi",offset:3,description:"East Africa Time"},{id:"Indian/Antananarivo",offset:3,description:"East Africa Time"},{id:"Etc/GMT-3",offset:3,description:"GMT+03:00"},{id:"Asia/Tehran",offset:3.5,description:"Iran Standard Time"},{id:"Asia/Dubai",offset:4,description:"Gulf Standard Time"},{id:"Asia/Muscat",offset:4,description:"Gulf Standard Time"},{id:"Asia/Baku",offset:4,description:"Azerbaijan Time"},{id:"Asia/Tbilisi",offset:4,description:"Georgia Time"},{id:"Indian/Mauritius",offset:4,description:"Mauritius Time"},{id:"Etc/GMT-4",offset:4,description:"GMT+04:00"},{id:"Asia/Kabul",offset:4.5,description:"Afghanistan Time"},{id:"Asia/Karachi",offset:5,description:"Pakistan Standard Time"},{id:"Asia/Tashkent",offset:5,description:"Uzbekistan Time"},{id:"Asia/Yekaterinburg",offset:5,description:"Yekaterinburg Time"},{id:"Indian/Maldives",offset:5,description:"Maldives Time"},{id:"Etc/GMT-5",offset:5,description:"GMT+05:00"},{id:"Asia/Kolkata",offset:5.5,description:"India Standard Time"},{id:"Asia/Colombo",offset:5.5,description:"Sri Lanka Time"},{id:"Asia/Kathmandu",offset:5.75,description:"Nepal Time"},{id:"Asia/Almaty",offset:6,description:"East Kazakhstan Time"},{id:"Asia/Dhaka",offset:6,description:"Bangladesh Time"},{id:"Asia/Omsk",offset:6,description:"Omsk Time"},{id:"Indian/Chagos",offset:6,description:"Indian Ocean Time"},{id:"Etc/GMT-6",offset:6,description:"GMT+06:00"},{id:"Asia/Rangoon",offset:6.5,description:"Myanmar Time"},{id:"Indian/Cocos",offset:6.5,description:"Cocos Islands Time"},{id:"Asia/Bangkok",offset:7,description:"Indochina Time"},{id:"Asia/Jakarta",offset:7,description:"West Indonesia Time"},{id:"Asia/Ho_Chi_Minh",offset:7,description:"Indochina Time"},{id:"Asia/Krasnoyarsk",offset:7,description:"Krasnoyarsk Time"},{id:"Etc/GMT-7",offset:7,description:"GMT+07:00"},{id:"Asia/Shanghai",offset:8,description:"China Standard Time"},{id:"Asia/Hong_Kong",offset:8,description:"Hong Kong Time"},{id:"Asia/Singapore",offset:8,description:"Singapore Time"},{id:"Asia/Taipei",offset:8,description:"China Standard Time"},{id:"Asia/Manila",offset:8,description:"Philippine Time"},{id:"Asia/Kuala_Lumpur",offset:8,description:"Malaysia Time"},{id:"Australia/Perth",offset:8,description:"Western Standard Time (Australia)"},{id:"Asia/Irkutsk",offset:8,description:"Irkutsk Time"},{id:"Etc/GMT-8",offset:8,description:"GMT+08:00"},{id:"Asia/Tokyo",offset:9,description:"Japan Standard Time"},{id:"Asia/Seoul",offset:9,description:"Korea Standard Time"},{id:"Asia/Yakutsk",offset:9,description:"Yakutsk Time"},{id:"Pacific/Palau",offset:9,description:"Palau Time"},{id:"Etc/GMT-9",offset:9,description:"GMT+09:00"},{id:"Australia/Adelaide",offset:9.5,description:"Central Standard Time (South Australia)"},{id:"Australia/Darwin",offset:9.5,description:"Central Standard Time (Northern Territory)"},{id:"Australia/Sydney",offset:10,description:"Eastern Standard Time (New South Wales)"},{id:"Australia/Melbourne",offset:10,description:"Eastern Standard Time (Victoria)"},{id:"Australia/Brisbane",offset:10,description:"Eastern Standard Time (Queensland)"},{id:"Australia/Hobart",offset:10,description:"Eastern Standard Time (Tasmania)"},{id:"Pacific/Guam",offset:10,description:"Chamorro Standard Time"},{id:"Asia/Vladivostok",offset:10,description:"Vladivostok Time"},{id:"Etc/GMT-10",offset:10,description:"GMT+10:00"},{id:"Australia/Lord_Howe",offset:10.5,description:"Lord Howe Standard Time"},{id:"Pacific/Norfolk",offset:11,description:"Norfolk Time"},{id:"Asia/Magadan",offset:11,description:"Magadan Time"},{id:"Pacific/Noumea",offset:11,description:"New Caledonia Time"},{id:"Etc/GMT-11",offset:11,description:"GMT+11:00"},{id:"Pacific/Auckland",offset:12,description:"New Zealand Standard Time"},{id:"Pacific/Fiji",offset:12,description:"Fiji Time"},{id:"Asia/Kamchatka",offset:12,description:"Kamchatka Time"},{id:"Pacific/Tarawa",offset:12,description:"Gilbert Is. Time"},{id:"Etc/GMT-12",offset:12,description:"GMT+12:00"},{id:"Pacific/Chatham",offset:12.75,description:"Chatham Standard Time"},{id:"Pacific/Tongatapu",offset:13,description:"Tonga Time"},{id:"Pacific/Apia",offset:13,description:"West Samoa Time"},{id:"Etc/GMT-13",offset:13,description:"GMT+13:00"},{id:"Pacific/Kiritimati",offset:14,description:"Line Is. Time"},{id:"Etc/GMT-14",offset:14,description:"GMT+14:00"}];function Cn(){try{return Intl.DateTimeFormat().resolvedOptions().timeZone}catch{return"UTC"}}function mo(e){return Fa.find(t=>t.id===e)||null}function Wt(e,t=new Date){try{const a=new Date(t.getTime()+t.getTimezoneOffset()*6e4);return(new Date(a.toLocaleString("en-US",{timeZone:e})).getTime()-a.getTime())/(1e3*60*60)}catch{const n=mo(e);return n?n.offset:0}}function Em(e){return Fa.filter(t=>t.id.startsWith(e+"/"))}function _m(e){const t=e.toLowerCase();return Fa.filter(a=>a.id.toLowerCase().includes(t)||a.description.toLowerCase().includes(t))}function Nm(e){return Fa.filter(t=>t.offset===e)}var Ym=Fa.map(e=>e.id);Cn();var na={defaultTimezone:Cn(),autoDetect:!0};function Pt(e){return e||(na.autoDetect?Cn():na.defaultTimezone)}function zm(e){e.defaultTimezone!==void 0&&(na.defaultTimezone=e.defaultTimezone),e.autoDetect!==void 0&&(na.autoDetect=e.autoDetect)}function Om(){return{defaultTimezone:na.defaultTimezone,autoDetect:na.autoDetect,currentEffectiveTimezone:Pt()}}var w=class po extends Error{constructor(t){super(`ChronoUtilz Error: ${t}`),this.name="ChronoUtilzError",Error.captureStackTrace&&Error.captureStackTrace(this,po)}};function T(e,t={}){const{throwError:a=!1,fallback:n=null}=t;try{if(e instanceof Date){const k=new Date(e.getTime());if(isNaN(k.getTime()))throw new w("Invalid Date object");return k}if(typeof e=="number"){const k=new Date(e);if(isNaN(k.getTime()))throw new w(`Invalid timestamp: ${e}`);return k}if(typeof e!="string")throw new w("Invalid input type for date");const r=["january","february","march","april","may","june","july","august","september","october","november","december"],i=/^(\d{1,2})\/(\d{1,2})\/(\d{4})(?:,?\s*(\d{1,2}):(\d{2})(?::(\d{2}))?)?$/,s=e.match(i);if(s){const[,k,C,H,Y,O,h]=s,b=parseInt(H,10),x=Y?parseInt(Y,10):0,I=O?parseInt(O,10):0,B=h?parseInt(h,10):0,Z=parseInt(k,10),pe=parseInt(C,10),ee=new Date(b,Z-1,pe,x,I,B);if(ee.getFullYear()===b&&ee.getMonth()===Z-1&&ee.getDate()===pe)return ee;const Be=Z,Je=pe,ke=new Date(b,Je-1,Be,x,I,B);if(ke.getFullYear()===b&&ke.getMonth()===Je-1&&ke.getDate()===Be)return ke}const o=/^(\d{1,2})\s+([a-zA-Z]{3,})\s+(\d{4})(?:,?\s*(\d{1,2}):(\d{2})(?::(\d{2}))?)?$/,d=e.match(o);if(d){const[,k,C,H,Y,O,h]=d,b=parseInt(k,10),x=parseInt(H,10),I=Y?parseInt(Y,10):0,B=O?parseInt(O,10):0,Z=h?parseInt(h,10):0,pe=r.findIndex(ee=>ee.startsWith(C.toLowerCase().slice(0,3)));if(pe!==-1){const ee=new Date(x,pe,b,I,B,Z);if(ee.getFullYear()===x&&ee.getMonth()===pe&&ee.getDate()===b)return ee}}const c=/^([a-zA-Z]{3,})\s+(\d{1,2})(?:,)?\s+(\d{4})(?:,?\s*(\d{1,2}):(\d{2})(?::(\d{2}))?)?$/,u=e.match(c);if(u){const[,k,C,H,Y,O,h]=u,b=parseInt(C,10),x=parseInt(H,10),I=Y?parseInt(Y,10):0,B=O?parseInt(O,10):0,Z=h?parseInt(h,10):0,pe=r.findIndex(ee=>ee.startsWith(k.toLowerCase().slice(0,3)));if(pe!==-1){const ee=new Date(x,pe,b,I,B,Z);if(ee.getFullYear()===x&&ee.getMonth()===pe&&ee.getDate()===b)return ee}}const l=/^(\d{4})-(\d{2})-(\d{2})(?:T(\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?)?(?:Z|[+-]\d{2}:\d{2})?$/,m=e.match(l);if(m){const[,k,C,H,Y,O,h,b]=m,x=parseInt(k,10),I=parseInt(C,10)-1,B=parseInt(H,10),Z=Y?parseInt(Y,10):0,pe=O?parseInt(O,10):0,ee=h?parseInt(h,10):0,Be=b?parseInt(b,10):0;return new Date(x,I,B,Z,pe,ee,Be)}const g=new Date(e);if(!isNaN(g.getTime()))return g;throw new w(`Unable to parse date: ${e}`)}catch(r){if(a)throw r instanceof w?r:new w(`Failed to parse date: ${e}`);return n}}function Dt(e,t="YYYY-MM-DD",a){Pt(a);const n=T(e,{throwError:!0});if(!n)throw new w("Invalid date provided to formatDate");const r=n.getFullYear(),i=n.getMonth()+1,s=n.getDate(),o=n.getHours(),d=o%12||12,c=n.getMinutes(),u=n.getSeconds(),l=o>=12?"PM":"AM",m=k=>k.toString().padStart(2,"0"),g=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];switch(t){case"YYYY-MM-DD":return`${r}-${m(i)}-${m(s)}`;case"MM/DD/YYYY":return`${m(i)}/${m(s)}/${r}`;case"DD/MM/YYYY":return`${m(s)}/${m(i)}/${r}`;case"YYYY-MM-DD HH:mm:ss":return`${r}-${m(i)}-${m(s)} ${m(o)}:${m(c)}:${m(u)}`;case"DD MMM YYYY":return`${m(s)} ${g[n.getMonth()]} ${r}`;case"MMM DD, YYYY":return`${g[n.getMonth()]} ${m(s)}, ${r}`;case"HH:mm:ss":return`${m(o)}:${m(c)}:${m(u)}`;case"hh:mm A":return`${m(d)}:${m(c)} ${l}`;default:throw new w(`Unsupported date format: ${t}`)}}function le(e,t,a,n){let r;const i=Pt(n);if(e instanceof Date){const o=e.getFullYear(),d=e.getMonth(),c=e.getDate(),u=e.getHours(),l=e.getMinutes(),m=e.getSeconds(),g=e.getMilliseconds();r=new Date(o,d,c,u,l,m,g)}else r=T(e,{throwError:!0});if(!r)throw new w("Invalid date provided to addTime");const s=new Date(r.getTime());switch(a){case"millisecond":return new Date(s.getTime()+t);case"second":return new Date(s.getTime()+t*1e3);case"minute":return new Date(s.getTime()+t*60*1e3);case"hour":{const o=s.getTime()+t*60*60*1e3,d=new Date(o),c=Wt(i,s),u=Wt(i,d);if(c!==u){const l=(u-c)*60*60*1e3;return new Date(o-l)}return d}case"day":{const o=new Date(s.getTime());o.setDate(o.getDate()+t);const d=Wt(i,s),c=Wt(i,o);if(d!==c){const u=(c-d)*60*60*1e3;return new Date(o.getTime()-u)}return o}case"week":{const o=new Date(s.getTime());o.setDate(o.getDate()+t*7);const d=Wt(i,s),c=Wt(i,o);if(d!==c){const u=(c-d)*60*60*1e3;return new Date(o.getTime()-u)}return o}case"month":{const o=new Date(s.getTime()),d=o.getMonth()+t,c=o.getFullYear()+Math.floor(d/12),u=(d%12+12)%12;return o.setFullYear(c,u,o.getDate()),o.getMonth()!==u&&o.setDate(0),o}case"year":{const o=new Date(s.getTime()),d=o.getFullYear()+t;return o.setFullYear(d),o.getMonth()!==s.getMonth()&&o.setDate(0),o}default:throw new w(`Invalid time unit: ${a}`)}}function zt(e,t,a,n){return le(e,-t,a,n)}function In(e,t,a,n){Pt(n);const r=T(e,{throwError:!0}),i=T(t,{throwError:!0});if(!r||!i)throw new w("Invalid date(s) provided to getDateDiff");const s=r.getTime()-i.getTime();switch(a){case"millisecond":return s;case"second":return Math.floor(s/1e3);case"minute":return Math.floor(s/(1e3*60));case"hour":return Math.floor(s/(1e3*60*60));case"day":return Math.floor(s/(1e3*60*60*24));case"week":return Math.floor(s/(1e3*60*60*24*7));case"month":{const o=r.getFullYear(),d=i.getFullYear(),c=r.getMonth(),u=i.getMonth();return(o-d)*12+(c-u)}case"year":{const o=r.getFullYear(),d=i.getFullYear(),c=(r.getMonth()-i.getMonth())/12;return o-d+c}default:throw new w(`Invalid time unit: ${a}`)}}function Fm(e,t="millisecond",a=new Date,n){Pt(n);const r=T(e,{throwError:!0}),i=T(a,{throwError:!0});if(!r||!i)throw new w("Invalid date(s) provided to remainingTime");const s=r.getTime()-i.getTime();switch(t){case"millisecond":return s;case"second":return Math.floor(s/1e3);case"minute":return Math.floor(s/(1e3*60));case"hour":return Math.floor(s/(1e3*60*60));case"day":return Math.floor(s/(1e3*60*60*24));case"week":return Math.floor(s/(1e3*60*60*24*7));case"month":{const o=r.getFullYear(),d=i.getFullYear(),c=r.getMonth(),u=i.getMonth();return(o-d)*12+(c-u)}case"quarter":{const o=r.getFullYear(),d=i.getFullYear(),c=Math.floor(r.getMonth()/3),u=Math.floor(i.getMonth()/3);return(o-d)*4+(c-u)}case"year":{const o=r.getFullYear(),d=i.getFullYear(),c=(r.getMonth()-i.getMonth())/12;return o-d+c}default:throw new w(`Invalid time unit: ${t}`)}}function En(e,t,a,n=!0){const r=T(e,{throwError:!0}),i=T(t,{throwError:!0}),s=T(a,{throwError:!0});if(!r||!i||!s)throw new w("Invalid date(s) provided to isBetweenDates");const o=r.getTime(),d=i.getTime(),c=s.getTime();return n?o>=d&&o<=c:o>d&&o<c}function _n(e){return T(e,{throwError:!1})!==null}function we(e,t){const a=T(e,{throwError:!0});if(!a)throw new w("Invalid date provided to startOf");const n=new Date(a.getTime());switch(t){case"hour":n.setMinutes(0,0,0);break;case"day":n.setHours(0,0,0,0);break;case"week":{const r=n.getDay();n.setDate(n.getDate()-r),n.setHours(0,0,0,0);break}case"month":n.setDate(1),n.setHours(0,0,0,0);break;case"year":n.setMonth(0,1),n.setHours(0,0,0,0);break;default:throw new w(`Invalid time unit for startOf: ${t}`)}return n}function Sa(e,t){const a=T(e,{throwError:!0});if(!a)throw new w("Invalid date provided to endOf");const n=new Date(a.getTime());switch(t){case"hour":n.setMinutes(59,59,999);break;case"day":n.setHours(23,59,59,999);break;case"week":{const r=n.getDay();n.setDate(n.getDate()+(6-r)),n.setHours(23,59,59,999);break}case"month":{n.setMonth(n.getMonth()+1,0),n.setHours(23,59,59,999);break}case"year":n.setMonth(11,31),n.setHours(23,59,59,999);break;default:throw new w(`Invalid time unit for endOf: ${t}`)}return n}function fo(e){const t=T(e,{throwError:!0});if(!t)throw new w("Invalid date provided to getDayOfYear");const a=new Date(t.getFullYear(),0,0),n=t.getTime()-a.getTime(),r=1e3*60*60*24;return Math.floor(n/r)}function yo(e){const t=T(e,{throwError:!0});if(!t)throw new w("Invalid date provided to getWeekOfYear");const a=new Date(t.valueOf()),n=(t.getDay()+6)%7;a.setDate(a.getDate()-n+3);const r=new Date(a.getFullYear(),0,1);r.getDay()!==4&&r.setMonth(0,1+(4-r.getDay()+7)%7);const i=(a.getTime()-r.getTime())/(168*3600*1e3);return 1+Math.floor(i)}function go(e){let t;if(typeof e=="number")t=e;else{const a=T(e,{throwError:!0});if(!a)throw new w("Invalid date provided to isLeapYear");t=a.getFullYear()}return t%4===0&&t%100!==0||t%400===0}function kr(e){const t=T(e,{throwError:!0});if(!t)throw new w("Invalid date provided to getDaysInMonth");return new Date(t.getFullYear(),t.getMonth()+1,0).getDate()}function Ar(e,t=new Date){const a=T(e,{throwError:!0}),n=T(t,{throwError:!0});if(!a||!n)throw new w("Invalid date(s) provided to getRelativeTime");const r=a.getTime()-n.getTime(),i=r<0,s=Math.abs(r),o=Math.round(s/1e3),d=(k,C)=>{const H=k!==1?"s":"";return i?`${k} ${C}${H} ago`:`in ${k} ${C}${H}`};if(o<5)return"just now";if(o<60)return d(o,"second");if(o<3600)return d(Math.floor(o/60),"minute");if(o<86400)return d(Math.floor(o/3600),"hour");if(o<604800)return d(Math.floor(o/86400),"day");if(o<2629800)return d(Math.floor(o/604800),"week");const c=new Date(n.getFullYear(),n.getMonth(),n.getDate()),u=new Date(a.getFullYear(),a.getMonth(),a.getDate()),l=u.getFullYear()-c.getFullYear(),m=u.getMonth()-c.getMonth();let g=l*12+m;return u.getDate()<c.getDate()&&(g-=1),Math.abs(g)>=12?d(Math.floor(Math.abs(g)/12),"year"):d(Math.abs(g),"month")}function ho(e=new Date){const t=T(e,{throwError:!0});if(!t)throw new w("Invalid date provided to getTimezoneOffset");return t.getTimezoneOffset()}function Cr(e,t,a,n=0,r=0,i=0,s=0){if(t<0||t>11)throw new w(`Month must be between 0 and 11, got ${t}`);const o=new Date(e,t,a,n,r,i,s);if(isNaN(o.getTime()))throw new w("Invalid date components provided to createDate");if(o.getMonth()!==t)throw new w(`Invalid day ${a} for month ${t}`);return o}var Do=class Ka{constructor(t,a,n){const r=a-1,i=Cr(t,r,n);this._year=i.getFullYear(),this._month=i.getMonth(),this._day=i.getDate()}static fromDate(t){return new Ka(t.getFullYear(),t.getMonth()+1,t.getDate())}static fromString(t){const a=T(t,{throwError:!0});if(!a)throw new w("Invalid date provided to CalendarDate.fromString");return Ka.fromDate(a)}get year(){return this._year}get month(){return this._month+1}get day(){return this._day}toDate(){return new Date(this._year,this._month,this._day,0,0,0,0)}toString(){return Dt(this.toDate(),"YYYY-MM-DD")}add(t,a){const n=le(this.toDate(),t,a);return Ka.fromDate(n)}equals(t){return this._year===t._year&&this._month===t._month&&this._day===t._day}compare(t){return this._year!==t._year?this._year-t._year:this._month!==t._month?this._month-t._month:this._day-t._day}isBefore(t){return this.compare(t)<0}isAfter(t){return this.compare(t)>0}};function bo(){const e=new Date;return new Date(e.getTime()+e.getTimezoneOffset()*6e4)}function wo(e){const t=T(e,{throwError:!0});if(!t)throw new w("Invalid date provided to toUTC");return new Date(t.getTime()+t.getTimezoneOffset()*6e4)}function xo(){const e=new Date().getTimezoneOffset(),t=e<=0?"+":"-",a=Math.abs(e),n=Math.floor(a/60),r=a%60;return`UTC${t}${n.toString().padStart(2,"0")}:${r.toString().padStart(2,"0")}`}function Ir(e,t){let a;switch(t){case"YYYY-MM-DD":if(a=e.match(/^(\d{4})-(\d{2})-(\d{2})$/),!a)return!1;break;case"MM/DD/YYYY":{if(a=e.match(/^(\d{1,2})\/(\d{1,2})\/(\d{4})$/),!a)return!1;const[,n,r,i]=a.map(Number);return n<1||n>12||r<1||r>31?!1:new Date(`${i}-${String(n).padStart(2,"0")}-${String(r).padStart(2,"0")}`).getMonth()===n-1}case"DD/MM/YYYY":{if(a=e.match(/^(\d{1,2})\/(\d{1,2})\/(\d{4})$/),!a)return!1;const[,n,r,i]=a.map(Number);return r<1||r>12||n<1||n>31?!1:new Date(`${i}-${String(r).padStart(2,"0")}-${String(n).padStart(2,"0")}`).getDate()===n}case"YYYY-MM-DD HH:mm:ss":if(a=e.match(/^(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2})$/),!a)return!1;break;case"DD MMM YYYY":if(a=e.match(/^(\d{1,2}) ([A-Za-z]{3}) (\d{4})$/),!a)return!1;break;case"MMM DD, YYYY":if(a=e.match(/^([A-Za-z]{3}) (\d{1,2}), (\d{4})$/),!a)return!1;break;case"HH:mm:ss":{if(a=e.match(/^(\d{2}):(\d{2}):(\d{2})$/),!a)return!1;const[,n,r,i]=a.map(Number);return n<24&&r<60&&i<60}case"hh:mm A":{if(a=e.match(/^(\d{1,2}):(\d{2}) ([AP]M)$/),!a)return!1;const n=parseInt(a[1],10),r=parseInt(a[2],10);return n>=1&&n<=12&&r>=0&&r<=59}default:return!1}try{const n=T(e);return n!==null&&!isNaN(n.getTime())}catch{return!1}}function To(e){const{start:t,end:a,unit:n="day",step:r=1,inclusive:i=!0}=e,s=_e.parseDate(t),o=_e.parseDate(a);if(!s||!o)throw new Error("Invalid start or end date provided");if(s>o)throw new Error("Start date must be before or equal to end date");const d=[];let c=new Date(s);for(;c<o||i&&c.getTime()===o.getTime();)d.push(new Date(c)),c=_e.addTime(c,r,n);return d}function vo(e,t={}){const{longFormat:a=!0,maxUnits:n=3}=t;if(e===0)return a?"0 milliseconds":"0ms";const r=[["year","y",31536e6],["month","mo",2592e6],["day","d",864e5],["hour","h",36e5],["minute","m",6e4],["second","s",1e3],["millisecond","ms",1]],i=[];let s=Math.abs(e);for(const[o,d,c]of r){if(i.length>=n)break;const u=Math.floor(s/c);s%=c,u!==0&&(a?i.push(`${u} ${o}${u!==1?"s":""}`):i.push(`${u}${d}`))}return i.join(a?", ":" ")}function Er(e){const t=_e.parseDate(e);if(!t)throw new Error("Invalid date provided");const a=t.getMonth();return Math.floor(a/3)+1}function Rm(e,t){const a=_e.parseDate(e);if(!a)throw new Error("Invalid date provided");const n=Er(a),r=a.getFullYear();return t==="start"?new Date(r,(n-1)*3,1):new Date(r,n*3,0)}function So(e,t,a=[]){const n=_e.parseDate(e),r=_e.parseDate(t);if(!n||!r)throw new Error("Invalid start or end date");const i=new Set(a.map(d=>{const c=_e.parseDate(d);return c?_e.formatDate(c,"YYYY-MM-DD"):null}).filter(d=>d!==null));let s=0;const o=1440*60*1e3;for(let d=_e.startOf(n,"day");d<=r;d=new Date(d.getTime()+o)){const c=d.getDay();if(c===0||c===6)continue;const u=_e.formatDate(d,"YYYY-MM-DD");i.has(u)||s++}return s}function Mo(e,t={}){const a=_e.parseDate(e);if(!a)throw new Error("Invalid birth date");const n=t.referenceDate?_e.parseDate(t.referenceDate):new Date;if(!n)throw new Error("Invalid reference date");if(a>n)throw new Error("Birth date cannot be in the future");if(!t.units||t.units.length===0||t.units.length===1&&t.units[0]==="year"){let o=n.getFullYear()-a.getFullYear();return(n.getMonth()<a.getMonth()||n.getMonth()===a.getMonth()&&n.getDate()<a.getDate())&&o--,o}let r=n.getFullYear()-a.getFullYear(),i=n.getMonth()-a.getMonth(),s=n.getDate()-a.getDate();if(s<0){i--;const o=new Date(n.getFullYear(),n.getMonth(),0);s+=o.getDate()}return i<0&&(r--,i+=12),{years:r,months:i,days:s}}function ko(e){const t=T(e,{throwError:!0});if(!t)throw new w("Invalid date provided to cloneDate");return new Date(t.getTime())}function _r(...e){if(e.length===0)throw new w("At least one date must be provided to minDate");const t=e.map(a=>{const n=T(a,{throwError:!0});if(!n)throw new w("Invalid date provided to minDate");return n});return new Date(Math.min(...t.map(a=>a.getTime())))}function Nr(...e){if(e.length===0)throw new w("At least one date must be provided to maxDate");const t=e.map(a=>{const n=T(a,{throwError:!0});if(!n)throw new w("Invalid date provided to maxDate");return n});return new Date(Math.max(...t.map(a=>a.getTime())))}function Ao(e,t){const a=T(e,{throwError:!0});if(!a)throw new w("Invalid date provided to roundToNearest");const n=new Date(a.getTime());switch(t){case"minute":{n.getSeconds()>=30&&n.setMinutes(n.getMinutes()+1),n.setSeconds(0,0);break}case"hour":{n.getMinutes()>=30&&n.setHours(n.getHours()+1),n.setMinutes(0,0,0);break}case"day":{n.getHours()>=12&&n.setDate(n.getDate()+1),n.setHours(0,0,0,0);break}default:throw new w(`Unsupported unit for roundToNearest: ${t}`)}return n}function Co(e,t,a){const n=T(e,{throwError:!0}),r=T(t,{throwError:!0});if(!n||!r)throw new w("Invalid date(s) provided to compareDates");let i=n.getTime(),s=r.getTime();if(a){const o=bt(n,a),d=bt(r,a);i=o.getTime(),s=d.getTime()}return i<s?-1:i>s?1:0}function Io(e,t=!1){const a=T(e,{throwError:!0});if(!a)throw new w("Invalid date provided to getTimestamp");const n=a.getTime();return t?Math.floor(n/1e3):n}function Eo(e){if(typeof e!="number"||!isFinite(e))throw new w("Invalid timestamp provided to fromTimestamp");const t=e<41024448e5?e*1e3:e,a=new Date(t);if(isNaN(a.getTime()))throw new w(`Invalid timestamp: ${e}`);return a}function _o(e,t){const a=T(e,{throwError:!0}),n=T(t,{throwError:!0});if(!a||!n)throw new w("Invalid date(s) provided to randomDate");if(a>=n)throw new w("Start date must be before end date");const r=a.getTime(),i=n.getTime(),s=r+Math.random()*(i-r);return new Date(s)}function No(e,t){const a=T(e,{throwError:!0}),n=T(t,{throwError:!0});if(!a||!n)throw new w("Invalid date(s) provided to copyTime");const r=new Date(n.getTime());return r.setHours(a.getHours(),a.getMinutes(),a.getSeconds(),a.getMilliseconds()),r}function bt(e,t){const a=T(e,{throwError:!0});if(!a)throw new w("Invalid date provided to truncateToUnit");const n=new Date(a.getTime());switch(t){case"millisecond":break;case"second":n.setMilliseconds(0);break;case"minute":n.setSeconds(0,0);break;case"hour":n.setMinutes(0,0,0);break;case"day":n.setHours(0,0,0,0);break;case"week":{const r=n.getDay();n.setDate(n.getDate()-r),n.setHours(0,0,0,0);break}case"month":n.setDate(1),n.setHours(0,0,0,0);break;case"year":n.setMonth(0,1),n.setHours(0,0,0,0);break;default:throw new w(`Invalid time unit for truncateToUnit: ${t}`)}return n}function Yo(e,t,a,n,r){const i=T(e,{throwError:!0});if(!i)throw new w("Invalid date provided to setTime");if(t<0||t>23||!Number.isInteger(t))throw new w("Hours must be an integer between 0 and 23");if(a!==void 0&&(a<0||a>59||!Number.isInteger(a)))throw new w("Minutes must be an integer between 0 and 59");if(n!==void 0&&(n<0||n>59||!Number.isInteger(n)))throw new w("Seconds must be an integer between 0 and 59");if(r!==void 0&&(r<0||r>999||!Number.isInteger(r)))throw new w("Milliseconds must be an integer between 0 and 999");const s=new Date(i.getTime());return s.setHours(t,a??s.getMinutes(),n??s.getSeconds(),r??s.getMilliseconds()),s}function zo(e,t){const a=T(e,{throwError:!0}),n=T(t,{throwError:!0});if(!a||!n)throw new w("Invalid date(s) provided to isSameDay");return a.getFullYear()===n.getFullYear()&&a.getMonth()===n.getMonth()&&a.getDate()===n.getDate()}function Oo(e,t){const a=T(e,{throwError:!0}),n=T(t,{throwError:!0});if(!a||!n)throw new w("Invalid date(s) provided to isSameWeek");const r=we(a,"week"),i=we(n,"week");return r.getTime()===i.getTime()}function Fo(e,t){const a=T(e,{throwError:!0}),n=T(t,{throwError:!0});if(!a||!n)throw new w("Invalid date(s) provided to isSameMonth");return a.getFullYear()===n.getFullYear()&&a.getMonth()===n.getMonth()}function Ro(e,t){const a=T(e,{throwError:!0}),n=T(t,{throwError:!0});if(!a||!n)throw new w("Invalid date(s) provided to isSameYear");return a.getFullYear()===n.getFullYear()}function Po(e,t,a){const n=T(e,{throwError:!0}),r=T(t,{throwError:!0});if(!n||!r)throw new w("Invalid date(s) provided to isAfter");if(a){const i=bt(n,a),s=bt(r,a);return i.getTime()>s.getTime()}return n.getTime()>r.getTime()}function Bo(e,t,a){const n=T(e,{throwError:!0}),r=T(t,{throwError:!0});if(!n||!r)throw new w("Invalid date(s) provided to isBefore");if(a){const i=bt(n,a),s=bt(r,a);return i.getTime()<s.getTime()}return n.getTime()<r.getTime()}function Lo(e,t,a,n=!0){return En(e,t,a,n)}function Ho(e,t){const a=T(e,{throwError:!1}),n=T(t,{throwError:!1});return!a||!n?!1:a.getTime()<=n.getTime()}function Go(e,t="asc"){if(!Array.isArray(e))throw new w("First argument must be an array");return e.length===0?[]:e.map(r=>T(r,{throwError:!1})).filter(r=>r!==null).sort((r,i)=>{const s=r.getTime()-i.getTime();return t==="asc"?s:-s}).map(r=>new Date(r.getTime()))}function Uo(e){if(!Array.isArray(e))throw new w("Argument must be an array");if(e.length===0)throw new w("Array cannot be empty");return _r(...e)}function Wo(e){if(!Array.isArray(e))throw new w("Argument must be an array");if(e.length===0)throw new w("Array cannot be empty");return Nr(...e)}function qo(e,t="day"){if(!Array.isArray(e))throw new w("First argument must be an array");if(e.length===0)return[];const a=e.map(i=>T(i,{throwError:!1})).filter(i=>i!==null),n=new Set,r=[];for(const i of a){const o=bt(i,t).getTime();n.has(o)||(n.add(o),r.push(new Date(i.getTime())))}return r}function $o(e){const t=T(e,{throwError:!0});if(!t)throw new w("Invalid date provided to isFirstDayOfMonth");return t.getDate()===1}function Vo(e){const t=T(e,{throwError:!0});if(!t)throw new w("Invalid date provided to isLastDayOfMonth");const a=new Date(t);return a.setDate(t.getDate()+1),a.getMonth()!==t.getMonth()}function jo(e){const t=T(e,{throwError:!0});if(!t)throw new w("Invalid date provided to isFirstDayOfYear");return t.getMonth()===0&&t.getDate()===1}function Ko(e){const t=T(e,{throwError:!0});if(!t)throw new w("Invalid date provided to isLastDayOfYear");return t.getMonth()===11&&t.getDate()===31}function Qo(e,t=1){const a=T(e,{throwError:!0});if(!a)throw new w("Invalid date provided to getWeekBoundaries");if(t<0||t>6||!Number.isInteger(t))throw new w("weekStartsOn must be an integer between 0 and 6");const n=a.getDay(),r=n<t?n+7-t:n-t,i=new Date(a);i.setDate(a.getDate()-r),i.setHours(0,0,0,0);const s=new Date(i);return s.setDate(i.getDate()+6),s.setHours(23,59,59,999),{start:i,end:s}}function Zo(e){const t=T(e,{throwError:!0});if(!t)throw new w("Invalid date provided to getMonthBoundaries");const a=new Date(t.getFullYear(),t.getMonth(),1);a.setHours(0,0,0,0);const n=new Date(t.getFullYear(),t.getMonth()+1,0);return n.setHours(23,59,59,999),{start:a,end:n}}function Jo(e){if(!Number.isInteger(e)||e<1e3||e>9999)throw new w("Year must be a 4-digit integer");const t=new Date(e,0,1);t.setHours(0,0,0,0);const a=new Date(e,11,31);return a.setHours(23,59,59,999),{start:t,end:a}}function Xo(e,t){if(!Number.isInteger(e)||e<1e3||e>9999)throw new w("Year must be a 4-digit integer");if(!Number.isInteger(t)||t<1||t>4)throw new w("Quarter must be between 1 and 4");const a=(t-1)*3,n=a+2,r=new Date(e,a,1);r.setHours(0,0,0,0);const i=new Date(e,n+1,0);return i.setHours(23,59,59,999),{start:r,end:i}}function Yr(e){const t=T(e,{throwError:!0});if(!t)throw new w("Invalid date provided to stripTime");const a=new Date(t);return a.setHours(0,0,0,0),a}function ed(e){return Yr(e)}function td(e){const t=T(e,{throwError:!0});if(!t)throw new w("Invalid date provided to getNoon");const a=new Date(t);return a.setHours(12,0,0,0),a}var rr={workingDays:[1,2,3,4,5],holidays:new Set},Qe=An(kn({},rr),{holidays:new Set(rr.holidays)});function ad(e){if(!Array.isArray(e))throw new w("dayArray must be an array");if(e.length===0)throw new w("dayArray cannot be empty");for(const a of e)if(!Number.isInteger(a)||a<0||a>6)throw new w("Day numbers must be integers between 0 and 6");const t=[...new Set(e)].sort((a,n)=>a-n);return Qe.workingDays=t,An(kn({},Qe),{holidays:new Set(Qe.holidays)})}function nd(e){if(!Array.isArray(e))throw new w("holidays must be an array");const t=new Set;for(const a of e){const n=T(a,{throwError:!0});if(!n)throw new w(`Invalid holiday date: ${a}`);const r=n.getFullYear(),i=String(n.getMonth()+1).padStart(2,"0"),s=String(n.getDate()).padStart(2,"0"),o=`${r}-${i}-${s}`;t.add(o)}return Qe.holidays=t,An(kn({},Qe),{holidays:new Set(Qe.holidays)})}function Nn(){return{workingDays:[...Qe.workingDays],holidays:new Set(Qe.holidays)}}function rd(){return Qe=An(kn({},rr),{holidays:new Set}),Nn()}function Pm(e){return e.toISOString().split("T")[0]}function ra(e){const t=T(e,{throwError:!0});if(!t)throw new w("Invalid date provided to isWeekend");const a=t.getDay();return!Qe.workingDays.includes(a)}function id(e){return!ra(e)}function je(e){const t=T(e,{throwError:!0});if(!t)throw new w("Invalid date provided to isBusinessDay");if(ra(t))return!1;const a=Pm(t);return!Qe.holidays.has(a)}function zr(e,t,a){Pt(a);const n=T(e,{throwError:!0});if(!n)throw new w("Invalid date provided to addBusinessDays");if(!Number.isInteger(t))throw new w("businessDays must be an integer");if(t===0)return new Date(n);const r=new Date(n),i=t>0?1:-1;let s=Math.abs(t);for(;s>0;)r.setDate(r.getDate()+i),je(r)&&s--;return r}function sd(e,t){return zr(e,-t)}function un(e){const t=T(e,{throwError:!0});if(!t)throw new w("Invalid date provided to getNextBusinessDay");const a=new Date(t);do a.setDate(a.getDate()+1);while(!je(a));return a}function od(e){const t=T(e,{throwError:!0});if(!t)throw new w("Invalid date provided to getPreviousBusinessDay");const a=new Date(t);do a.setDate(a.getDate()-1);while(!je(a));return a}function dd(e,t){if(!Number.isInteger(e)||e<1e3||e>9999)throw new w("Year must be a 4-digit integer");if(!Number.isInteger(t)||t<1||t>12)throw new w("Month must be between 1 and 12");const a=new Date(e,t-1,1),n=new Date(e,t,0);let r=0;const i=new Date(a);for(;i<=n;)je(i)&&r++,i.setDate(i.getDate()+1);return r}function ud(e,t){const a=T(e,{throwError:!0}),n=T(t,{throwError:!0});if(!a||!n)throw new w("Invalid date(s) provided to differenceInBusinessDays");const r=new Date(a);r.setHours(0,0,0,0);const i=new Date(n);i.setHours(0,0,0,0);const s=i>=r,o=s?r:i,d=s?i:r;let c=0;const u=new Date(o);for(u.setDate(u.getDate()+1);u<=d;)je(u)&&c++,u.setDate(u.getDate()+1);return s?c:-c}function cd(e){const t=T(e,{throwError:!0});if(!t)throw new w("Invalid date provided to isLastBusinessDayOfMonth");if(!je(t))return!1;const a=new Date(t);if(a.setDate(t.getDate()+1),a.getMonth()!==t.getMonth())return!0;const n=new Date(t.getFullYear(),t.getMonth()+1,0),r=new Date(a);for(;r<=n;){if(je(r))return!1;r.setDate(r.getDate()+1)}return!0}function ld(e){const t=T(e,{throwError:!0});if(!t)throw new w("Invalid date provided to isFirstBusinessDayOfMonth");if(!je(t))return!1;const a=new Date(t.getFullYear(),t.getMonth(),1),n=new Date(a);for(;n<t;){if(je(n))return!1;n.setDate(n.getDate()+1)}return!0}function md(e,t){if(!Number.isInteger(e)||e<1e3||e>9999)throw new w("Year must be a 4-digit integer");if(!Number.isInteger(t)||t<1||t>12)throw new w("Month must be between 1 and 12");const a=[],n=new Date(e,t-1,1),r=new Date(e,t,0),i=new Date(n);for(;i<=r;)je(i)&&a.push(new Date(i)),i.setDate(i.getDate()+1);return a}var pd={US:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Independence Day",date:"07-04",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"}],UK:[{name:"New Year's Day",date:"01-01",type:"fixed"},{name:"Christmas Day",date:"12-25",type:"fixed"},{name:"Boxing Day",date:"12-26",type:"fixed"}]},fd=new Set;function ia(e,t,a){Pt(a);const n=T(e,{throwError:!0});if(!n)throw new w("Invalid date provided to isHoliday");const r=Dt(n,"YYYY-MM-DD");if(fd.has(r))return!0;if(t&&Array.isArray(t))for(const i of t){const s=T(i,{throwError:!1});if(s&&Dt(s,"YYYY-MM-DD")===r)return!0}return!1}function cn(e,t="US"){if(!Number.isInteger(e)||e<1e3||e>9999)throw new w("Year must be a 4-digit integer");const a=pd[t.toUpperCase()];if(!a)throw new w(`No holiday rules found for country: ${t}`);const n=[];for(const r of a)if(typeof r.date=="string"){const[i,s]=r.date.split("-").map(Number);n.push(new Date(e,i-1,s))}else typeof r.date=="function"&&n.push(r.date(e));return n}function yd(e,t){if(!Array.isArray(t))throw new w("Rules must be an array");pd[e.toUpperCase()]=t}function gd(e,t="US"){const a=T(e,{throwError:!0});if(!a)throw new w("Invalid date provided to getNextHoliday");const n=a.getFullYear(),r=cn(n,t),i=cn(n+1,t),o=[...r,...i].filter(d=>d>a).sort((d,c)=>d.getTime()-c.getTime());return o.length>0?o[0]:null}function hd(e){if(!Array.isArray(e))throw new w("holidayArray must be an array");for(const t of e){const a=T(t,{throwError:!0});if(!a)throw new w(`Invalid holiday date: ${t}`);const n=Dt(a,"YYYY-MM-DD");fd.add(n)}}function Dd(e,t,a){const n=T(e,{throwError:!0}),r=T(t,{throwError:!0});if(!n||!r)throw new w("Invalid start or end date");const{workingDays:i,holidays:s}=a,o=new Set(s.map(u=>{const l=T(u,{throwError:!1});return l?Dt(l,"YYYY-MM-DD"):null}).filter(u=>u!==null));let d=0;const c=new Date(n);for(c.setDate(c.getDate()+1);c<=r;){const u=c.getDay(),l=Dt(c,"YYYY-MM-DD");i.includes(u)&&!o.has(l)&&d++,c.setDate(c.getDate()+1)}return d}function bd(e,t,a){const n=T(e,{throwError:!0}),r=T(t,{throwError:!0});if(!n||!r)throw new w("Invalid start or end date");const{start:i,end:s,days:o}=a,[d,c]=i.split(":").map(Number),[u,l]=s.split(":").map(Number);let m=0;const g=new Date(n);for(;g<r;){const k=g.getDay();if(!o||o.includes(k)){const C=new Date(g);C.setHours(d,c,0,0);const H=new Date(g);H.setHours(u,l,0,0);const Y=new Date(Math.max(g.getTime(),C.getTime())),O=new Date(Math.min(r.getTime(),H.getTime()));Y<O&&(m+=(O.getTime()-Y.getTime())/(1e3*60))}g.setDate(g.getDate()+1),g.setHours(0,0,0,0)}return m/60}function wd(e,t,a){const n=T(e,{throwError:!0});if(!n)throw new w("Invalid date provided to addWorkingHours");const i=a||{start:"09:00",end:"17:00",days:[1,2,3,4,5]},{start:s,end:o,days:d}=i,[c,u]=s.split(":").map(Number),[l,m]=o.split(":").map(Number),g=l-c+(m-u)/60;let k=t;const C=new Date(n);for(;k>0;){const H=C.getDay();if(!d||d.includes(H)){const Y=Math.min(k,g);C.setTime(C.getTime()+Y*60*60*1e3),k-=Y}if(k>0){do C.setDate(C.getDate()+1);while(!d||!d.includes(C.getDay()));C.setHours(c,u,0,0)}}return C}function ln(e,t){const a=T(e,{throwError:!0});if(!a)throw new w("Invalid date provided to isWorkingHours");const r=t||{start:"09:00",end:"17:00",days:[1,2,3,4,5]},{start:i,end:s,days:o}=r,d=a.getDay();if(o&&!o.includes(d))return!1;const[c,u]=i.split(":").map(Number),[l,m]=s.split(":").map(Number),g=a.getHours(),k=a.getMinutes(),C=g*60+k,H=c*60+u,Y=l*60+m;return C>=H&&C<=Y}function xd(e,t){const a=T(e,{throwError:!0});if(!a)throw new w("Invalid date provided to getNextWorkingHour");const r=t||{start:"09:00",end:"17:00",days:[1,2,3,4,5]},{start:i,days:s}=r,[o,d]=i.split(":").map(Number),c=new Date(a);if(ln(c,r)&&(c.setHours(c.getHours()+1,0,0,0),ln(c,r)))return c;do c.setDate(c.getDate()+1);while(!s||!s.includes(c.getDay()));return c.setHours(o,d,0,0),c}function Td(e,t){const a=T(e,{throwError:!0}),n=T(t,{throwError:!0});if(!a||!n)throw new w("Invalid date or time provided to mergeDateTime");const r=new Date(a);return r.setHours(n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()),r}function vd(e){const t=T(e,{throwError:!0});if(!t)throw new w("Invalid date provided to timeOfDay");const a=t.getHours();return a>=5&&a<12?"Morning":a>=12&&a<17?"Afternoon":a>=17&&a<21?"Evening":"Night"}function Sd(e){const t=T(e,{throwError:!0});if(!t)throw new w("Invalid date provided to getISOWeek");const a=new Date(t),n=(t.getDay()+6)%7;a.setDate(a.getDate()-n+3);const r=new Date(a.getFullYear(),0,4),i=(a.getTime()-r.getTime())/864e5;return 1+Math.floor(i/7)}function Md(e){const t=T(e,{throwError:!0});if(!t)throw new w("Invalid date provided to getWeekOfMonth");const n=new Date(t.getFullYear(),t.getMonth(),1).getDay(),r=t.getDate()+n-1;return Math.ceil(r/7)}function kd(e,t=1){const a=T(e,{throwError:!0});if(!a)throw new w("Invalid date provided to getFiscalQuarter");if(t<1||t>12)throw new w("fiscalYearStart must be between 1 and 12");const r=(a.getMonth()+1-t+12)%12+1;return Math.ceil(r/3)}function Ad(e,t=1){const a=T(e,{throwError:!0});if(!a)throw new w("Invalid date provided to getFiscalYear");if(t<1||t>12)throw new w("fiscalYearStart must be between 1 and 12");const n=a.getFullYear();return a.getMonth()+1>=t?n:n-1}function Cd(e,t,a){const n=T(e,{throwError:!0}),r=T(t,{throwError:!0});if(!n||!r)throw new w("Invalid start or end date");const i=[],s=new Date(n);for(;s<=r;)switch(i.push(new Date(s)),a){case"weekly":s.setDate(s.getDate()+7);break;case"bi-weekly":s.setDate(s.getDate()+14);break;case"semi-monthly":s.getDate()===1?s.setDate(15):s.setMonth(s.getMonth()+1,1);break;case"monthly":s.setMonth(s.getMonth()+1);break}return i}function Id(e,t="northern"){const a=T(e,{throwError:!0});if(!a)throw new w("Invalid date provided to getSeason");const n=a.getMonth()+1,r=a.getDate();let i;return n===3&&r>=20||n===4||n===5||n===6&&r<21?i="Spring":n===6&&r>=21||n===7||n===8||n===9&&r<22?i="Summer":n===9&&r>=22||n===10||n===11||n===12&&r<21?i="Autumn":i="Winter",t==="southern"&&(i={Spring:"Autumn",Summer:"Winter",Autumn:"Spring",Winter:"Summer"}[i]),i}function Or(e,t="en-US",a="long"){if(!Number.isInteger(e)||e<1||e>12)throw new w("monthNumber must be between 1 and 12");return new Date(2e3,e-1,1).toLocaleDateString(t,{month:a})}function Ed(e,t){if(!Number.isInteger(e)||e<1||e>4)throw new w("Quarter must be between 1 and 4");if(!Number.isInteger(t)||t<1)throw new w("Year must be a positive integer");const a=(e-1)*3+1,n=[];for(let r=0;r<3;r++){const i=a+r;n.push({name:Or(i),number:i,firstDay:new Date(t,i-1,1),lastDay:new Date(t,i,0)})}return{quarter:e,year:t,months:n,startDate:new Date(t,(e-1)*3,1),endDate:new Date(t,e*3,0)}}function Fr(e,t){const a=T(e,{throwError:!0});if(!a)throw new w("Invalid date provided to nextOccurrence");if(!Number.isInteger(t)||t<0||t>6)throw new w("dayOfWeek must be between 0 and 6");const n=new Date(a),r=n.getDay(),i=(t-r+7)%7||7;return n.setDate(n.getDate()+i),n}function Rr(e,t){const a=T(e,{throwError:!0});if(!a)throw new w("Invalid date provided to previousOccurrence");if(!Number.isInteger(t)||t<0||t>6)throw new w("dayOfWeek must be between 0 and 6");const n=new Date(a),i=(n.getDay()-t+7)%7||7;return n.setDate(n.getDate()-i),n}function _d(e,t){const a=T(e,{throwError:!0});if(!a)throw new w("Invalid date provided to convertTimezone");try{const n=t.from||"UTC",r=t.to,i=mn(a,n),s=mn(a,r),o=i-s;return new Date(a.getTime()+o*60*1e3)}catch(n){throw new w(`Failed to convert timezone: ${n}`)}}function mn(e,t){try{const a=new Date(e.toLocaleString("en-US",{timeZone:"UTC"}));return(new Date(e.toLocaleString("en-US",{timeZone:t})).getTime()-a.getTime())/(1e3*60)}catch{return 0}}function Pr(e,t={}){const a=t.baseDate||new Date,n=e.toLowerCase().trim();try{const r=new Date(a);switch(n){case"now":return r;case"today":return we(r,"day");case"tomorrow":return le(we(r,"day"),1,"day");case"yesterday":return zt(we(r,"day"),1,"day");case"next week":return le(we(r,"week"),1,"week");case"last week":return zt(we(r,"week"),1,"week");case"next month":return le(we(r,"month"),1,"month");case"last month":return zt(we(r,"month"),1,"month");case"next year":return le(we(r,"year"),1,"year");case"last year":return zt(we(r,"year"),1,"year");case"beginning of week":return we(r,"week");case"end of week":return Sa(r,"week");case"beginning of month":return we(r,"month");case"end of month":return Sa(r,"month");case"beginning of year":return we(r,"year");case"end of year":return Sa(r,"year")}const i=["sunday","monday","tuesday","wednesday","thursday","friday","saturday"],s=n.match(/^next\s+(\w+)$/),o=n.match(/^last\s+(\w+)$/);if(s){const u=i.indexOf(s[1]);if(u!==-1)return Fr(r,u)}if(o){const u=i.indexOf(o[1]);if(u!==-1)return Rr(r,u)}const d=n.match(/^in\s+(\d+)\s+(day|days|week|weeks|month|months|year|years)$/);if(d){const u=parseInt(d[1],10),l=d[2].replace(/s$/,"");return le(r,u,l)}const c=n.match(/^(\d+)\s+(day|days|week|weeks|month|months|year|years)\s+ago$/);if(c){const u=parseInt(c[1],10),l=c[2].replace(/s$/,"");return zt(r,u,l)}if(t.strictParsing)throw new w(`Failed to parse natural language: ${n}`);return null}catch(r){if(t.strictParsing)throw new w(`Failed to parse natural language: ${r}`);return null}}function Nd(e,t){const a=T(e,{throwError:!0});if(!a)throw new w("Invalid start date provided to generateRecurringDates");const n=[new Date(a)],r=t.interval||1,i=t.maxOccurrences||100,s=t.endDate;let o=new Date(a),d=1;for(;d<i&&(!s||o<=s);){let c;switch(t.pattern){case"daily":c=le(o,r,"day");break;case"weekly":c=le(o,r*7,"day");break;case"biweekly":c=le(o,r*14,"day");break;case"monthly":c=le(o,r,"month");break;case"quarterly":c=le(o,r*3,"month");break;case"yearly":c=le(o,r,"year");break;case"weekdays":if(c=un(o),r>1)for(let u=1;u<r;u++)c=un(c);break;case"weekends":c=new Date(o);do c=le(c,1,"day");while(!ra(c));break;case"custom":c=Bm(o,t);break;default:throw new w(`Unsupported recurring pattern: ${t.pattern}`)}if(s&&c>s)break;o=c,n.push(new Date(o)),d++}return n}function Bm(e,t){const{daysOfWeek:a,daysOfMonth:n,monthsOfYear:r}=t;let i=le(e,1,"day"),s=0;const o=366;for(;s<o;){let d=!0;if(a&&!a.includes(i.getDay())&&(d=!1),n&&!n.includes(i.getDate())&&(d=!1),r&&!r.includes(i.getMonth()+1)&&(d=!1),d)break;i=le(i,1,"day"),s++}return i}function Br(e,t){const a=T(e,{throwError:!0}),n=T(t,{throwError:!0});if(!a||!n)throw new w("Invalid dates provided to compareDetailed");const r=a.getTime(),i=n.getTime(),s=r<i,o=r>i,d=r===i,c=Math.abs(i-r),u=Math.floor(c/(1e3*60*60*24*365.25)),l=Math.floor(c%(1e3*60*60*24*365.25)/(1e3*60*60*24*30.44)),m=Math.floor(c%(1e3*60*60*24*30.44)/(1e3*60*60*24)),g=Math.floor(c%(1e3*60*60*24)/(1e3*60*60)),k=Math.floor(c%(1e3*60*60)/(1e3*60)),C=Math.floor(c%(1e3*60)/1e3),H=c%1e3;return{isBefore:s,isAfter:o,isSame:d,difference:{years:u,months:l,days:m,hours:g,minutes:k,seconds:C,milliseconds:H}}}function Yd(e,t,a={}){const n=T(e,{throwError:!0}),r=T(t,{throwError:!0});if(!n||!r)throw new w("Invalid dates provided to calculateAdvancedDuration");const i=Br(n,r),{difference:s}=i,{precision:o=2,units:d=["year","month","day","hour","minute"],format:c="long",separator:u=", ",includeZeroValues:l=!1}=a,m=[];let g=0;const k={long:{year:["year","years"],month:["month","months"],day:["day","days"],hour:["hour","hours"],minute:["minute","minutes"],second:["second","seconds"]},short:{year:["yr","yrs"],month:["mo","mos"],day:["d","d"],hour:["h","h"],minute:["m","m"],second:["s","s"]},narrow:{year:["y","y"],month:["M","M"],day:["d","d"],hour:["h","h"],minute:["m","m"],second:["s","s"]}};for(const C of d){if(g>=o)break;const H=s[C];if(H>0||l){const Y=k[c][C],O=H===1?Y[0]:Y[1];m.push(`${H} ${O}`),g++}}return m.length>0?m.join(u):"0"}function zd(e,t,a,n){if(t<1||t>12)throw new w("Month must be between 1 and 12");if(a<0||a>6)throw new w("dayOfWeek must be between 0 and 6");if(n<-1||n===0||n>5)throw new w("Occurrence must be between 1-5 or -1 for last");const r=new Date(e,t,0);if(n===-1)for(let i=r.getDate();i>=1;i--){const s=new Date(e,t-1,i);if(s.getDay()===a)return s}else{let i=0;for(let s=1;s<=r.getDate();s++){const o=new Date(e,t-1,s);if(o.getDay()===a&&(i++,i===n))return o}}return null}function Od(e,t,a={startHour:9,endHour:17,workingDays:[1,2,3,4,5]}){const n=T(e,{throwError:!0}),r=T(t,{throwError:!0});if(!n||!r)throw new w("Invalid dates provided to calculateBusinessDaysAdvanced");let i=0;const s=new Date(n);for(;s<=r;)a.workingDays.includes(s.getDay())&&(!a.excludeHolidays||!ia(s))&&i++,s.setDate(s.getDate()+1);return i}function Fd(e,t){if(t.length===0)return null;const a=T(e,{throwError:!0});if(!a)throw new w("Invalid target date provided to findClosestDate");let n=null,r=1/0;for(const i of t){const s=T(i);if(!s)continue;const o=Math.abs(s.getTime()-a.getTime());o<r&&(r=o,n=s)}return n}function Rd(e,t={startMonth:1,startDay:1}){const a=T(e,{throwError:!0});if(!a)throw new w("Invalid date provided to getFiscalPeriodAdvanced");const n=a.getFullYear(),r=a.getMonth()+1,i=a.getDate();let s=n;(r<t.startMonth||r===t.startMonth&&i<t.startDay)&&(s=n-1);const o=new Date(s,t.startMonth-1,t.startDay),d=In(o,a,"month"),c=Math.floor(d/3)+1,u=t.startMonth+(c-1)*3-1,l=new Date(s,u,t.startDay),m=new Date(l.getFullYear(),l.getMonth()+3,l.getDate()-1);return{quarter:Math.max(1,Math.min(4,c)),year:s,startDate:l,endDate:m,isCurrentPeriod:En(new Date,l,m)}}function Lr(e,t,a){const n=T(e,{throwError:!0}),r=T(t,{throwError:!0});if(!n||!r)throw new w("Invalid dates provided to calculateWorkingHours");if(n>r)return 0;let i=0;const s=new Date(n);for(;s<r;){if(a.workingDays.includes(s.getDay())){if(a.excludeHolidays&&ia(s)){s.setDate(s.getDate()+1);continue}const o=new Date(s);o.setHours(a.startHour,0,0,0);const d=new Date(s);d.setHours(a.endHour,0,0,0);const c=new Date(Math.max(o.getTime(),n.getTime())),u=new Date(Math.min(d.getTime(),r.getTime()));if(c<u){const l=(u.getTime()-c.getTime())/36e5;i+=l}}s.setDate(s.getDate()+1)}return Math.max(0,i)}function Pd(e,t,a){const n=[];let r=a||new Date(e,0,1);const i=new Date(e+1,0,0);for(;r.getFullYear()===e;){let s,o;switch(t){case"weekly":s=le(r,6,"day"),o=le(s,3,"day");break;case"biweekly":s=le(r,13,"day"),o=le(s,3,"day");break;case"semimonthly":r.getDate()<=15?(s=new Date(r.getFullYear(),r.getMonth(),15),o=new Date(r.getFullYear(),r.getMonth(),20)):(s=new Date(r.getFullYear(),r.getMonth()+1,0),o=new Date(r.getFullYear(),r.getMonth()+1,5));break;case"monthly":s=new Date(r.getFullYear(),r.getMonth()+1,0),o=new Date(r.getFullYear(),r.getMonth()+1,5);break}switch(n.push({startDate:new Date(r),endDate:s,payDate:o}),t){case"weekly":r=le(r,7,"day");break;case"biweekly":r=le(r,14,"day");break;case"semimonthly":r.getDate()<=15?r=new Date(r.getFullYear(),r.getMonth(),16):r=new Date(r.getFullYear(),r.getMonth()+1,1);break;case"monthly":r=new Date(r.getFullYear(),r.getMonth()+1,1);break}if(r>i)break}return n}function Bd(e,t,a={startHour:9,endHour:17,workingDays:[1,2,3,4,5]}){const n=T(e,{throwError:!0});if(!n)throw new w("Invalid start date provided to calculateProjectMilestones");const r=[new Date(n)];let i=new Date(n);for(const s of t){let o=0;for(;o<s;)i=le(i,1,"day"),a.workingDays.includes(i.getDay())&&(!a.excludeHolidays||!ia(i))&&o++;r.push(new Date(i))}return r}function Ld(e,t,a=[],n={startHour:9,endHour:17,workingDays:[1,2,3,4,5]}){if(t<1||t>12)throw new w("Month must be between 1 and 12");const r=[],i=kr(new Date(e,t-1,1));for(let s=1;s<=i;s++){const o=new Date(e,t-1,s),d=ra(o),c=ia(o),u=n.workingDays.includes(o.getDay())&&!c,l=u?n.endHour-n.startHour:0,m=a.filter(g=>{const k=g.startDate,C=g.endDate||g.startDate;return o>=we(k,"day")&&o<=we(C,"day")});r.push({date:new Date(o),isWorkingDay:u,isHoliday:c,isWeekend:d,events:m,workingHours:l})}return r}function Hd(e,t=40,a=1.5,n){if(e<0||t<0)throw new w("Hours cannot be negative");const r=Math.min(e,t);let i=0,s=0;if(e>t){const u=e-t;n&&e>n?(s=e-n,i=n-t):i=u}const o=r,d=i*a,c=s*2;return{regularHours:r,overtimeHours:i,doubleTimeHours:s,totalRegularPay:o,totalOvertimePay:d,totalDoubleTimePay:c}}function Gd(e,t,a=30){const n=T(e,{throwError:!0});if(!n)throw new w("Invalid start date provided to generateShiftSchedule");const r=[];for(let i=0;i<a;i++){const s=le(n,i,"day");for(const o of t){const d=o.daysOn+o.daysOff;if(i%d<o.daysOn){const l=new Date(s);l.setHours(o.startHour,0,0,0);const m=new Date(l);m.setHours(l.getHours()+o.duration),r.push({date:new Date(s),shiftName:o.name,startTime:l,endTime:m,isWorkDay:!0})}else r.push({date:new Date(s),shiftName:o.name,startTime:new Date(s),endTime:new Date(s),isWorkDay:!1})}}return r}function Ud(e,t,a,n={startHour:9,endHour:17,workingDays:[1,2,3,4,5]}){const r=Lr(e,t,n),i=r<=a,s=Math.max(0,r-a),o=r/a*100;return{actualHours:r,slaHours:a,isCompliant:i,breachHours:s,percentageOfSLA:o}}function Wd(e,t={}){const a=T(e,{throwError:!0});if(!a)throw new w("Invalid date provided to formatISO");const{includeTime:n=!0,includeTimezone:r=!0,includeMilliseconds:i=!1}=t;let s=a.toISOString();return n?(i||(s=s.replace(/\.\d{3}Z$/,"Z")),r||(s=s.replace(/Z$/,""))):s=s.split("T")[0],s}function qd(e,t){const a=T(e,{throwError:!0});if(!a)throw new w("Invalid date provided to formatCustom");const n=[{token:"YYYY",fn:()=>a.getFullYear().toString()},{token:"MMMM",fn:()=>a.toLocaleString("en",{month:"long"})},{token:"dddd",fn:()=>a.toLocaleString("en",{weekday:"long"})},{token:"MMM",fn:()=>a.toLocaleString("en",{month:"short"})},{token:"ddd",fn:()=>a.toLocaleString("en",{weekday:"short"})},{token:"SSS",fn:()=>a.getMilliseconds().toString().padStart(3,"0")},{token:"YY",fn:()=>a.getFullYear().toString().slice(-2)},{token:"MM",fn:()=>(a.getMonth()+1).toString().padStart(2,"0")},{token:"DD",fn:()=>a.getDate().toString().padStart(2,"0")},{token:"Do",fn:()=>Lm(a.getDate())},{token:"dd",fn:()=>a.toLocaleString("en",{weekday:"narrow"})},{token:"HH",fn:()=>a.getHours().toString().padStart(2,"0")},{token:"hh",fn:()=>(a.getHours()%12||12).toString().padStart(2,"0")},{token:"mm",fn:()=>a.getMinutes().toString().padStart(2,"0")},{token:"ss",fn:()=>a.getSeconds().toString().padStart(2,"0")},{token:"M",fn:()=>(a.getMonth()+1).toString()},{token:"D",fn:()=>a.getDate().toString()},{token:"d",fn:()=>a.getDay().toString()},{token:"H",fn:()=>a.getHours().toString()},{token:"h",fn:()=>(a.getHours()%12||12).toString()},{token:"m",fn:()=>a.getMinutes().toString()},{token:"s",fn:()=>a.getSeconds().toString()},{token:"A",fn:()=>a.getHours()>=12?"PM":"AM"},{token:"a",fn:()=>a.getHours()>=12?"pm":"am"}];let r=t;const i=[];return r=r.replace(/\[([^\]]*)\]/g,(s,o)=>(i.push(o),`__ESCAPED_${i.length-1}__`)),n.forEach(({token:s,fn:o})=>{const d=s.replace(/[.*+?^${}()|[\]\\]/g,"\\$&");r=r.replace(new RegExp(d,"g"),o())}),i.forEach((s,o)=>{r=r.replace(`__ESCAPED_${o}__`,s)}),r}function Lm(e){const t=["th","st","nd","rd"],a=e%100;return e+(t[(a-20)%10]||t[a]||t[0])}function $d(e,t="en-US",a={}){const n=T(e,{throwError:!0});if(!n)throw new w("Invalid date provided to formatLocalized");try{return n.toLocaleDateString(t,a)}catch(r){throw new w(`Failed to format date with locale ${t}: ${r}`)}}function Vd(e,t="en-US",a){const n=T(e,{throwError:!0}),r=a||new Date;if(!n)throw new w("Invalid date provided to formatRelativeLocalized");try{const i=new Intl.RelativeTimeFormat(t,{numeric:"auto"}),s=(n.getTime()-r.getTime())/1e3;return Math.abs(s)<60?i.format(Math.round(s),"second"):Math.abs(s)<3600?i.format(Math.round(s/60),"minute"):Math.abs(s)<86400?i.format(Math.round(s/3600),"hour"):Math.abs(s)<2592e3?i.format(Math.round(s/86400),"day"):Math.abs(s)<31536e3?i.format(Math.round(s/2592e3),"month"):i.format(Math.round(s/31536e3),"year")}catch{return Ar(n,r)}}function jd(e,t){const a=T(e,{throwError:!0}),n=t||new Date;if(!a)throw new w("Invalid date provided to formatCalendar");const r=In(n,a,"day");return r===0?"Today":r===1?"Tomorrow":r===-1?"Yesterday":r>1&&r<=7?a.toLocaleDateString("en",{weekday:"long"}):r<-1&&r>=-7?`Last ${a.toLocaleDateString("en",{weekday:"long"})}`:Dt(a,"MMM DD, YYYY")}function Kd(e,t,a={}){const n=T(e,{throwError:!0});if(!n)throw new w("Invalid date provided to formatTimezone");try{const r={timeZone:t,year:"numeric",month:"2-digit",day:"2-digit"};return a.includeTime!==!1&&(r.hour="2-digit",r.minute="2-digit",a.includeSeconds&&(r.second="2-digit"),r.hour12=!a.use24Hour),a.includeDayOfWeek&&(r.weekday="long"),a.includeTimezone&&(r.timeZoneName="short"),n.toLocaleString(a.locale||"en-US",r)}catch(r){throw new w(`Failed to format date in timezone ${t}: ${r}`)}}function Hr(e,t={}){if(e<0)return`${Hr(Math.abs(e),t)} ago`;const{precision:a=2,format:n="long",separator:r=", ",includeZeroValues:i=!1}=t,s=[{name:"year",value:1e3*60*60*24*365},{name:"month",value:1e3*60*60*24*30},{name:"week",value:1e3*60*60*24*7},{name:"day",value:1e3*60*60*24},{name:"hour",value:1e3*60*60},{name:"minute",value:1e3*60},{name:"second",value:1e3}],o=[];let d=e,c=0;for(const u of s){if(c>=a)break;const l=Math.floor(d/u.value);if(l>0||i){const m={long:{singular:u.name,plural:`${u.name}s`},short:{singular:u.name.charAt(0),plural:u.name.charAt(0)},narrow:{singular:u.name.charAt(0),plural:u.name.charAt(0)}},g=l===1?m[n].singular:m[n].plural;o.push(`${l} ${g}`),c++}d%=u.value}return o.length>0?o.join(r):"0 seconds"}function Gr(e){if(typeof e!="string"||!/^\d{4}-\d{2}-\d{2}(?:T\d{2}:\d{2}:\d{2}(?:\.\d{3})?(?:Z|[+-]\d{2}:\d{2})?)?$/.test(e))return null;try{const a=new Date(e);return _n(a)?a:null}catch{return null}}function Ur(e,t){for(const a of t)try{const n=T(e);if(n&&Ir(e,a))return n}catch{continue}return null}function Qd(e){if(!e||typeof e!="string")return null;const t=e.trim(),a=Pr(t);if(a)return a;const n=Gr(t);if(n)return n;const i=Ur(t,["YYYY-MM-DD","MM/DD/YYYY","DD/MM/YYYY","MMM DD, YYYY","DD MMM YYYY"]);if(i)return i;try{const s=new Date(t);return _n(s)?s:null}catch{return null}}function Zd(e,t=new Date){var a;try{const n=mo(e),s=((a=new Intl.DateTimeFormat("en",{timeZone:e,timeZoneName:"short"}).formatToParts(t).find(h=>h.type==="timeZoneName"))==null?void 0:a.value)||"",o=new Date(t.toLocaleString("en-US",{timeZone:"UTC"})),c=(new Date(t.toLocaleString("en-US",{timeZone:e})).getTime()-o.getTime())/(1e3*60),u=Math.floor(Math.abs(c)/60),l=Math.abs(c)%60,g=`${c>=0?"+":"-"}${u.toString().padStart(2,"0")}:${l.toString().padStart(2,"0")}`,k=new Date(t.getFullYear(),0,1),C=new Date(t.getFullYear(),6,1),H=mn(k,e),Y=mn(C,e),O=c!==Math.max(H,Y);return{name:e,abbreviation:s,offset:c/60,isDST:O,offsetString:g,description:n?.description}}catch(n){throw new w(`Failed to get timezone info for ${e}: ${n}`)}}function Wr(){return Ym}function Jd(){const e=Nn();return{dateFormats:["YYYY-MM-DD","MM/DD/YYYY","DD/MM/YYYY","YYYY-MM-DD HH:mm:ss","DD MMM YYYY","MMM DD, YYYY","HH:mm:ss","hh:mm A","MM-DD","HH:mm","dddd","MMM","MMMM"],timeUnits:["millisecond","second","minute","hour","day","week","month","quarter","year"],timezones:Wr(),naturalLanguageExpressions:["now","today","tomorrow","yesterday","next week","last week","next month","last month","next year","last year","next monday","next tuesday","next wednesday","next thursday","next friday","next saturday","next sunday","last monday","last tuesday","last wednesday","last thursday","last friday","last saturday","last sunday","beginning of week","end of week","beginning of month","end of month","beginning of year","end of year","in 1 day","in 2 days","in 1 week","in 2 weeks","in 1 month","in 2 months","2 days ago","1 week ago","1 month ago"],recurringPatterns:["daily","weekly","biweekly","monthly","quarterly","yearly","weekdays","weekends","custom"],businessDayConfig:{defaultWorkingDays:[1,2,3,4,5],currentWorkingDays:e.workingDays,defaultHolidays:[],currentHolidays:Array.from(e.holidays),workingDayNames:{0:"Sunday",1:"Monday",2:"Tuesday",3:"Wednesday",4:"Thursday",5:"Friday",6:"Saturday"}},holidayConfig:{supportedCountries:Object.keys(Ga),availableHolidayRules:(()=>{const t={};for(const a in Ga)Object.prototype.hasOwnProperty.call(Ga,a)&&(t[a]=Ga[a].holidays.map(n=>({name:n.name,date:n.date,type:n.type})));return t})()},locales:{standard:Am,popular:Cm,regions:Im},workingTimeDefaults:{startHour:9,endHour:17,workingDays:[1,2,3,4,5],timezone:"UTC"},payrollFrequencies:["weekly","bi-weekly","biweekly","semi-monthly","monthly","quarterly","yearly"],seasonalConfig:{hemispheres:["northern","southern"],seasons:["Spring","Summer","Autumn","Winter"],timeOfDay:["Night","Morning","Afternoon","Evening"]},formatTokens:{YYYY:"4-digit year (2024)",YY:"2-digit year (24)",MMMM:"Full month name (January)",MMM:"Short month name (Jan)",MM:"2-digit month (01-12)",M:"Month number (1-12)",DD:"2-digit day (01-31)",D:"Day number (1-31)",Do:"Day with ordinal suffix (1st, 2nd, 3rd)",dddd:"Full weekday name (Monday)",ddd:"Short weekday name (Mon)",dd:"Narrow weekday (M)",HH:"24-hour format hours (00-23)",hh:"12-hour format hours (01-12)",H:"24-hour format hours (0-23)",h:"12-hour format hours (1-12)",mm:"Minutes (00-59)",m:"Minutes (0-59)",ss:"Seconds (00-59)",s:"Seconds (0-59)",SSS:"Milliseconds (000-999)",A:"AM/PM (uppercase)",a:"am/pm (lowercase)",Z:"Timezone offset (+05:00)",ZZ:"Timezone offset (+0500)",X:"Unix timestamp (seconds)",x:"Unix timestamp (milliseconds)"},fiscalYearDefaults:{startMonth:1,startDay:1},overtime:{defaultRegularHours:40,defaultOvertimeMultiplier:1.5,defaultDoubleTimeThreshold:60}}}var _e={parseDate:T,formatDate:Dt,addTime:le,subtractTime:zt,getDateDiff:In,isBetweenDates:En,isValidDate:_n,startOf:we,endOf:Sa,getDayOfYear:fo,getWeekOfYear:yo,isLeapYear:go,getDaysInMonth:kr,getRelativeTime:Ar,getTimezoneOffset:ho,createDate:Cr,CalendarDate:Do,utcNow:bo,toUTC:wo,getTimezoneString:xo,validateDateFormat:Ir,generateDateRange:To,formatDuration:vo,getQuarter:Er,getBusinessDays:So,calculateAge:Mo,configureWorkingDays:ad,configureHolidays:nd,getBusinessDayConfig:Nn,resetBusinessDayConfig:rd,isWeekend:ra,isWeekday:id,isBusinessDay:je,addBusinessDays:zr,subtractBusinessDays:sd,getNextBusinessDay:un,getPreviousBusinessDay:od,businessDaysInMonth:dd,differenceInBusinessDays:ud,isFirstBusinessDayOfMonth:ld,isLastBusinessDayOfMonth:cd,getBusinessDaysInMonth:md,cloneDate:ko,minDate:_r,maxDate:Nr,roundToNearest:Ao,compareDates:Co,getTimestamp:Io,fromTimestamp:Eo,randomDate:_o,copyTime:No,truncateToUnit:bt,setTime:Yo,isSameDay:zo,isSameWeek:Oo,isSameMonth:Fo,isSameYear:Ro,isAfter:Po,isBefore:Bo,isWithinRange:Lo,isValidRange:Ho,sortDates:Go,getEarliestDate:Uo,getLatestDate:Wo,removeDuplicateDates:qo,isFirstDayOfMonth:$o,isLastDayOfMonth:Vo,isFirstDayOfYear:jo,isLastDayOfYear:Ko,getWeekBoundaries:Qo,getMonthBoundaries:Zo,getYearBoundaries:Jo,getQuarterBoundaries:Xo,stripTime:Yr,getMidnight:ed,getNoon:td,isHoliday:ia,getHolidays:cn,addHolidayRules:yd,getNextHoliday:gd,addCustomHolidays:hd,calculateBusinessDaysCustom:Dd,getWorkingHoursBetween:bd,addWorkingHours:wd,isWorkingHours:ln,getNextWorkingHour:xd,mergeDateTime:Td,timeOfDay:vd,getISOWeek:Sd,getWeekOfMonth:Md,getFiscalQuarter:kd,getFiscalYear:Ad,getPayPeriods:Cd,getSeason:Id,getMonthName:Or,getMonthsInQuarter:Ed,nextOccurrence:Fr,previousOccurrence:Rr,convertTimezone:_d,parseNaturalLanguage:Pr,generateRecurringDates:Nd,compareDetailed:Br,calculateAdvancedDuration:Yd,getNthWeekdayOfMonth:zd,calculateBusinessDaysAdvanced:Od,findClosestDate:Fd,getFiscalPeriodAdvanced:Rd,calculateWorkingHours:Lr,generatePayrollPeriods:Pd,calculateProjectMilestones:Bd,generateBusinessCalendar:Ld,calculateOvertime:Hd,generateShiftSchedule:Gd,calculateSLACompliance:Ud,formatISO:Wd,formatCustom:qd,formatLocalized:$d,formatRelativeLocalized:Vd,formatCalendar:jd,formatTimezone:Kd,humanizeDuration:Hr,parseISO:Gr,parseMultipleFormats:Ur,smartParse:Qd,getTimezoneInfo:Zd,listTimezones:Wr,getConfigs:Jd},ir=_e;const Ui=Object.freeze(Object.defineProperty({__proto__:null,CalendarDate:Do,ChronoUtilz:_e,ChronoUtilzError:w,addBusinessDays:zr,addCustomHolidays:hd,addHolidayRules:yd,addTime:le,addWorkingHours:wd,businessDaysInMonth:dd,calculateAdvancedDuration:Yd,calculateAge:Mo,calculateBusinessDaysAdvanced:Od,calculateBusinessDaysCustom:Dd,calculateOvertime:Hd,calculateProjectMilestones:Bd,calculateSLACompliance:Ud,calculateWorkingHours:Lr,cloneDate:ko,compareDates:Co,compareDetailed:Br,configureHolidays:nd,configureTimezone:zm,configureWorkingDays:ad,convertTimezone:_d,copyTime:No,createDate:Cr,default:ir,differenceInBusinessDays:ud,endOf:Sa,findClosestDate:Fd,formatCalendar:jd,formatCustom:qd,formatDate:Dt,formatDuration:vo,formatISO:Wd,formatLocalized:$d,formatRelativeLocalized:Vd,formatTimezone:Kd,fromTimestamp:Eo,generateBusinessCalendar:Ld,generateDateRange:To,generatePayrollPeriods:Pd,generateRecurringDates:Nd,generateShiftSchedule:Gd,getBusinessDayConfig:Nn,getBusinessDays:So,getBusinessDaysInMonth:md,getConfigs:Jd,getDateDiff:In,getDayOfYear:fo,getDaysInMonth:kr,getEarliestDate:Uo,getFiscalPeriodAdvanced:Rd,getFiscalQuarter:kd,getFiscalYear:Ad,getHolidays:cn,getISOWeek:Sd,getLatestDate:Wo,getMidnight:ed,getMonthBoundaries:Zo,getMonthName:Or,getMonthsInQuarter:Ed,getNextBusinessDay:un,getNextHoliday:gd,getNextWorkingHour:xd,getNoon:td,getNthWeekdayOfMonth:zd,getPayPeriods:Cd,getPreviousBusinessDay:od,getQuarter:Er,getQuarterBoundaries:Xo,getQuarterDate:Rm,getRelativeTime:Ar,getSeason:Id,getTimestamp:Io,getTimezoneConfig:Om,getTimezoneInfo:Zd,getTimezoneOffset:ho,getTimezoneString:xo,getTimezonesByOffset:Nm,getTimezonesByRegion:Em,getUserTimezone:Cn,getWeekBoundaries:Qo,getWeekOfMonth:Md,getWeekOfYear:yo,getWorkingHoursBetween:bd,getYearBoundaries:Jo,humanizeDuration:Hr,isAfter:Po,isBefore:Bo,isBetweenDates:En,isBusinessDay:je,isFirstBusinessDayOfMonth:ld,isFirstDayOfMonth:$o,isFirstDayOfYear:jo,isHoliday:ia,isLastBusinessDayOfMonth:cd,isLastDayOfMonth:Vo,isLastDayOfYear:Ko,isLeapYear:go,isSameDay:zo,isSameMonth:Fo,isSameWeek:Oo,isSameYear:Ro,isValidDate:_n,isValidRange:Ho,isWeekday:id,isWeekend:ra,isWithinRange:Lo,isWorkingHours:ln,listTimezones:Wr,maxDate:Nr,mergeDateTime:Td,minDate:_r,nextOccurrence:Fr,parseDate:T,parseISO:Gr,parseMultipleFormats:Ur,parseNaturalLanguage:Pr,previousOccurrence:Rr,randomDate:_o,remainingTime:Fm,removeDuplicateDates:qo,resetBusinessDayConfig:rd,roundToNearest:Ao,searchTimezones:_m,setTime:Yo,smartParse:Qd,sortDates:Go,startOf:we,stripTime:Yr,subtractBusinessDays:sd,subtractTime:zt,timeOfDay:vd,toUTC:wo,truncateToUnit:bt,utcNow:bo,validateDateFormat:Ir},Symbol.toStringTag,{value:"Module"}));function Xd(){const e=ve(!1),t=ve(null);return{loading:e,error:t,getFunctions:()=>{const r={...ir,...Ui},i=Object.getOwnPropertyNames(r).filter(s=>typeof r[s]=="function").map(s=>({name:s,signature:r[s].toString().split("{")[0].trim()}));return{totalFunctions:i.length,functions:i}},getLibrary:()=>({...ir,...Ui})}}const Hm={class:"text-white-200"},Bt={__name:"LibraryStatus",setup(e){const{getFunctions:t}=Xd(),a=ve(0);return za(()=>{const n=t();a.value=n.totalFunctions}),(n,r)=>(_(),N("div",null,[p("p",Hm,"✓ "+K(a.value)+" functions loaded",1)]))}},Gm={class:"bg-indigo-700 text-white shadow-lg"},Um={class:"container mx-auto px-4 py-6"},Wm={class:"flex flex-col md:flex-row justify-between items-center"},qm={class:"mt-2 text-sm"},$m={class:"mt-4 md:mt-0"},Vm={class:"flex flex-wrap space-x-4 text-sm"},jm={class:"relative group"},Km={class:"absolute top-full left-0 bg-white text-gray-800 rounded-lg shadow-lg min-w-48 hidden group-hover:block z-10"},Qm={__name:"AppHeader",setup(e){return(t,a)=>(_(),N("header",Gm,[p("div",Um,[p("div",Wm,[p("div",null,[a[0]||(a[0]=p("h1",{class:"text-3xl font-bold"},"ChronoUtilz",-1)),p("div",qm,[q(Bt)])]),p("nav",$m,[p("ul",Vm,[p("li",null,[q(ge(Ie),{to:"/",class:"hover:text-indigo-200 transition"},{default:Ce(()=>[...a[1]||(a[1]=[ye("Home",-1)])]),_:1})]),p("li",null,[q(ge(Ie),{to:"/documentation",class:"hover:text-indigo-200 transition"},{default:Ce(()=>[...a[2]||(a[2]=[ye("Documentation",-1)])]),_:1})]),p("li",null,[q(ge(Ie),{to:"/api-docs",class:"hover:text-indigo-200 transition"},{default:Ce(()=>[...a[3]||(a[3]=[ye("API Docs",-1)])]),_:1})]),p("li",jm,[a[10]||(a[10]=p("a",{href:"#",class:"hover:text-indigo-200 transition"},"Playgrounds ▾",-1)),p("div",Km,[q(ge(Ie),{to:"/core-operations",class:"block px-4 py-2 hover:bg-indigo-50"},{default:Ce(()=>[...a[4]||(a[4]=[ye("Core Operations",-1)])]),_:1}),q(ge(Ie),{to:"/business-utilities",class:"block px-4 py-2 hover:bg-indigo-50"},{default:Ce(()=>[...a[5]||(a[5]=[ye("Business Utilities",-1)])]),_:1}),q(ge(Ie),{to:"/formatting-parsing",class:"block px-4 py-2 hover:bg-indigo-50"},{default:Ce(()=>[...a[6]||(a[6]=[ye("Formatting & Parsing",-1)])]),_:1}),q(ge(Ie),{to:"/timezone-localization",class:"block px-4 py-2 hover:bg-indigo-50"},{default:Ce(()=>[...a[7]||(a[7]=[ye("Timezone & Localization",-1)])]),_:1}),q(ge(Ie),{to:"/comparison-validation",class:"block px-4 py-2 hover:bg-indigo-50"},{default:Ce(()=>[...a[8]||(a[8]=[ye("Comparison & Validation",-1)])]),_:1}),q(ge(Ie),{to:"/utility-functions",class:"block px-4 py-2 hover:bg-indigo-50"},{default:Ce(()=>[...a[9]||(a[9]=[ye("Utility Functions",-1)])]),_:1})])])])])])])]))}},Zm={id:"app",class:"min-h-screen bg-gray-50"},Jm={__name:"App",setup(e){return(t,a)=>(_(),N("div",Zm,[q(Qm),p("main",null,[q(ge(lo))])]))}},Xm={class:"flex items-center mb-3"},ep={class:"text-indigo-600 mr-3"},tp={xmlns:"http://www.w3.org/2000/svg",class:"h-8 w-8",fill:"none",viewBox:"0 0 24 24",stroke:"currentColor"},ap=["d"],np={class:"text-gray-600"},rp={__name:"CategoryCard",props:{category:Object},setup(e){const t=a=>({"Core Operations":"M9 7h6m0 10v-3m-3-3h.01M9 17h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z","Business Utilities":"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4","Formatting & Parsing":"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z","Timezone & Localization":"M3.055 11H5a2 2 0 012 2v1a2 2 0 002 2 2 2 0 012 2v2.945M8 3.935V5.5A2.5 2.5 0 0010.5 8h.5a2 2 0 012 2 2 2 0 104 0 2 2 0 012-2h1.064M15 20.488V18a2 2 0 012-2h3.064M21 12a9 9 0 11-18 0 9 9 0 0118 0z","Comparison & Validation":"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z","Utility Functions":"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"})[a]||"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z";return(a,n)=>(_(),qs(ge(Ie),{to:e.category.path,class:"block bg-white p-6 rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300"},{default:Ce(()=>[p("div",Xm,[p("div",ep,[(_(),N("svg",tp,[p("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:t(e.category.name)},null,8,ap)]))]),p("span",{class:Ge([e.category.color,"px-2 py-1 rounded-full text-xs font-medium"])},K(e.category.name),3)]),p("p",np,K(e.category.description),1)]),_:1},8,["to"]))}},ip={class:"text-gray-800"},sp={id:"home",class:"py-16 bg-gradient-to-r from-indigo-500 to-purple-600 text-white"},op={class:"container mx-auto px-4 text-center"},dp={class:"flex flex-col sm:flex-row justify-center gap-4"},up={id:"documentation",class:"py-16 bg-white"},cp={class:"container mx-auto px-4"},lp={class:"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"},mp={__name:"Home",setup(e){const t=[{name:"Core Operations",path:"/core-operations",description:"Date arithmetic, comparisons, and basic operations",icon:"",color:"bg-blue-100 text-blue-800"},{name:"Business Utilities",path:"/business-utilities",description:"Working days, fiscal periods, payroll calculations",icon:"",color:"bg-green-100 text-green-800"},{name:"Formatting & Parsing",path:"/formatting-parsing",description:"Custom formats, localization, natural language",icon:"",color:"bg-purple-100 text-purple-800"},{name:"Timezone & Localization",path:"/timezone-localization",description:"Multi-timezone support and internationalization",icon:"",color:"bg-yellow-100 text-yellow-800"},{name:"Comparison & Validation",path:"/comparison-validation",description:"Date comparisons, range checks, validation rules",icon:"",color:"bg-red-100 text-red-800"},{name:"Utility Functions",path:"/utility-functions",description:"Helper functions and advanced utilities",icon:"",color:"bg-indigo-100 text-indigo-800"}];return(a,n)=>(_(),N("div",ip,[p("section",sp,[p("div",op,[n[2]||(n[2]=p("h2",{class:"text-4xl md:text-5xl font-bold mb-4"},"Simplify Date Operations",-1)),n[3]||(n[3]=p("p",{class:"text-xl mb-8 max-w-2xl mx-auto"},"136+ powerful functions for date manipulation, business logic, formatting, and parsing",-1)),p("div",dp,[n[1]||(n[1]=p("a",{href:"#documentation",class:"bg-white text-indigo-700 hover:bg-gray-100 font-semibold py-3 px-6 rounded-lg transition duration-300 shadow-lg"},"Get Started",-1)),q(ge(Ie),{to:"/documentation",class:"bg-transparent border-2 border-white hover:bg-white/10 font-semibold py-3 px-6 rounded-lg transition duration-300 flex items-center justify-center"},{default:Ce(()=>[...n[0]||(n[0]=[ye("Documentation",-1)])]),_:1})])])]),n[5]||(n[5]=Ot('<section class="py-16 bg-white"><div class="container mx-auto px-4"><h2 class="text-3xl font-bold text-center mb-12">Three Pillars Architecture</h2><div class="grid grid-cols-1 md:grid-cols-3 gap-8"><div class="bg-gray-50 p-6 rounded-lg shadow-md"><div class="text-indigo-600 mb-4"><svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path></svg></div><h3 class="text-xl font-semibold mb-2">Core Operations</h3><p class="text-gray-600">45+ functions for date manipulation and comparison including add/subtract time, date differences, and validation.</p></div><div class="bg-gray-50 p-6 rounded-lg shadow-md"><div class="text-indigo-600 mb-4"><svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path></svg></div><h3 class="text-xl font-semibold mb-2">Business Utilities</h3><p class="text-gray-600">55+ functions for real-world business logic including working days, fiscal periods, payroll, and SLA compliance.</p></div><div class="bg-gray-50 p-6 rounded-lg shadow-md"><div class="text-indigo-600 mb-4"><svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path></svg></div><h3 class="text-xl font-semibold mb-2">Formatting &amp; Parsing</h3><p class="text-gray-600">35+ functions for advanced presentation including custom formatting, localization, and natural language parsing.</p></div></div></div></section>',1)),p("section",up,[p("div",cp,[n[4]||(n[4]=p("h2",{class:"text-3xl font-bold text-center mb-12"},"Explore by Category",-1)),p("div",lp,[(_(),N(X,null,fe(t,r=>q(rp,{key:r.name,category:r},null,8,["category"])),64))])])])]))}},pp={class:"mb-8"},fp={class:"bg-white rounded-lg shadow-md p-4"},yp={class:"flex flex-wrap items-center justify-center space-x-4 text-sm"},sa={__name:"CategoryNavigation",props:{current:String},setup(e){const t=[{name:"Core Operations",path:"/core-operations"},{name:"Business Utilities",path:"/business-utilities"},{name:"Formatting & Parsing",path:"/formatting-parsing"},{name:"Timezone & Localization",path:"/timezone-localization"},{name:"Comparison & Validation",path:"/comparison-validation"},{name:"Utility Functions",path:"/utility-functions"}];return(a,n)=>(_(),N("nav",pp,[p("div",fp,[p("div",yp,[q(ge(Ie),{to:"/",class:"text-indigo-600 hover:text-indigo-800 transition"},{default:Ce(()=>[...n[0]||(n[0]=[ye("← Home",-1)])]),_:1}),(_(),N(X,null,fe(t,r=>q(ge(Ie),{key:r.path,to:r.path,class:Ge(["px-3 py-1 rounded-md transition",r.name===e.current?"bg-indigo-100 text-indigo-800 font-semibold":"hover:bg-gray-100 text-gray-700"])},{default:Ce(()=>[ye(K(r.name),1)]),_:2},1032,["to","class"])),64))])])]))}},gp={class:"bg-white rounded-lg shadow-md p-6"},hp={class:"text-lg font-semibold mb-4 text-gray-900"},Dp={class:"space-y-3"},bp=["onClick"],wp={class:"font-mono text-sm text-indigo-700"},xp={class:"text-gray-600 text-sm"},oa={__name:"FunctionGroup",props:{group:Object},setup(e){const t=a=>{const n=document.getElementById(`demo-${a}`);n&&(n.scrollIntoView({behavior:"smooth",block:"center"}),n.classList.add("ring-2","ring-indigo-400","ring-opacity-75"),setTimeout(()=>{n.classList.remove("ring-2","ring-indigo-400","ring-opacity-75")},2e3))};return(a,n)=>(_(),N("div",gp,[p("h3",hp,K(e.group.name),1),p("div",Dp,[(_(!0),N(X,null,fe(e.group.functions,r=>(_(),N("div",{key:r.name,class:"border-l-4 border-indigo-500 pl-3 cursor-pointer hover:bg-gray-50 transition-colors duration-200 rounded-r-md p-2 -ml-2",onClick:i=>t(r.name)},[p("div",wp,K(r.name),1),p("div",xp,K(r.description),1)],8,bp))),128))])]))}},Tp={class:"space-y-4"},vp=["id"],Sp={class:"flex items-center justify-between mb-2"},Mp={class:"font-semibold"},kp=["onClick"],Ap={class:"text-gray-600 text-sm mb-2"},Cp={class:"bg-gray-100 px-2 py-1 rounded text-sm font-mono"},Ip={class:"mt-3 space-y-3"},Ep={key:0,class:"grid grid-cols-2 gap-3"},_p={class:"block text-xs font-medium text-gray-600 mb-1"},Np=["onUpdate:modelValue"],Yp={key:0},zp=["onUpdate:modelValue"],Op={key:1,class:"flex items-end"},Fp={class:"text-xs text-gray-500"},Rp={key:1,class:"grid grid-cols-2 gap-3"},Pp=["onUpdate:modelValue"],Bp=["onUpdate:modelValue"],Lp=["onUpdate:modelValue"],Hp=["onUpdate:modelValue"],Gp={key:2},Up=["onUpdate:modelValue","placeholder"],Wp={key:3},qp={class:"block text-xs font-medium text-gray-600 mb-1"},$p=["onUpdate:modelValue","placeholder"],Vp={key:4,class:"space-y-2"},jp={class:"block text-xs font-medium text-gray-600 mb-1"},Kp=["onUpdate:modelValue"],Qp={key:5,class:"grid grid-cols-2 gap-3"},Zp=["onUpdate:modelValue"],Jp=["onUpdate:modelValue"],Xp={key:6,class:"space-y-2"},ef={key:0},tf=["onUpdate:modelValue"],af={key:1},nf={class:"block text-xs font-medium text-gray-600 mb-1"},rf=["onUpdate:modelValue","placeholder"],sf=["onUpdate:modelValue"],of={key:7,class:"text-xs text-gray-500 italic"},df={key:8},uf=["onUpdate:modelValue"],cf={key:9,class:"space-y-2"},lf={class:"block text-xs font-medium text-gray-600 mb-1"},mf=["onUpdate:modelValue"],pf={key:0,class:"mt-3 p-3 bg-green-50 rounded"},ff={class:"ml-2 text-green-700"},yf={key:1,class:"mt-3 p-3 bg-red-50 rounded"},gf={class:"ml-2 text-red-700"},da={__name:"InteractiveDemo",props:{functions:Array},setup(e){const t=e,{getLibrary:a}=Xd(),n=ve(null),r=ve({}),i=ve({}),s=ve({});za(()=>{n.value=a(),o()});const o=()=>{t.functions.forEach(h=>{if(h.needsCustom&&h.name==="getNthWeekdayOfMonth")s.value[h.name]={numberInputs:[...h.needsMultiNumber]};else if(h.needsCustom&&h.name==="parseMultipleFormats")s.value[h.name]={stringValue:"01/15/2024"};else if(h.name==="formatLocalized")s.value[h.name]={dateValue:new Date().toISOString().slice(0,16),stringValue:"en-US"};else if(h.name==="formatRelativeLocalized"){const b=new Date().toISOString().slice(0,16),x=new Date(Date.now()+1440*60*1e3).toISOString().slice(0,16);s.value[h.name]={dateInputs:[b,x],stringValue:"en-US"}}else if(h.name==="remainingTime"){const b=new Date().toISOString().slice(0,16),x=new Date(Date.now()+7200*1e3).toISOString().slice(0,16);s.value[h.name]={dateInputs:[x,b]}}else if(h.needsTimeUnit){const b=h.unitType==="businessDays"?5:h.unitType==="workingHours"?8:7;s.value[h.name]={amount:b,unit:"day"}}else if(h.needsMultiNumber)s.value[h.name]={numberInputs:Array.isArray(h.needsMultiNumber)?[...h.needsMultiNumber]:[0,0,0]};else if(h.needsUnit)s.value[h.name]={dateValue:new Date().toISOString().slice(0,16),unit:"day"};else if(h.needsFormat){const b={format:"YYYY-MM-DD"};h.needsStringInput&&(b.stringValue=d(h.name)),h.needsDateInput&&(b.dateValue=new Date().toISOString().slice(0,16)),s.value[h.name]=b}else if(h.needsNothing)s.value[h.name]={};else if(h.needsStringInput&&h.needsDateInput)s.value[h.name]={stringValue:d(h.name),dateValue:new Date().toISOString().slice(0,16)};else if(h.needsStringInput)s.value[h.name]={stringValue:d(h.name)};else if(h.needsNumberInput)s.value[h.name]={numberValue:c(h.name)};else if(h.needsDateInput)s.value[h.name]={dateValue:new Date().toISOString().slice(0,16)};else if(h.needsDateInputs){const b=new Date().toISOString().slice(0,16),x=new Date(Date.now()+1440*60*1e3).toISOString().slice(0,16),I=new Date(Date.now()+2880*60*1e3).toISOString().slice(0,16);s.value[h.name]={dateInputs:h.needsDateInputs===2?[b,x]:[b,x,I]}}})},d=h=>({createDate:"2024-01-01",isValidDate:"2024-01-01",calculateAge:"1990-01-01",parseDate:"2024-01-01",getPayPeriods:"biweekly",nextOccurrence:"monday",previousOccurrence:"friday",formatLocalized:"en-US",formatRelativeLocalized:"en-US",formatTimezone:"America/New_York",parseISO:"2024-01-01T10:30:00Z",parseMultipleFormats:"01/15/2024",smartParse:"January 15th, 2024",parseNaturalLanguage:"next Monday",validateDateFormat:"2024-01-01"})[h]||"",c=h=>({isLeapYear:new Date().getFullYear(),formatDuration:3661e3,fromTimestamp:Date.now(),getMonthsInQuarter:1})[h]||0,u=h=>({isLeapYear:"Year",formatDuration:"Duration (milliseconds)",fromTimestamp:"Timestamp",getMonthsInQuarter:"Quarter (1-4)"})[h]||"Value",l=h=>({isLeapYear:new Date().getFullYear().toString(),formatDuration:"3661000",fromTimestamp:Date.now().toString(),getMonthsInQuarter:"1"})[h]||"0",m=h=>({createDate:"Date String",isValidDate:"Date to Validate",calculateAge:"Birth Date",parseDate:"Date String",getPayPeriods:"Period Type",nextOccurrence:"Weekday",previousOccurrence:"Weekday"})[h]||"Input",g=h=>({createDate:"YYYY-MM-DD or MM/DD/YYYY",isValidDate:"Enter date to validate",calculateAge:"YYYY-MM-DD birth date",parseDate:"2024-01-01",getPayPeriods:"weekly, biweekly, monthly",nextOccurrence:"monday, tuesday, etc.",previousOccurrence:"friday, saturday, etc."})[h]||"Enter value",k=(h,b)=>({CalendarDate:["Year","Month (1-12)","Day"],setTime:["Hour (0-23)","Minute (0-59)","Second (0-59)"],getNthWeekdayOfMonth:["Year","Month (1-12)","Nth occurrence","Weekday (0=Sunday)"]})[h]?.[b]||`Value ${b+1}`,C=h=>h.unitType==="businessDays"?"Business Days":h.unitType==="workingHours"?"Working Hours":"Amount",H=h=>({businessDays:"business days",workingHours:"working hours"})[h]||"units",Y=(h,b)=>({copyTime:["Source Date","Target Date"],isAfter:["First Date","Second Date"],isBefore:["First Date","Second Date"],compareDates:["First Date","Second Date"],isBetweenDates:["Check Date","Start Date","End Date"]})[h]?.[b]||`Date ${b+1}`,O=h=>{if(n.value){r.value[h.name]=null,i.value[h.name]=null;try{const b=n.value[h.name];if(!b)throw new Error(`Function ${h.name} not found`);let x;const I=s.value[h.name];if(h.needsNothing)x=b();else if(h.needsCustom&&h.name==="getNthWeekdayOfMonth")x=b(...I.numberInputs);else if(h.needsCustom&&h.name==="parseMultipleFormats"){const B=["MM/DD/YYYY","DD/MM/YYYY","YYYY-MM-DD","MM-DD-YYYY"];x=b(I.stringValue||"01/15/2024",B)}else if(h.name==="formatLocalized"){const B=I.dateValue?new Date(I.dateValue):new Date,Z=I.stringValue||"en-US";x=b(B,Z,{})}else if(h.name==="formatRelativeLocalized"){const B=I.dateInputs.map(pe=>new Date(pe)),Z=I.stringValue||"en-US";x=b(B[0],Z,B[1])}else if(h.name==="remainingTime"){const B=I.dateInputs.map(Z=>new Date(Z));x=b(B[0],"hour",B[1])}else if(h.needsTimeUnit)h.unitType==="businessDays"||h.unitType==="workingHours"?x=b(new Date,I.amount):x=b(new Date,I.amount,I.unit);else if(h.needsMultiNumber)if(h.name==="setTime"){const B=I.dateValue?new Date(I.dateValue):new Date;x=b(B,...I.numberInputs)}else x=b(...I.numberInputs);else if(h.needsUnit){const B=I.dateValue?new Date(I.dateValue):new Date;if(h.name==="generateDateRange"){const Z=new Date(B.getTime()+2592e6);x=b(B,Z,I.unit)}else if(h.name==="getDateDiff"){const Z=new Date(B.getTime()+2592e6);x=b(B,Z,I.unit)}else x=b(B,I.unit)}else if(h.needsFormat){if(h.needsStringInput&&h.needsDateInput){const B=I.dateValue?new Date(I.dateValue):new Date;x=b(B,I.stringValue,I.format)}else if(h.needsStringInput)x=b(I.stringValue,I.format);else if(h.needsDateInput){const B=I.dateValue?new Date(I.dateValue):new Date;x=b(B,I.format)}}else if(h.needsStringInput&&h.needsDateInput){const B=I.dateValue?new Date(I.dateValue):new Date;x=b(B,I.stringValue)}else if(h.needsStringInput)x=b(I.stringValue);else if(h.needsNumberInput)x=b(I.numberValue);else if(h.needsDateInput){const B=I.dateValue?new Date(I.dateValue):new Date;x=b(B)}else if(h.needsDateInputs){const B=I.dateInputs.map(Z=>new Date(Z));x=b(...B)}else x=b(new Date);r.value[h.name]=x}catch(b){i.value[h.name]=b.message}}};return(h,b)=>(_(),N("div",Tp,[(_(!0),N(X,null,fe(e.functions,x=>(_(),N("div",{key:x.name,id:`demo-${x.name}`,class:"border rounded-lg p-4 transition-all duration-300 scroll-mt-8"},[p("div",Sp,[p("h4",Mp,K(x.name),1),p("button",{onClick:I=>O(x),class:"bg-indigo-600 text-white px-3 py-1 rounded text-sm hover:bg-indigo-700 transition"}," Try it ",8,kp)]),p("p",Ap,K(x.description),1),p("code",Cp,K(x.example),1),p("div",Ip,[x.needsTimeUnit&&s.value[x.name]?(_(),N("div",Ep,[p("div",null,[p("label",_p,K(C(x))+":",1),be(p("input",{"onUpdate:modelValue":I=>s.value[x.name].amount=I,type:"number",class:"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-indigo-500"},null,8,Np),[[Re,s.value[x.name].amount]])]),x.unitType?(_(),N("div",Op,[p("span",Fp,K(H(x.unitType)),1)])):(_(),N("div",Yp,[b[1]||(b[1]=p("label",{class:"block text-xs font-medium text-gray-600 mb-1"},"Unit:",-1)),be(p("select",{"onUpdate:modelValue":I=>s.value[x.name].unit=I,class:"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-indigo-500"},[...b[0]||(b[0]=[Ot('<option value="second">Second</option><option value="minute">Minute</option><option value="hour">Hour</option><option value="day">Day</option><option value="week">Week</option><option value="month">Month</option><option value="year">Year</option>',7)])],8,zp),[[Ha,s.value[x.name].unit]])]))])):x.needsCustom&&x.name==="getNthWeekdayOfMonth"&&s.value[x.name]?(_(),N("div",Rp,[p("div",null,[b[2]||(b[2]=p("label",{class:"block text-xs font-medium text-gray-600 mb-1"},"Year:",-1)),be(p("input",{"onUpdate:modelValue":I=>s.value[x.name].numberInputs[0]=I,type:"number",min:"1900",max:"2100",class:"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-indigo-500"},null,8,Pp),[[Re,s.value[x.name].numberInputs[0]]])]),p("div",null,[b[3]||(b[3]=p("label",{class:"block text-xs font-medium text-gray-600 mb-1"},"Month (1-12):",-1)),be(p("input",{"onUpdate:modelValue":I=>s.value[x.name].numberInputs[1]=I,type:"number",min:"1",max:"12",class:"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-indigo-500"},null,8,Bp),[[Re,s.value[x.name].numberInputs[1]]])]),p("div",null,[b[4]||(b[4]=p("label",{class:"block text-xs font-medium text-gray-600 mb-1"},"Nth occurrence:",-1)),be(p("input",{"onUpdate:modelValue":I=>s.value[x.name].numberInputs[2]=I,type:"number",min:"1",max:"5",class:"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-indigo-500"},null,8,Lp),[[Re,s.value[x.name].numberInputs[2]]])]),p("div",null,[b[6]||(b[6]=p("label",{class:"block text-xs font-medium text-gray-600 mb-1"},"Weekday:",-1)),be(p("select",{"onUpdate:modelValue":I=>s.value[x.name].numberInputs[3]=I,class:"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-indigo-500"},[...b[5]||(b[5]=[Ot('<option value="1">Monday</option><option value="2">Tuesday</option><option value="3">Wednesday</option><option value="4">Thursday</option><option value="5">Friday</option><option value="6">Saturday</option><option value="0">Sunday</option>',7)])],8,Hp),[[Ha,s.value[x.name].numberInputs[3]]])])])):x.needsStringInput&&s.value[x.name]?(_(),N("div",Gp,[b[7]||(b[7]=p("label",{class:"block text-xs font-medium text-gray-600 mb-1"},"Input:",-1)),be(p("input",{"onUpdate:modelValue":I=>s.value[x.name].stringValue=I,type:"text",placeholder:g(x.name),class:"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-indigo-500"},null,8,Up),[[Re,s.value[x.name].stringValue]])])):x.needsNumberInput&&s.value[x.name]?(_(),N("div",Wp,[p("label",qp,K(u(x.name))+":",1),be(p("input",{"onUpdate:modelValue":I=>s.value[x.name].numberValue=I,type:"number",placeholder:l(x.name),class:"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-indigo-500"},null,8,$p),[[Re,s.value[x.name].numberValue]])])):x.needsMultiNumber&&s.value[x.name]?(_(),N("div",Vp,[(_(!0),N(X,null,fe(s.value[x.name].numberInputs,(I,B)=>(_(),N("div",{key:B},[p("label",jp,K(k(x.name,B))+": ",1),be(p("input",{"onUpdate:modelValue":Z=>s.value[x.name].numberInputs[B]=Z,type:"number",class:"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-indigo-500"},null,8,Kp),[[Re,s.value[x.name].numberInputs[B]]])]))),128))])):x.needsUnit&&s.value[x.name]?(_(),N("div",Qp,[p("div",null,[b[8]||(b[8]=p("label",{class:"block text-xs font-medium text-gray-600 mb-1"},"Date:",-1)),be(p("input",{"onUpdate:modelValue":I=>s.value[x.name].dateValue=I,type:"datetime-local",class:"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-indigo-500"},null,8,Zp),[[Re,s.value[x.name].dateValue]])]),p("div",null,[b[10]||(b[10]=p("label",{class:"block text-xs font-medium text-gray-600 mb-1"},"Unit:",-1)),be(p("select",{"onUpdate:modelValue":I=>s.value[x.name].unit=I,class:"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-indigo-500"},[...b[9]||(b[9]=[Ot('<option value="second">Second</option><option value="minute">Minute</option><option value="hour">Hour</option><option value="day">Day</option><option value="week">Week</option><option value="month">Month</option><option value="year">Year</option>',7)])],8,Jp),[[Ha,s.value[x.name].unit]])])])):x.needsFormat&&s.value[x.name]?(_(),N("div",Xp,[x.needsDateInput?(_(),N("div",ef,[b[11]||(b[11]=p("label",{class:"block text-xs font-medium text-gray-600 mb-1"},"Date:",-1)),be(p("input",{"onUpdate:modelValue":I=>s.value[x.name].dateValue=I,type:"datetime-local",class:"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-indigo-500"},null,8,tf),[[Re,s.value[x.name].dateValue]])])):Ne("",!0),x.needsStringInput?(_(),N("div",af,[p("label",nf,K(m(x.name))+":",1),be(p("input",{"onUpdate:modelValue":I=>s.value[x.name].stringValue=I,type:"text",placeholder:g(x.name),class:"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-indigo-500"},null,8,rf),[[Re,s.value[x.name].stringValue]])])):Ne("",!0),p("div",null,[b[13]||(b[13]=p("label",{class:"block text-xs font-medium text-gray-600 mb-1"},"Format:",-1)),be(p("select",{"onUpdate:modelValue":I=>s.value[x.name].format=I,class:"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-indigo-500"},[...b[12]||(b[12]=[Ot('<option value="YYYY-MM-DD">YYYY-MM-DD</option><option value="MM/DD/YYYY">MM/DD/YYYY</option><option value="DD/MM/YYYY">DD/MM/YYYY</option><option value="YYYY-MM-DD HH:mm:ss">YYYY-MM-DD HH:mm:ss</option><option value="MMM DD, YYYY">MMM DD, YYYY</option>',5)])],8,sf),[[Ha,s.value[x.name].format]])])])):x.needsNothing?(_(),N("div",of," This function takes no parameters ")):x.needsDateInput&&s.value[x.name]?(_(),N("div",df,[b[14]||(b[14]=p("label",{class:"block text-xs font-medium text-gray-600 mb-1"},"Date:",-1)),be(p("input",{"onUpdate:modelValue":I=>s.value[x.name].dateValue=I,type:"datetime-local",class:"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-indigo-500"},null,8,uf),[[Re,s.value[x.name].dateValue]])])):x.needsDateInputs&&s.value[x.name]?(_(),N("div",cf,[(_(!0),N(X,null,fe(s.value[x.name].dateInputs,(I,B)=>(_(),N("div",{key:B},[p("label",lf,K(Y(x.name,B))+": ",1),be(p("input",{"onUpdate:modelValue":Z=>s.value[x.name].dateInputs[B]=Z,type:"datetime-local",class:"w-full px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-indigo-500"},null,8,mf),[[Re,s.value[x.name].dateInputs[B]]])]))),128))])):Ne("",!0)]),r.value[x.name]?(_(),N("div",pf,[b[15]||(b[15]=p("strong",{class:"text-green-800"},"Result:",-1)),p("span",ff,K(r.value[x.name]),1)])):Ne("",!0),i.value[x.name]?(_(),N("div",yf,[b[16]||(b[16]=p("strong",{class:"text-red-800"},"Error:",-1)),p("span",gf,K(i.value[x.name]),1)])):Ne("",!0)],8,vp))),128))]))}},hf={class:"container mx-auto px-4 py-8"},Df={class:"text-center mb-8"},bf={class:"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8"},wf={class:"bg-white rounded-lg shadow-md p-6"},xf={__name:"CoreOperations",setup(e){const t=[{name:"Date Arithmetic",functions:[{name:"addTime",description:"Add or subtract time from a date"},{name:"cloneDate",description:"Create a copy of a date"},{name:"createDate",description:"Create a new date object"},{name:"copyTime",description:"Copy time from one date to another"}]},{name:"Date Comparison",functions:[{name:"isAfter",description:"Check if date is after another date"},{name:"isBefore",description:"Check if date is before another date"},{name:"isBetweenDates",description:"Check if date is between two dates"},{name:"compareDates",description:"Compare two dates"}]},{name:"Date Validation",functions:[{name:"isValidDate",description:"Validate if input is a valid date"},{name:"isLeapYear",description:"Check if year is a leap year"},{name:"isWeekend",description:"Check if date falls on weekend"},{name:"isWeekday",description:"Check if date falls on weekday"}]}],a=[{name:"parseDate",example:'parseDate("2024-01-01", "YYYY-MM-DD")',description:"Parse date string with format",needsStringInput:!0,needsFormat:!0},{name:"createDate",example:'createDate("2024-01-01")',description:"Create a new date object",needsStringInput:!0},{name:"CalendarDate",example:"CalendarDate(2024, 1, 1)",description:"Create calendar date",needsMultiNumber:[2024,1,1]},{name:"utcNow",example:"utcNow()",description:"Get current UTC date",needsNothing:!0},{name:"cloneDate",example:"cloneDate(new Date())",description:"Create a copy of a date",needsDateInput:!0},{name:"randomDate",example:"randomDate(startDate, endDate)",description:"Generate random date between two dates",needsDateInputs:2},{name:"fromTimestamp",example:"fromTimestamp(1640995200000)",description:"Create date from timestamp",needsNumberInput:!0},{name:"addTime",example:'addTime(new Date(), 30, "day")',description:"Add time to a date",needsTimeUnit:!0},{name:"subtractTime",example:'subtractTime(new Date(), 30, "day")',description:"Subtract time from a date",needsTimeUnit:!0},{name:"getDateDiff",example:'getDateDiff(date1, date2, "days")',description:"Get difference between dates",needsDateInputs:2,needsUnit:!0},{name:"copyTime",example:"copyTime(sourceDate, targetDate)",description:"Copy time from one date to another",needsDateInputs:2},{name:"startOf",example:'startOf(new Date(), "month")',description:"Get start of time period",needsDateInput:!0,needsUnit:!0},{name:"endOf",example:'endOf(new Date(), "month")',description:"Get end of time period",needsDateInput:!0,needsUnit:!0},{name:"truncateToUnit",example:'truncateToUnit(new Date(), "day")',description:"Truncate date to unit",needsDateInput:!0,needsUnit:!0},{name:"roundToNearest",example:'roundToNearest(new Date(), 15, "minute")',description:"Round to nearest time interval",needsDateInput:!0,needsTimeUnit:!0},{name:"setTime",example:"setTime(new Date(), 14, 30, 0)",description:"Set time components (hour, minute, second)",needsDateInput:!0,needsMultiNumber:[14,30,0]},{name:"stripTime",example:"stripTime(new Date())",description:"Remove time component, keep date only",needsDateInput:!0},{name:"getMidnight",example:"getMidnight(new Date())",description:"Get midnight of given date",needsDateInput:!0},{name:"getNoon",example:"getNoon(new Date())",description:"Get noon of given date",needsDateInput:!0},{name:"mergeDateTime",example:"mergeDateTime(dateComponent, timeComponent)",description:"Merge date and time components",needsDateInputs:2},{name:"timeOfDay",example:"timeOfDay(new Date())",description:"Get time of day as milliseconds",needsDateInput:!0},{name:"formatDate",example:"formatDate(new Date())",description:"Format date to string",needsDateInput:!0,needsFormat:!0},{name:"formatDuration",example:"formatDuration(3661000)",description:"Format duration in milliseconds",needsNumberInput:!0},{name:"getRelativeTime",example:"getRelativeTime(new Date(), new Date())",description:"Get relative time between dates",needsDateInputs:2},{name:"getDayOfYear",example:"getDayOfYear(new Date())",description:"Get day of year (1-366)",needsDateInput:!0},{name:"getWeekOfYear",example:"getWeekOfYear(new Date())",description:"Get week of year",needsDateInput:!0},{name:"getISOWeek",example:"getISOWeek(new Date())",description:"Get ISO week number",needsDateInput:!0},{name:"getWeekOfMonth",example:"getWeekOfMonth(new Date())",description:"Get week of month",needsDateInput:!0},{name:"getDaysInMonth",example:"getDaysInMonth(new Date())",description:"Get number of days in month",needsDateInput:!0},{name:"getQuarter",example:"getQuarter(new Date())",description:"Get quarter (1-4)",needsDateInput:!0},{name:"getFiscalQuarter",example:"getFiscalQuarter(new Date())",description:"Get fiscal quarter",needsDateInput:!0},{name:"getFiscalYear",example:"getFiscalYear(new Date())",description:"Get fiscal year",needsDateInput:!0},{name:"getSeason",example:"getSeason(new Date())",description:"Get season name",needsDateInput:!0},{name:"getMonthName",example:"getMonthName(new Date())",description:"Get month name",needsDateInput:!0},{name:"getMonthsInQuarter",example:"getMonthsInQuarter(1)",description:"Get months in quarter",needsNumberInput:!0},{name:"isValidDate",example:'isValidDate("2024-01-01")',description:"Validate if input is a valid date",needsStringInput:!0},{name:"isLeapYear",example:"isLeapYear(2024)",description:"Check if year is a leap year",needsNumberInput:!0},{name:"getTimestamp",example:"getTimestamp(new Date())",description:"Get timestamp from date",needsDateInput:!0},{name:"generateDateRange",example:'generateDateRange(startDate, endDate, "day")',description:"Generate array of dates in range",needsDateInputs:2,needsUnit:!0},{name:"getPayPeriods",example:'getPayPeriods(new Date(), "biweekly")',description:"Get pay periods",needsDateInput:!0,needsStringInput:!0},{name:"toUTC",example:"toUTC(new Date())",description:"Convert date to UTC",needsDateInput:!0},{name:"nextOccurrence",example:'nextOccurrence(new Date(), "monday")',description:"Get next occurrence of weekday",needsDateInput:!0,needsStringInput:!0},{name:"previousOccurrence",example:'previousOccurrence(new Date(), "monday")',description:"Get previous occurrence of weekday",needsDateInput:!0,needsStringInput:!0}];return(n,r)=>(_(),N("div",hf,[p("div",Df,[r[0]||(r[0]=p("div",{class:"inline-flex items-center mb-4"},[p("div",null,[p("h1",{class:"text-3xl font-bold text-gray-900"},"Core Operations"),p("p",{class:"text-lg text-gray-600"},"Date manipulation & comparison functions")])],-1)),q(Bt)]),q(sa,{current:"Core Operations"}),p("div",bf,[(_(),N(X,null,fe(t,i=>q(oa,{key:i.name,group:i},null,8,["group"])),64))]),p("div",wf,[r[1]||(r[1]=p("h2",{class:"text-2xl font-semibold mb-4"},"Try Core Operations",-1)),q(da,{functions:a})])]))}},Tf={class:"container mx-auto px-4 py-8"},vf={class:"text-center mb-8"},Sf={class:"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8"},Mf={class:"bg-white rounded-lg shadow-md p-6"},kf={__name:"BusinessUtilities",setup(e){const t=[{name:"Business Day Configuration",functions:[{name:"configureWorkingDays",description:"Configure which days are working days"},{name:"configureHolidays",description:"Configure holiday dates"},{name:"getBusinessDayConfig",description:"Get current business day configuration"},{name:"resetBusinessDayConfig",description:"Reset business day configuration to defaults"}]},{name:"Basic Business Day Functions",functions:[{name:"isWeekend",description:"Check if date is weekend"},{name:"isWeekday",description:"Check if date is weekday"},{name:"isBusinessDay",description:"Check if date is business day"},{name:"addBusinessDays",description:"Add business days to date"},{name:"subtractBusinessDays",description:"Subtract business days from date"},{name:"getNextBusinessDay",description:"Get next business day"},{name:"getPreviousBusinessDay",description:"Get previous business day"}]},{name:"Advanced Business Logic",functions:[{name:"businessDaysInMonth",description:"Count business days in month"},{name:"differenceInBusinessDays",description:"Get business days between dates"},{name:"isFirstBusinessDayOfMonth",description:"Check if first business day of month"},{name:"isLastBusinessDayOfMonth",description:"Check if last business day of month"},{name:"getBusinessDaysInMonth",description:"Get all business days in month"},{name:"calculateBusinessDaysAdvanced",description:"Advanced business day calculation"},{name:"calculateBusinessDaysCustom",description:"Custom business day calculation"}]},{name:"Holiday Management",functions:[{name:"isHoliday",description:"Check if date is holiday"},{name:"getHolidays",description:"Get holidays for date range"},{name:"addHolidayRules",description:"Add holiday calculation rules"},{name:"getNextHoliday",description:"Get next holiday date"},{name:"addCustomHolidays",description:"Add custom holiday dates"}]},{name:"Working Hours & Payroll",functions:[{name:"getWorkingHoursBetween",description:"Calculate working hours between dates"},{name:"addWorkingHours",description:"Add working hours to date"},{name:"isWorkingHours",description:"Check if within working hours"},{name:"getNextWorkingHour",description:"Get next working hour"},{name:"generatePayrollPeriods",description:"Generate payroll periods"},{name:"calculateOvertime",description:"Calculate overtime hours"},{name:"generateShiftSchedule",description:"Generate shift schedules"}]},{name:"Project & Calendar Management",functions:[{name:"calculateProjectMilestones",description:"Calculate project milestone dates"},{name:"generateBusinessCalendar",description:"Generate business calendar"},{name:"calculateSLACompliance",description:"Calculate SLA compliance dates"},{name:"getNthWeekdayOfMonth",description:"Get Nth weekday of month"},{name:"getFiscalPeriodAdvanced",description:"Get advanced fiscal period info"},{name:"calculateWorkingHours",description:"Calculate total working hours"}]}],a=[{name:"isWeekend",example:"isWeekend(new Date())",description:"Check if date falls on weekend",needsDateInput:!0},{name:"isWeekday",example:"isWeekday(new Date())",description:"Check if date falls on weekday",needsDateInput:!0},{name:"isBusinessDay",example:"isBusinessDay(new Date())",description:"Check if date is a business day",needsDateInput:!0},{name:"addBusinessDays",example:"addBusinessDays(new Date(), 5)",description:"Add business days to date",needsTimeUnit:!0,unitType:"businessDays"},{name:"subtractBusinessDays",example:"subtractBusinessDays(new Date(), 3)",description:"Subtract business days from date",needsTimeUnit:!0,unitType:"businessDays"},{name:"getNextBusinessDay",example:"getNextBusinessDay(new Date())",description:"Get next business day",needsDateInput:!0},{name:"getPreviousBusinessDay",example:"getPreviousBusinessDay(new Date())",description:"Get previous business day",needsDateInput:!0},{name:"businessDaysInMonth",example:"businessDaysInMonth(new Date())",description:"Count business days in month",needsDateInput:!0},{name:"differenceInBusinessDays",example:"differenceInBusinessDays(startDate, endDate)",description:"Calculate business days between dates",needsDateInputs:2},{name:"isFirstBusinessDayOfMonth",example:"isFirstBusinessDayOfMonth(new Date())",description:"Check if first business day of month",needsDateInput:!0},{name:"isLastBusinessDayOfMonth",example:"isLastBusinessDayOfMonth(new Date())",description:"Check if last business day of month",needsDateInput:!0},{name:"getBusinessDaysInMonth",example:"getBusinessDaysInMonth(new Date())",description:"Get array of business days in month",needsDateInput:!0},{name:"calculateAge",example:'calculateAge("1990-01-01")',description:"Calculate age from birth date",needsStringInput:!0},{name:"isHoliday",example:"isHoliday(new Date())",description:"Check if date is a holiday",needsDateInput:!0},{name:"getHolidays",example:"getHolidays(startDate, endDate)",description:"Get holidays in date range",needsDateInputs:2},{name:"getNextHoliday",example:"getNextHoliday(new Date())",description:"Get next holiday from date",needsDateInput:!0},{name:"getWorkingHoursBetween",example:"getWorkingHoursBetween(startDate, endDate)",description:"Calculate working hours between dates",needsDateInputs:2},{name:"addWorkingHours",example:"addWorkingHours(new Date(), 8)",description:"Add working hours to date",needsTimeUnit:!0,unitType:"workingHours"},{name:"isWorkingHours",example:"isWorkingHours(new Date())",description:"Check if within working hours",needsDateInput:!0},{name:"getNextWorkingHour",example:"getNextWorkingHour(new Date())",description:"Get next working hour",needsDateInput:!0},{name:"getBusinessDays",example:"getBusinessDays(startDate, endDate)",description:"Get business days in range",needsDateInputs:2},{name:"getBusinessDayConfig",example:"getBusinessDayConfig()",description:"Get current business day configuration",needsNothing:!0},{name:"resetBusinessDayConfig",example:"resetBusinessDayConfig()",description:"Reset business day config to defaults",needsNothing:!0},{name:"getNthWeekdayOfMonth",example:"getNthWeekdayOfMonth(year, month, n, weekday)",description:"Get Nth occurrence of weekday in month",needsMultiNumber:[2024,1,2,1],needsCustom:!0},{name:"calculateBusinessDaysAdvanced",example:"calculateBusinessDaysAdvanced(startDate, endDate)",description:"Advanced business days calculation",needsDateInputs:2}];return(n,r)=>(_(),N("div",Tf,[p("div",vf,[r[0]||(r[0]=p("div",{class:"inline-flex items-center mb-4"},[p("div",null,[p("h1",{class:"text-3xl font-bold text-gray-900"},"Business Utilities"),p("p",{class:"text-lg text-gray-600"},"Working days, fiscal periods, and business logic")])],-1)),q(Bt)]),q(sa,{current:"Business Utilities"}),p("div",Sf,[(_(),N(X,null,fe(t,i=>q(oa,{key:i.name,group:i},null,8,["group"])),64))]),p("div",Mf,[r[1]||(r[1]=p("h2",{class:"text-2xl font-semibold mb-4"},"Try Business Utilities",-1)),q(da,{functions:a})])]))}},Af={class:"container mx-auto px-4 py-8"},Cf={class:"text-center mb-8"},If={class:"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8"},Ef={class:"bg-white rounded-lg shadow-md p-6"},_f={__name:"FormattingParsing",setup(e){const t=[{name:"Date Formatting",functions:[{name:"formatISO",description:"Format date in ISO 8601 format"},{name:"formatCustom",description:"Format date with custom pattern"},{name:"formatLocalized",description:"Format date with locale-specific formatting"},{name:"toISOString",description:"Convert date to ISO string"},{name:"formatDate",description:"Format date with specified pattern"}]},{name:"Date Parsing",functions:[{name:"parseISO",description:"Parse ISO 8601 date string"},{name:"parseMultipleFormats",description:"Parse date with multiple format attempts"},{name:"smartParse",description:"Intelligently parse various date formats"},{name:"parseNaturalLanguage",description:"Parse natural language date expressions"},{name:"parseDate",description:"Parse date string with format"}]},{name:"Duration & Time Formatting",functions:[{name:"formatDuration",description:"Format duration in human-readable format"},{name:"formatTime",description:"Format time component"},{name:"getRelativeTime",description:"Get relative time representation"},{name:"formatElapsed",description:"Format elapsed time"}]}],a=[{name:"formatISO",example:"formatISO(new Date())",description:"Format date in ISO 8601 format",needsDateInput:!0},{name:"formatCustom",example:'formatCustom(new Date(), "YYYY-MM-DD HH:mm:ss")',description:"Format date with custom pattern",needsDateInput:!0,needsFormat:!0},{name:"formatLocalized",example:'formatLocalized(new Date(), "en-US", {})',description:"Format date with locale-specific formatting",needsDateInput:!0,needsStringInput:!0},{name:"formatDate",example:'formatDate(new Date(), "YYYY-MM-DD")',description:"Format date with specified pattern",needsDateInput:!0,needsFormat:!0},{name:"formatCalendar",example:"formatCalendar(new Date())",description:"Format date in calendar format",needsDateInput:!0},{name:"formatTimezone",example:'formatTimezone(new Date(), "America/New_York")',description:"Format date with timezone",needsDateInput:!0,needsStringInput:!0},{name:"formatRelativeLocalized",example:'formatRelativeLocalized(new Date(), new Date(), "en-US")',description:"Format relative time with localization",needsDateInputs:2,needsStringInput:!0},{name:"parseISO",example:'parseISO("2024-01-01T10:30:00Z")',description:"Parse ISO 8601 date string",needsStringInput:!0},{name:"parseMultipleFormats",example:'parseMultipleFormats("01/15/2024", ["MM/DD/YYYY", "DD/MM/YYYY"])',description:"Parse date with multiple format attempts",needsStringInput:!0,needsCustom:!0},{name:"smartParse",example:'smartParse("January 15th, 2024")',description:"Intelligently parse various date formats",needsStringInput:!0},{name:"parseNaturalLanguage",example:'parseNaturalLanguage("next Monday")',description:"Parse natural language date expressions",needsStringInput:!0},{name:"parseDate",example:'parseDate("2024-01-01", "YYYY-MM-DD")',description:"Parse date string with format",needsStringInput:!0,needsFormat:!0},{name:"validateDateFormat",example:'validateDateFormat("2024-01-01", "YYYY-MM-DD")',description:"Validate if date matches format",needsStringInput:!0,needsFormat:!0},{name:"formatDuration",example:"formatDuration(3661000)",description:"Format duration in milliseconds to human-readable",needsNumberInput:!0},{name:"humanizeDuration",example:"humanizeDuration(3661000)",description:"Humanize duration in milliseconds",needsNumberInput:!0},{name:"getRelativeTime",example:"getRelativeTime(new Date(), new Date())",description:"Get relative time between dates",needsDateInputs:2}];return(n,r)=>(_(),N("div",Af,[p("div",Cf,[r[0]||(r[0]=p("div",{class:"inline-flex items-center mb-4"},[p("div",null,[p("h1",{class:"text-3xl font-bold text-gray-900"},"Formatting & Parsing"),p("p",{class:"text-lg text-gray-600"},"Date formatting and parsing functions")])],-1)),q(Bt)]),q(sa,{current:"Formatting & Parsing"}),p("div",If,[(_(),N(X,null,fe(t,i=>q(oa,{key:i.name,group:i},null,8,["group"])),64))]),p("div",Ef,[r[1]||(r[1]=p("h2",{class:"text-2xl font-semibold mb-4"},"Try Formatting & Parsing",-1)),q(da,{functions:a})])]))}},Nf={class:"container mx-auto px-4 py-8"},Yf={class:"text-center mb-8"},zf={class:"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8"},Of={class:"bg-white rounded-lg shadow-md p-6"},Ff={__name:"TimezoneLocalization",setup(e){const t=[{name:"Timezone Conversion",functions:[{name:"convertToTimezone",description:"Convert date to specific timezone"},{name:"convertFromTimezone",description:"Convert date from specific timezone"},{name:"toUTC",description:"Convert local time to UTC"},{name:"fromUTC",description:"Convert UTC to local time"}]},{name:"Timezone Formatting",functions:[{name:"formatInTimezone",description:"Format date in specific timezone"},{name:"formatToTimezone",description:"Format date to timezone"},{name:"formatWithTimezone",description:"Format date with timezone display"},{name:"formatUTC",description:"Format date in UTC"}]},{name:"Timezone Information",functions:[{name:"getTimezoneOffset",description:"Get timezone offset in minutes"},{name:"listTimezones",description:"Get list of available timezones"},{name:"getTimezoneInfo",description:"Get detailed timezone information"},{name:"isValidTimezone",description:"Check if timezone is valid"}]}],a=[{name:"convertToTimezone",example:'convertToTimezone(new Date(), "America/New_York")',description:"Convert date to specific timezone",needsDateInput:!0,needsStringInput:!0},{name:"convertFromTimezone",example:'convertFromTimezone(date, "Europe/London")',description:"Convert date from specific timezone",needsDateInput:!0,needsStringInput:!0},{name:"toUTC",example:"toUTC(new Date())",description:"Convert local time to UTC",needsDateInput:!0},{name:"fromUTC",example:"fromUTC(utcDate)",description:"Convert UTC to local time",needsDateInput:!0},{name:"formatInTimezone",example:'formatInTimezone(new Date(), "America/Los_Angeles")',description:"Format date in specific timezone",needsDateInput:!0,needsStringInput:!0},{name:"formatToTimezone",example:'formatToTimezone(new Date(), "Asia/Tokyo")',description:"Format date to timezone",needsDateInput:!0,needsStringInput:!0},{name:"formatWithTimezone",example:'formatWithTimezone(new Date(), "Europe/Paris")',description:"Format date with timezone display",needsDateInput:!0,needsStringInput:!0},{name:"formatUTC",example:"formatUTC(new Date())",description:"Format date in UTC",needsDateInput:!0},{name:"getTimezoneOffset",example:'getTimezoneOffset("America/Chicago")',description:"Get timezone offset in minutes",needsStringInput:!0},{name:"listTimezones",example:"listTimezones()",description:"Get list of available timezones",needsNothing:!0},{name:"getTimezoneInfo",example:'getTimezoneInfo("Australia/Sydney")',description:"Get detailed timezone information",needsStringInput:!0},{name:"isValidTimezone",example:'isValidTimezone("Pacific/Auckland")',description:"Check if timezone is valid",needsStringInput:!0},{name:"formatLocalized",example:'formatLocalized(new Date(), "en-US")',description:"Format date with locale-specific formatting",needsDateInput:!0,needsStringInput:!0},{name:"formatLocalizedShort",example:'formatLocalizedShort(new Date(), "de-DE")',description:"Format in short localized format",needsDateInput:!0,needsStringInput:!0},{name:"formatLocalizedLong",example:'formatLocalizedLong(new Date(), "fr-FR")',description:"Format in long localized format",needsDateInput:!0,needsStringInput:!0},{name:"getTimezoneAbbreviation",example:'getTimezoneAbbreviation("America/New_York")',description:"Get timezone abbreviation (EST, PST, etc.)",needsStringInput:!0},{name:"isDaylightSaving",example:'isDaylightSaving(new Date(), "America/New_York")',description:"Check if date is in daylight saving time",needsDateInput:!0,needsStringInput:!0},{name:"getTimezoneTransitions",example:'getTimezoneTransitions("Europe/London", 2024)',description:"Get DST transitions for timezone and year",needsStringInput:!0,needsNumberInput:!0}];return(n,r)=>(_(),N("div",Nf,[p("div",Yf,[r[0]||(r[0]=p("div",{class:"inline-flex items-center mb-4"},[p("div",null,[p("h1",{class:"text-3xl font-bold text-gray-900"},"Timezone & Localization"),p("p",{class:"text-lg text-gray-600"},"Multi-timezone and internationalization support")])],-1)),q(Bt)]),q(sa,{current:"Timezone & Localization"}),p("div",zf,[(_(),N(X,null,fe(t,i=>q(oa,{key:i.name,group:i},null,8,["group"])),64))]),p("div",Of,[r[1]||(r[1]=p("h2",{class:"text-2xl font-semibold mb-4"},"Try Timezone & Localization",-1)),q(da,{functions:a})])]))}},Rf={class:"container mx-auto px-4 py-8"},Pf={class:"text-center mb-8"},Bf={class:"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8"},Lf={class:"bg-white rounded-lg shadow-md p-6"},Hf={__name:"ComparisonValidation",setup(e){const t=[{name:"Date Comparison",functions:[{name:"isEqual",description:"Check if two dates are equal"},{name:"isAfter",description:"Check if date is after another date"},{name:"isBefore",description:"Check if date is before another date"},{name:"isBetween",description:"Check if date is between two dates"},{name:"compareDates",description:"Compare two dates and return result"},{name:"closestTo",description:"Find closest date from array of dates"}]},{name:"Same Period Checks",functions:[{name:"isSameDay",description:"Check if dates are on same day"},{name:"isSameWeek",description:"Check if dates are in same week"},{name:"isSameMonth",description:"Check if dates are in same month"},{name:"isSameYear",description:"Check if dates are in same year"},{name:"isSameQuarter",description:"Check if dates are in same quarter"},{name:"isSameHour",description:"Check if dates are in same hour"}]},{name:"Relative Time Checks",functions:[{name:"isToday",description:"Check if date is today"},{name:"isTomorrow",description:"Check if date is tomorrow"},{name:"isYesterday",description:"Check if date is yesterday"},{name:"isThisWeek",description:"Check if date is in this week"},{name:"isThisMonth",description:"Check if date is in this month"},{name:"isThisYear",description:"Check if date is in this year"},{name:"isFuture",description:"Check if date is in the future"},{name:"isPast",description:"Check if date is in the past"}]},{name:"Date Type Validation",functions:[{name:"isValidDate",description:"Check if input is a valid date"},{name:"isLeapYear",description:"Check if year is a leap year"},{name:"isWeekend",description:"Check if date falls on weekend"},{name:"isWeekday",description:"Check if date falls on weekday"},{name:"isBusinessDay",description:"Check if date is a business day"},{name:"isHoliday",description:"Check if date is a holiday"}]}],a=[{name:"isEqual",example:"isEqual(date1, date2)",description:"Check if two dates are equal",needsDateInputs:2},{name:"isAfter",example:"isAfter(date1, date2)",description:"Check if first date is after second date",needsDateInputs:2},{name:"isBefore",example:"isBefore(date1, date2)",description:"Check if first date is before second date",needsDateInputs:2},{name:"isBetween",example:"isBetween(date, startDate, endDate)",description:"Check if date is between two dates",needsDateInputs:3},{name:"compareDates",example:"compareDates(date1, date2)",description:"Compare two dates and return -1, 0, or 1",needsDateInputs:2},{name:"closestTo",example:"closestTo(targetDate, [date1, date2, date3])",description:"Find closest date from array of dates",needsDateInput:!0,needsCustom:!0},{name:"isSameDay",example:"isSameDay(date1, date2)",description:"Check if dates are on same day",needsDateInputs:2},{name:"isSameWeek",example:"isSameWeek(date1, date2)",description:"Check if dates are in same week",needsDateInputs:2},{name:"isSameMonth",example:"isSameMonth(date1, date2)",description:"Check if dates are in same month",needsDateInputs:2},{name:"isSameYear",example:"isSameYear(date1, date2)",description:"Check if dates are in same year",needsDateInputs:2},{name:"isSameQuarter",example:"isSameQuarter(date1, date2)",description:"Check if dates are in same quarter",needsDateInputs:2},{name:"isSameHour",example:"isSameHour(date1, date2)",description:"Check if dates are in same hour",needsDateInputs:2},{name:"isToday",example:"isToday(new Date())",description:"Check if date is today",needsDateInput:!0},{name:"isTomorrow",example:"isTomorrow(new Date())",description:"Check if date is tomorrow",needsDateInput:!0},{name:"isYesterday",example:"isYesterday(new Date())",description:"Check if date is yesterday",needsDateInput:!0},{name:"isThisWeek",example:"isThisWeek(new Date())",description:"Check if date is in this week",needsDateInput:!0},{name:"isThisMonth",example:"isThisMonth(new Date())",description:"Check if date is in this month",needsDateInput:!0},{name:"isThisYear",example:"isThisYear(new Date())",description:"Check if date is in this year",needsDateInput:!0},{name:"isFuture",example:"isFuture(new Date())",description:"Check if date is in the future",needsDateInput:!0},{name:"isPast",example:"isPast(new Date())",description:"Check if date is in the past",needsDateInput:!0},{name:"isValidDate",example:'isValidDate("2024-01-01")',description:"Check if input is a valid date",needsStringInput:!0},{name:"isLeapYear",example:"isLeapYear(2024)",description:"Check if year is a leap year",needsNumberInput:!0},{name:"isWeekend",example:"isWeekend(new Date())",description:"Check if date falls on weekend",needsDateInput:!0},{name:"isWeekday",example:"isWeekday(new Date())",description:"Check if date falls on weekday",needsDateInput:!0},{name:"isBusinessDay",example:"isBusinessDay(new Date())",description:"Check if date is a business day",needsDateInput:!0},{name:"isHoliday",example:"isHoliday(new Date())",description:"Check if date is a holiday",needsDateInput:!0},{name:"isWithinRange",example:"isWithinRange(date, startDate, endDate)",description:"Check if date is within range (inclusive)",needsDateInputs:3},{name:"isValidTimestamp",example:"isValidTimestamp(1640995200000)",description:"Check if timestamp is valid",needsNumberInput:!0},{name:"isDateString",example:'isDateString("2024-01-01")',description:"Check if string is a date string",needsStringInput:!0},{name:"isTimeString",example:'isTimeString("14:30:00")',description:"Check if string is a time string",needsStringInput:!0},{name:"isInRange",example:"isInRange(date, min, max)",description:"Check if date is in range",needsDateInputs:3},{name:"min",example:"min([date1, date2, date3])",description:"Find minimum (earliest) date",needsCustom:!0},{name:"max",example:"max([date1, date2, date3])",description:"Find maximum (latest) date",needsCustom:!0}];return(n,r)=>(_(),N("div",Rf,[p("div",Pf,[r[0]||(r[0]=p("div",{class:"inline-flex items-center mb-4"},[p("div",null,[p("h1",{class:"text-3xl font-bold text-gray-900"},"Comparison & Validation"),p("p",{class:"text-lg text-gray-600"},"Date comparison and validation functions")])],-1)),q(Bt)]),q(sa,{current:"Comparison & Validation"}),p("div",Bf,[(_(),N(X,null,fe(t,i=>q(oa,{key:i.name,group:i},null,8,["group"])),64))]),p("div",Lf,[r[1]||(r[1]=p("h2",{class:"text-2xl font-semibold mb-4"},"Try Comparison & Validation",-1)),q(da,{functions:a})])]))}},Gf={class:"container mx-auto px-4 py-8"},Uf={class:"text-center mb-8"},Wf={class:"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8"},qf={class:"bg-white rounded-lg shadow-md p-6"},$f={__name:"UtilityFunctions",setup(e){const t=[{name:"Age & Life Calculations",functions:[{name:"calculateAge",description:"Calculate age from birth date"},{name:"getAgeInYears",description:"Get age in years"},{name:"getAgeInMonths",description:"Get age in months"},{name:"getAgeInDays",description:"Get age in days"},{name:"getBirthYear",description:"Get birth year from age"},{name:"getRetirementDate",description:"Calculate retirement date"}]},{name:"Date Range Generation",functions:[{name:"generateDateRange",description:"Generate array of dates in range"},{name:"randomDate",description:"Generate random date between two dates"},{name:"getDateArray",description:"Get array of dates"},{name:"generateMonthRange",description:"Generate months in range"},{name:"generateYearRange",description:"Generate years in range"},{name:"getDatesBetween",description:"Get all dates between two dates"}]},{name:"Time Differences",functions:[{name:"daysBetween",description:"Calculate days between dates"},{name:"weeksBetween",description:"Calculate weeks between dates"},{name:"monthsBetween",description:"Calculate months between dates"},{name:"yearsBetween",description:"Calculate years between dates"},{name:"hoursBetween",description:"Calculate hours between dates"},{name:"minutesBetween",description:"Calculate minutes between dates"},{name:"secondsBetween",description:"Calculate seconds between dates"}]},{name:"Special Dates & Events",functions:[{name:"getEasterDate",description:"Calculate Easter date for year"},{name:"getMothersDayDate",description:"Calculate Mother's Day date"},{name:"getFathersDayDate",description:"Calculate Father's Day date"},{name:"getThanksgivingDate",description:"Calculate Thanksgiving date"},{name:"getMemorialDayDate",description:"Calculate Memorial Day date"},{name:"getLaborDayDate",description:"Calculate Labor Day date"}]},{name:"Timestamp Operations",functions:[{name:"getTimestamp",description:"Get timestamp from date"},{name:"fromTimestamp",description:"Create date from timestamp"},{name:"getUnixTimestamp",description:"Get Unix timestamp"},{name:"fromUnixTimestamp",description:"Create date from Unix timestamp"},{name:"timestampToDate",description:"Convert timestamp to date"},{name:"dateToTimestamp",description:"Convert date to timestamp"}]},{name:"Utility Helpers",functions:[{name:"sleep",description:"Pause execution for specified time"},{name:"retry",description:"Retry operation with delays"},{name:"debounce",description:"Debounce function calls"},{name:"throttle",description:"Throttle function calls"},{name:"memoize",description:"Cache function results"},{name:"benchmark",description:"Measure execution time"}]}],a=[{name:"calculateAge",example:'calculateAge("1990-01-01")',description:"Calculate age from birth date",needsStringInput:!0},{name:"getAgeInYears",example:"getAgeInYears(birthDate)",description:"Get age in years",needsDateInput:!0},{name:"getAgeInMonths",example:"getAgeInMonths(birthDate)",description:"Get age in months",needsDateInput:!0},{name:"getAgeInDays",example:"getAgeInDays(birthDate)",description:"Get age in days",needsDateInput:!0},{name:"getBirthYear",example:"getBirthYear(25)",description:"Get birth year from age",needsNumberInput:!0},{name:"getRetirementDate",example:"getRetirementDate(birthDate, 65)",description:"Calculate retirement date",needsDateInput:!0,needsNumberInput:!0},{name:"generateDateRange",example:'generateDateRange(startDate, endDate, "day")',description:"Generate array of dates in range",needsDateInputs:2,needsUnit:!0},{name:"randomDate",example:"randomDate(startDate, endDate)",description:"Generate random date between two dates",needsDateInputs:2},{name:"getDateArray",example:'getDateArray(startDate, count, "day")',description:"Get array of dates",needsDateInput:!0,needsNumberInput:!0,needsUnit:!0},{name:"generateMonthRange",example:"generateMonthRange(2024, 1, 12)",description:"Generate months in range",needsMultiNumber:[2024,1,12]},{name:"generateYearRange",example:"generateYearRange(2020, 2024)",description:"Generate years in range",needsMultiNumber:[2020,2024]},{name:"getDatesBetween",example:"getDatesBetween(startDate, endDate)",description:"Get all dates between two dates",needsDateInputs:2},{name:"daysBetween",example:"daysBetween(startDate, endDate)",description:"Calculate days between dates",needsDateInputs:2},{name:"weeksBetween",example:"weeksBetween(startDate, endDate)",description:"Calculate weeks between dates",needsDateInputs:2},{name:"monthsBetween",example:"monthsBetween(startDate, endDate)",description:"Calculate months between dates",needsDateInputs:2},{name:"yearsBetween",example:"yearsBetween(startDate, endDate)",description:"Calculate years between dates",needsDateInputs:2},{name:"hoursBetween",example:"hoursBetween(startDate, endDate)",description:"Calculate hours between dates",needsDateInputs:2},{name:"minutesBetween",example:"minutesBetween(startDate, endDate)",description:"Calculate minutes between dates",needsDateInputs:2},{name:"secondsBetween",example:"secondsBetween(startDate, endDate)",description:"Calculate seconds between dates",needsDateInputs:2},{name:"getEasterDate",example:"getEasterDate(2024)",description:"Calculate Easter date for year",needsNumberInput:!0},{name:"getMothersDayDate",example:"getMothersDayDate(2024)",description:"Calculate Mother's Day date",needsNumberInput:!0},{name:"getFathersDayDate",example:"getFathersDayDate(2024)",description:"Calculate Father's Day date",needsNumberInput:!0},{name:"getThanksgivingDate",example:"getThanksgivingDate(2024)",description:"Calculate Thanksgiving date",needsNumberInput:!0},{name:"getMemorialDayDate",example:"getMemorialDayDate(2024)",description:"Calculate Memorial Day date",needsNumberInput:!0},{name:"getLaborDayDate",example:"getLaborDayDate(2024)",description:"Calculate Labor Day date",needsNumberInput:!0},{name:"getTimestamp",example:"getTimestamp(new Date())",description:"Get timestamp from date",needsDateInput:!0},{name:"fromTimestamp",example:"fromTimestamp(1640995200000)",description:"Create date from timestamp",needsNumberInput:!0},{name:"getUnixTimestamp",example:"getUnixTimestamp(new Date())",description:"Get Unix timestamp (seconds)",needsDateInput:!0},{name:"fromUnixTimestamp",example:"fromUnixTimestamp(1640995200)",description:"Create date from Unix timestamp",needsNumberInput:!0},{name:"timestampToDate",example:"timestampToDate(1640995200000)",description:"Convert timestamp to date",needsNumberInput:!0},{name:"dateToTimestamp",example:"dateToTimestamp(new Date())",description:"Convert date to timestamp",needsDateInput:!0},{name:"sleep",example:"sleep(1000)",description:"Pause execution for milliseconds",needsNumberInput:!0},{name:"benchmark",example:"benchmark(() => someFunction())",description:"Measure execution time",needsCustom:!0},{name:"getDateDiff",example:'getDateDiff(date1, date2, "days")',description:"Get difference between dates in units",needsDateInputs:2,needsUnit:!0},{name:"addDays",example:"addDays(new Date(), 7)",description:"Add days to date",needsDateInput:!0,needsNumberInput:!0},{name:"subtractDays",example:"subtractDays(new Date(), 7)",description:"Subtract days from date",needsDateInput:!0,needsNumberInput:!0},{name:"getNextWeekday",example:"getNextWeekday(new Date(), 1)",description:"Get next occurrence of weekday",needsDateInput:!0,needsNumberInput:!0},{name:"getPreviousWeekday",example:"getPreviousWeekday(new Date(), 1)",description:"Get previous occurrence of weekday",needsDateInput:!0,needsNumberInput:!0},{name:"getLastDayOfMonth",example:"getLastDayOfMonth(new Date())",description:"Get last day of month",needsDateInput:!0},{name:"getFirstDayOfMonth",example:"getFirstDayOfMonth(new Date())",description:"Get first day of month",needsDateInput:!0},{name:"getDayOfWeek",example:"getDayOfWeek(new Date())",description:"Get day of week (0-6)",needsDateInput:!0}];return(n,r)=>(_(),N("div",Gf,[p("div",Uf,[r[0]||(r[0]=p("div",{class:"inline-flex items-center mb-4"},[p("div",null,[p("h1",{class:"text-3xl font-bold text-gray-900"},"Utility Functions"),p("p",{class:"text-lg text-gray-600"},"Helper functions and advanced utilities")])],-1)),q(Bt)]),q(sa,{current:"Utility Functions"}),p("div",Wf,[(_(),N(X,null,fe(t,i=>q(oa,{key:i.name,group:i},null,8,["group"])),64))]),p("div",qf,[r[1]||(r[1]=p("h2",{class:"text-2xl font-semibold mb-4"},"Try Utility Functions",-1)),q(da,{functions:a})])]))}},eu=(e,t)=>{const a=e.__vccOpts||e;for(const[n,r]of t)a[n]=r;return a},Vf={class:"documentation-container"},jf={class:"container mx-auto px-4 py-8 flex flex-col md:flex-row"},Kf={class:"w-full md:w-1/4 lg:w-1/5 pr-0 md:pr-8 mb-6 md:mb-0"},Qf={class:"bg-white rounded-lg shadow-sm p-4 sticky top-4"},Zf={class:"mb-6"},Jf={class:"space-y-1"},Xf={class:"flex items-center"},ey=["onClick"],ty=["onClick"],ay={key:0,class:"ml-4 mt-1 space-y-1 border-l-2 border-gray-200 pl-4"},ny=["onClick"],ry={class:"w-full md:w-3/4 lg:w-4/5"},iy={class:"bg-white rounded-lg shadow-sm p-6"},sy={id:"introduction",class:"mb-12"},oy={class:"mt-6 p-4 bg-blue-50 rounded-lg"},dy=["id"],uy={class:"text-2xl font-bold text-gray-900 mb-6"},cy=["id"],ly={class:"text-xl font-semibold text-gray-900"},my={class:"text-gray-600 mt-2"},py={class:"bg-gray-50 rounded-lg p-4 mb-4"},fy={class:"bg-gray-900 text-green-200 p-4 rounded-lg overflow-x-auto font-mono"},yy={key:0,class:"mb-4"},gy={class:"overflow-x-auto"},hy={class:"min-w-full divide-y divide-gray-200"},Dy={class:"bg-white divide-y divide-gray-200"},by={class:"px-4 py-2 whitespace-nowrap text-sm font-medium text-gray-900"},wy={class:"px-4 py-2 whitespace-nowrap text-sm text-gray-500"},xy={class:"px-4 py-2 text-sm text-gray-500"},Ty={key:1,class:"mb-4"},vy={class:"text-gray-700"},Sy={key:2,class:"bg-blue-50 rounded-lg p-4"},My={class:"bg-gray-900 text-green-200 p-4 rounded-lg overflow-x-auto font-mono"},ky={__name:"Documentation",setup(e){const t=ve("core"),a=ve(""),n=ve(new Set(["core"])),r=c=>{n.value.has(c)?n.value.delete(c):n.value.add(c)},i=c=>{t.value=c,n.value.add(c)},s=c=>{const u=document.getElementById(c);u&&u.scrollIntoView({behavior:"smooth",block:"start"})},o=ve([{id:"core",name:"Core Operations",items:[{id:"parseDate",name:"parseDate",description:"Safely parses a date string or timestamp into a Date object",usage:"parseDate(input, options)",parameters:[{name:"input",type:"string | number | Date",description:"The input to parse as a date"},{name:"options",type:"DateParseOptions",description:"Parsing options"}],returns:"A Date object or null if invalid and throwError is false",example:`// Parse a date string
const date = parseDate('2025-01-15');

// Parse with options
const date = parseDate('invalid-date', { 
  throwError: false, 
  fallback: new Date() 
});`},{id:"formatDate",name:"formatDate",description:"Formats a date according to the specified format",usage:"formatDate(date, format, timezone)",parameters:[{name:"date",type:"Date | string | number",description:"The date to format"},{name:"format",type:"DateFormat",description:"The format pattern"},{name:"timezone",type:"IANATimezone",description:"Optional timezone"}],returns:"Formatted date string",example:`// Format a date
const formatted = formatDate(new Date(), 'YYYY-MM-DD');

// Format with timezone
const formatted = formatDate(new Date(), 'MMM DD, YYYY HH:mm:ss', 'America/New_York');`},{id:"addTime",name:"addTime",description:"Adds time to a date",usage:"addTime(date, amount, unit, timezone)",parameters:[{name:"date",type:"Date | string | number",description:"The base date"},{name:"amount",type:"number",description:"The amount to add"},{name:"unit",type:"TimeUnit",description:"The time unit"},{name:"timezone",type:"IANATimezone",description:"Optional timezone (defaults to user's timezone)"}],returns:"A new Date with the added time",example:`// Add 5 days to a date
const newDate = addTime(new Date(), 5, 'day');

// Add 2 hours in a specific timezone
const newDate = addTime(new Date(), 2, 'hour', 'Europe/London');`},{id:"subtractTime",name:"subtractTime",description:"Subtracts time from a date",usage:"subtractTime(date, amount, unit, timezone)",parameters:[{name:"date",type:"Date | string | number",description:"The base date"},{name:"amount",type:"number",description:"The amount to subtract"},{name:"unit",type:"TimeUnit",description:"The time unit"},{name:"timezone",type:"IANATimezone",description:"Optional timezone (defaults to user's timezone)"}],returns:"A new Date with the subtracted time",example:`// Subtract 3 months from a date
const newDate = subtractTime(new Date(), 3, 'month');

// Subtract 30 minutes
const newDate = subtractTime(new Date(), 30, 'minute');`},{id:"getDateDiff",name:"getDateDiff",description:"Gets the difference between two dates in the specified unit",usage:"getDateDiff(date1, date2, unit, timezone)",parameters:[{name:"date1",type:"Date | string | number",description:"The first date"},{name:"date2",type:"Date | string | number",description:"The second date"},{name:"unit",type:"TimeUnit",description:"The time unit"},{name:"timezone",type:"IANATimezone",description:"Optional timezone (defaults to user's timezone)"}],returns:"The difference in the specified unit",example:`// Get difference in days
const diff = getDateDiff(new Date('2025-01-15'), new Date('2025-01-20'), 'day'); // 5

// Get difference in hours
const diff = getDateDiff(new Date('2025-01-15T10:00:00'), new Date('2025-01-15T15:30:00'), 'hour'); // 5.5`},{id:"startOf",name:"startOf",description:"Returns the start of a time period (day, week, month, year, etc.)",usage:"startOf(date, unit, timezone)",parameters:[{name:"date",type:"Date | string | number",description:"The input date"},{name:"unit",type:"TimeUnit",description:"The time unit to get start of"},{name:"timezone",type:"IANATimezone",description:"Optional timezone"}],returns:"A new Date at the start of the specified unit",example:`// Start of day
const startOfDay = startOf(new Date(), 'day');

// Start of month in timezone
const startOfMonth = startOf(new Date(), 'month', 'America/New_York');`},{id:"endOf",name:"endOf",description:"Returns the end of a time period (day, week, month, year, etc.)",usage:"endOf(date, unit, timezone)",parameters:[{name:"date",type:"Date | string | number",description:"The input date"},{name:"unit",type:"TimeUnit",description:"The time unit to get end of"},{name:"timezone",type:"IANATimezone",description:"Optional timezone"}],returns:"A new Date at the end of the specified unit",example:`// End of day
const endOfDay = endOf(new Date(), 'day');

// End of year in timezone
const endOfYear = endOf(new Date(), 'year', 'Europe/London');`},{id:"createDate",name:"createDate",description:"Creates a new Date with specified components",usage:"createDate(year, month, day, hour, minute, second, millisecond, timezone)",parameters:[{name:"year",type:"number",description:"The year"},{name:"month",type:"number",description:"The month (1-12)"},{name:"day",type:"number",description:"The day of month"},{name:"hour",type:"number",description:"The hour (0-23)"},{name:"minute",type:"number",description:"The minute (0-59)"},{name:"second",type:"number",description:"The second (0-59)"},{name:"millisecond",type:"number",description:"The millisecond (0-999)"},{name:"timezone",type:"IANATimezone",description:"Optional timezone"}],returns:"A new Date object with specified components",example:`// Create specific date
const date = createDate(2025, 1, 15, 10, 30, 0, 0);

// Create with timezone
const date = createDate(2025, 12, 31, 23, 59, 59, 999, 'UTC');`},{id:"utcNow",name:"utcNow",description:"Gets the current date and time in UTC",usage:"utcNow()",parameters:[],returns:"Current Date in UTC",example:`// Get current UTC time
const now = utcNow();`},{id:"toUTC",name:"toUTC",description:"Converts a date to UTC timezone",usage:"toUTC(date, fromTimezone)",parameters:[{name:"date",type:"Date | string | number",description:"The date to convert"},{name:"fromTimezone",type:"IANATimezone",description:"Source timezone"}],returns:"Date converted to UTC",example:`// Convert to UTC
const utcDate = toUTC(new Date(), 'America/New_York');`},{id:"generateDateRange",name:"generateDateRange",description:"Generates an array of dates between start and end dates",usage:"generateDateRange(startDate, endDate, interval, unit)",parameters:[{name:"startDate",type:"Date | string | number",description:"Start of range"},{name:"endDate",type:"Date | string | number",description:"End of range"},{name:"interval",type:"number",description:"Interval between dates"},{name:"unit",type:"TimeUnit",description:"Unit for interval"}],returns:"Array of Date objects",example:`// Generate daily range
const dates = generateDateRange('2025-01-01', '2025-01-07', 1, 'day');

// Generate weekly range
const dates = generateDateRange('2025-01-01', '2025-02-01', 1, 'week');`},{id:"getQuarter",name:"getQuarter",description:"Gets the quarter (1-4) for a given date",usage:"getQuarter(date)",parameters:[{name:"date",type:"Date | string | number",description:"The input date"}],returns:"Quarter number (1-4)",example:`// Get quarter
const quarter = getQuarter(new Date('2025-03-15')); // 1
const quarter = getQuarter(new Date('2025-07-15')); // 3`},{id:"getDayOfYear",name:"getDayOfYear",description:"Gets the day of year (1-366) for a given date",usage:"getDayOfYear(date)",parameters:[{name:"date",type:"Date | string | number",description:"The input date"}],returns:"Day of year number (1-366)",example:`// Get day of year
const dayOfYear = getDayOfYear(new Date('2025-01-01')); // 1
const dayOfYear = getDayOfYear(new Date('2025-12-31')); // 365`},{id:"getWeekOfYear",name:"getWeekOfYear",description:"Gets the week number of the year for a given date",usage:"getWeekOfYear(date)",parameters:[{name:"date",type:"Date | string | number",description:"The input date"}],returns:"Week number of year",example:`// Get week of year
const week = getWeekOfYear(new Date('2025-01-15')); // 3`},{id:"getDaysInMonth",name:"getDaysInMonth",description:"Gets the number of days in a month for a given date",usage:"getDaysInMonth(date)",parameters:[{name:"date",type:"Date | string | number",description:"The input date"}],returns:"Number of days in the month",example:`// Get days in month
const days = getDaysInMonth(new Date('2025-02-15')); // 28
const days = getDaysInMonth(new Date('2024-02-15')); // 29 (leap year)`},{id:"isLeapYear",name:"isLeapYear",description:"Checks if a given year is a leap year",usage:"isLeapYear(date)",parameters:[{name:"date",type:"Date | string | number",description:"The input date or year"}],returns:"True if leap year, false otherwise",example:`// Check leap year
const isLeap = isLeapYear(2024); // true
const isLeap = isLeapYear(2025); // false`},{id:"getRelativeTime",name:"getRelativeTime",description:'Gets relative time string (e.g., "2 hours ago", "in 3 days")',usage:"getRelativeTime(date, referenceDate)",parameters:[{name:"date",type:"Date | string | number",description:"The target date"},{name:"referenceDate",type:"Date | string | number",description:"Reference date (defaults to now)"}],returns:"Relative time string",example:`// Get relative time
const relative = getRelativeTime(new Date('2025-01-01'));
// Output: "2 days ago" or "in 2 days"`},{id:"cloneDate",name:"cloneDate",description:"Creates a copy of a Date object",usage:"cloneDate(date)",parameters:[{name:"date",type:"Date",description:"The date to clone"}],returns:"A new Date object copy",example:`// Clone a date
const original = new Date();
const clone = cloneDate(original);`},{id:"getTimestamp",name:"getTimestamp",description:"Gets the timestamp (milliseconds since epoch) for a date",usage:"getTimestamp(date)",parameters:[{name:"date",type:"Date | string | number",description:"The input date"}],returns:"Timestamp in milliseconds",example:`// Get timestamp
const timestamp = getTimestamp(new Date());
const timestamp = getTimestamp('2025-01-15');`},{id:"fromTimestamp",name:"fromTimestamp",description:"Creates a Date from a timestamp",usage:"fromTimestamp(timestamp)",parameters:[{name:"timestamp",type:"number",description:"Timestamp in milliseconds"}],returns:"Date object from timestamp",example:`// Create date from timestamp
const date = fromTimestamp(1735689600000);`},{id:"randomDate",name:"randomDate",description:"Generates a random date between two dates",usage:"randomDate(startDate, endDate)",parameters:[{name:"startDate",type:"Date | string | number",description:"Start of range"},{name:"endDate",type:"Date | string | number",description:"End of range"}],returns:"Random Date within range",example:`// Generate random date
const random = randomDate('2025-01-01', '2025-12-31');`},{id:"copyTime",name:"copyTime",description:"Copies time from one date to another date",usage:"copyTime(sourceDate, targetDate)",parameters:[{name:"sourceDate",type:"Date | string | number",description:"Source date for time"},{name:"targetDate",type:"Date | string | number",description:"Target date to copy time to"}],returns:"New Date with copied time",example:`// Copy time from one date to another
const result = copyTime('2025-01-01 15:30:00', '2025-12-31');
// Result: 2025-12-31 15:30:00`},{id:"truncateToUnit",name:"truncateToUnit",description:"Truncates date to specified unit (removes smaller units)",usage:"truncateToUnit(date, unit)",parameters:[{name:"date",type:"Date | string | number",description:"The input date"},{name:"unit",type:"TimeUnit",description:"Unit to truncate to"}],returns:"Date truncated to unit",example:`// Truncate to hour
const truncated = truncateToUnit(new Date(), 'hour');
// Removes minutes, seconds, milliseconds`},{id:"setTime",name:"setTime",description:"Sets specific time components on a date",usage:"setTime(date, hour, minute, second, millisecond)",parameters:[{name:"date",type:"Date | string | number",description:"The input date"},{name:"hour",type:"number",description:"Hour to set"},{name:"minute",type:"number",description:"Minute to set"},{name:"second",type:"number",description:"Second to set"},{name:"millisecond",type:"number",description:"Millisecond to set"}],returns:"New Date with time set",example:`// Set time to 2:30 PM
const newDate = setTime(new Date(), 14, 30, 0, 0);`},{id:"stripTime",name:"stripTime",description:"Removes time component from date (sets to 00:00:00.000)",usage:"stripTime(date)",parameters:[{name:"date",type:"Date | string | number",description:"The input date"}],returns:"Date with time stripped",example:`// Strip time component
const dateOnly = stripTime(new Date());
// Result: date at 00:00:00.000`},{id:"getMidnight",name:"getMidnight",description:"Gets midnight (00:00:00) for a given date",usage:"getMidnight(date, timezone)",parameters:[{name:"date",type:"Date | string | number",description:"The input date"},{name:"timezone",type:"IANATimezone",description:"Optional timezone"}],returns:"Date at midnight",example:`// Get midnight
const midnight = getMidnight(new Date());
const midnight = getMidnight(new Date(), 'America/New_York');`},{id:"getNoon",name:"getNoon",description:"Gets noon (12:00:00) for a given date",usage:"getNoon(date, timezone)",parameters:[{name:"date",type:"Date | string | number",description:"The input date"},{name:"timezone",type:"IANATimezone",description:"Optional timezone"}],returns:"Date at noon",example:`// Get noon
const noon = getNoon(new Date());
const noon = getNoon(new Date(), 'Europe/London');`},{id:"mergeDateTime",name:"mergeDateTime",description:"Merges date from one Date and time from another",usage:"mergeDateTime(dateSource, timeSource)",parameters:[{name:"dateSource",type:"Date | string | number",description:"Source for date component"},{name:"timeSource",type:"Date | string | number",description:"Source for time component"}],returns:"New Date with merged components",example:`// Merge date and time
const merged = mergeDateTime('2025-12-31', '15:30:00');
// Result: 2025-12-31 15:30:00`},{id:"timeOfDay",name:"timeOfDay",description:"Gets time of day category (morning, afternoon, evening, night)",usage:"timeOfDay(date)",parameters:[{name:"date",type:"Date | string | number",description:"The input date"}],returns:"Time of day string",example:`// Get time of day
const tod = timeOfDay(new Date('2025-01-15 08:00:00')); // "morning"
const tod = timeOfDay(new Date('2025-01-15 15:00:00')); // "afternoon"`},{id:"getISOWeek",name:"getISOWeek",description:"Gets ISO week number for a date",usage:"getISOWeek(date)",parameters:[{name:"date",type:"Date | string | number",description:"The input date"}],returns:"ISO week number",example:`// Get ISO week
const isoWeek = getISOWeek(new Date('2025-01-15'));`},{id:"getWeekOfMonth",name:"getWeekOfMonth",description:"Gets week number within the month",usage:"getWeekOfMonth(date)",parameters:[{name:"date",type:"Date | string | number",description:"The input date"}],returns:"Week number within month",example:`// Get week of month
const week = getWeekOfMonth(new Date('2025-01-15')); // 3`},{id:"getFiscalQuarter",name:"getFiscalQuarter",description:"Gets fiscal quarter for a date",usage:"getFiscalQuarter(date, fiscalYearStart)",parameters:[{name:"date",type:"Date | string | number",description:"The input date"},{name:"fiscalYearStart",type:"number",description:"Fiscal year start month (1-12)"}],returns:"Fiscal quarter number",example:`// Get fiscal quarter (fiscal year starts in July)
const fiscalQ = getFiscalQuarter(new Date('2025-03-15'), 7); // Q3`},{id:"getFiscalYear",name:"getFiscalYear",description:"Gets fiscal year for a date",usage:"getFiscalYear(date, fiscalYearStart)",parameters:[{name:"date",type:"Date | string | number",description:"The input date"},{name:"fiscalYearStart",type:"number",description:"Fiscal year start month (1-12)"}],returns:"Fiscal year",example:`// Get fiscal year (fiscal year starts in July)
const fiscalYear = getFiscalYear(new Date('2025-03-15'), 7); // 2024`},{id:"getPayPeriods",name:"getPayPeriods",description:"Generates pay periods for a date range",usage:"getPayPeriods(startDate, endDate, frequency)",parameters:[{name:"startDate",type:"Date | string | number",description:"Start date"},{name:"endDate",type:"Date | string | number",description:"End date"},{name:"frequency",type:"string",description:"Pay frequency (weekly, biweekly, monthly)"}],returns:"Array of pay period objects",example:`// Get biweekly pay periods
const periods = getPayPeriods('2025-01-01', '2025-12-31', 'biweekly');`},{id:"getSeason",name:"getSeason",description:"Gets the season for a given date",usage:"getSeason(date, hemisphere)",parameters:[{name:"date",type:"Date | string | number",description:"The input date"},{name:"hemisphere",type:"string",description:"Hemisphere (north/south)"}],returns:"Season name",example:`// Get season
const season = getSeason(new Date('2025-03-15'), 'north'); // "spring"
const season = getSeason(new Date('2025-03-15'), 'south'); // "autumn"`},{id:"getMonthName",name:"getMonthName",description:"Gets month name for a date",usage:"getMonthName(date, locale)",parameters:[{name:"date",type:"Date | string | number",description:"The input date"},{name:"locale",type:"string",description:"Locale for month name"}],returns:"Month name string",example:`// Get month name
const month = getMonthName(new Date('2025-03-15')); // "March"
const month = getMonthName(new Date('2025-03-15'), 'es'); // "marzo"`},{id:"getMonthsInQuarter",name:"getMonthsInQuarter",description:"Gets array of months in a quarter",usage:"getMonthsInQuarter(quarter)",parameters:[{name:"quarter",type:"number",description:"Quarter number (1-4)"}],returns:"Array of month numbers",example:`// Get months in quarter
const months = getMonthsInQuarter(1); // [1, 2, 3] (Jan, Feb, Mar)`},{id:"nextOccurrence",name:"nextOccurrence",description:"Finds next occurrence of a specific day/date pattern",usage:"nextOccurrence(date, pattern)",parameters:[{name:"date",type:"Date | string | number",description:"Reference date"},{name:"pattern",type:"string | object",description:'Pattern to match (e.g., "friday", {day: 15})'}],returns:"Next matching date",example:`// Next Friday
const nextFri = nextOccurrence(new Date(), 'friday');

// Next 15th of month
const next15th = nextOccurrence(new Date(), {day: 15});`},{id:"previousOccurrence",name:"previousOccurrence",description:"Finds previous occurrence of a specific day/date pattern",usage:"previousOccurrence(date, pattern)",parameters:[{name:"date",type:"Date | string | number",description:"Reference date"},{name:"pattern",type:"string | object",description:'Pattern to match (e.g., "monday", {day: 1})'}],returns:"Previous matching date",example:`// Previous Monday
const prevMon = previousOccurrence(new Date(), 'monday');

// Previous 1st of month
const prev1st = previousOccurrence(new Date(), {day: 1});`}]},{id:"business",name:"Business Utilities",items:[{id:"getBusinessDays",name:"getBusinessDays",description:"Calculates business days between two dates (excluding weekends and optionally holidays)",usage:"getBusinessDays(startDate, endDate, holidays)",parameters:[{name:"startDate",type:"Date | string",description:"Start date"},{name:"endDate",type:"Date | string",description:"End date"},{name:"holidays",type:"(Date | string)[]",description:"Optional array of holiday dates to exclude"}],returns:"Number of business days between dates",example:`// Calculate business days between two dates
const workDays = getBusinessDays('2025-05-01', '2025-05-15');

// With holidays
const workDays = getBusinessDays('2025-05-01', '2025-05-15', ['2025-05-05']);`},{id:"addBusinessDays",name:"addBusinessDays",description:"Adds the specified number of business days to a date",usage:"addBusinessDays(date, businessDays, timezone)",parameters:[{name:"date",type:"Date | string | number",description:"The starting date"},{name:"businessDays",type:"number",description:"Number of business days to add"},{name:"timezone",type:"IANATimezone",description:"Optional timezone (defaults to user's timezone)"}],returns:"A new date with business days added",example:`// Add 5 business days to Friday, Jan 5, 2024
const newDate = addBusinessDays(new Date('2024-01-05'), 5);
// Returns: Friday, Jan 12, 2024 (skips weekends)`},{id:"isBusinessDay",name:"isBusinessDay",description:"Checks if a date is a business day (weekday and not a holiday)",usage:"isBusinessDay(date)",parameters:[{name:"date",type:"Date | string | number",description:"The date to check"}],returns:"True if the date is a business day",example:`// Check if a date is a business day
const isWorkDay = isBusinessDay(new Date('2024-01-08')); // true (Monday, not holiday)
const isWorkDay = isBusinessDay(new Date('2024-01-01')); // false (New Year's Day)`},{id:"calculateAge",name:"calculateAge",description:"Calculates age in years from a birth date",usage:"calculateAge(birthDate, referenceDate)",parameters:[{name:"birthDate",type:"Date | string | number",description:"The birth date"},{name:"referenceDate",type:"Date | string | number",description:"Reference date (defaults to today)"}],returns:"Age in years",example:`// Calculate age
const age = calculateAge('1990-05-15'); // Age as of today
const age = calculateAge('1990-05-15', '2025-01-01'); // Age as of specific date`},{id:"configureWorkingDays",name:"configureWorkingDays",description:"Configures which days are considered working days",usage:"configureWorkingDays(workingDays)",parameters:[{name:"workingDays",type:"number[]",description:"Array of working day numbers (0=Sunday, 1=Monday, etc.)"}],returns:"Configuration object",example:`// Configure working days (Monday-Friday)
configureWorkingDays([1, 2, 3, 4, 5]);

// Configure working days (Sunday-Thursday)
configureWorkingDays([0, 1, 2, 3, 4]);`},{id:"configureHolidays",name:"configureHolidays",description:"Configures holiday dates for business day calculations",usage:"configureHolidays(holidays)",parameters:[{name:"holidays",type:"(Date | string)[]",description:"Array of holiday dates"}],returns:"Configuration object",example:`// Configure holidays
configureHolidays([
  '2025-01-01', // New Year's Day
  '2025-07-04', // Independence Day
  '2025-12-25'  // Christmas
]);`},{id:"getBusinessDayConfig",name:"getBusinessDayConfig",description:"Gets current business day configuration",usage:"getBusinessDayConfig()",parameters:[],returns:"Current business day configuration",example:`// Get configuration
const config = getBusinessDayConfig();
// Returns: { workingDays: [1,2,3,4,5], holidays: [...] }`},{id:"resetBusinessDayConfig",name:"resetBusinessDayConfig",description:"Resets business day configuration to defaults",usage:"resetBusinessDayConfig()",parameters:[],returns:"Default configuration",example:`// Reset to defaults
resetBusinessDayConfig();`},{id:"isWeekend",name:"isWeekend",description:"Checks if a date falls on a weekend",usage:"isWeekend(date)",parameters:[{name:"date",type:"Date | string | number",description:"The date to check"}],returns:"True if weekend, false otherwise",example:`// Check weekend
const weekend = isWeekend(new Date('2025-01-11')); // true (Saturday)
const weekend = isWeekend(new Date('2025-01-13')); // false (Monday)`},{id:"isWeekday",name:"isWeekday",description:"Checks if a date falls on a weekday",usage:"isWeekday(date)",parameters:[{name:"date",type:"Date | string | number",description:"The date to check"}],returns:"True if weekday, false otherwise",example:`// Check weekday
const weekday = isWeekday(new Date('2025-01-13')); // true (Monday)
const weekday = isWeekday(new Date('2025-01-11')); // false (Saturday)`},{id:"subtractBusinessDays",name:"subtractBusinessDays",description:"Subtracts business days from a date",usage:"subtractBusinessDays(date, businessDays, timezone)",parameters:[{name:"date",type:"Date | string | number",description:"The starting date"},{name:"businessDays",type:"number",description:"Number of business days to subtract"},{name:"timezone",type:"IANATimezone",description:"Optional timezone"}],returns:"Date with business days subtracted",example:`// Subtract 5 business days
const newDate = subtractBusinessDays(new Date('2025-01-15'), 5);`},{id:"getNextBusinessDay",name:"getNextBusinessDay",description:"Gets the next business day after a given date",usage:"getNextBusinessDay(date, timezone)",parameters:[{name:"date",type:"Date | string | number",description:"The reference date"},{name:"timezone",type:"IANATimezone",description:"Optional timezone"}],returns:"Next business day",example:`// Get next business day
const nextBD = getNextBusinessDay(new Date('2025-01-10')); // Friday -> Monday`},{id:"getPreviousBusinessDay",name:"getPreviousBusinessDay",description:"Gets the previous business day before a given date",usage:"getPreviousBusinessDay(date, timezone)",parameters:[{name:"date",type:"Date | string | number",description:"The reference date"},{name:"timezone",type:"IANATimezone",description:"Optional timezone"}],returns:"Previous business day",example:`// Get previous business day
const prevBD = getPreviousBusinessDay(new Date('2025-01-13')); // Monday -> Friday`},{id:"businessDaysInMonth",name:"businessDaysInMonth",description:"Calculates total business days in a month",usage:"businessDaysInMonth(date)",parameters:[{name:"date",type:"Date | string | number",description:"Date in the target month"}],returns:"Number of business days in month",example:`// Business days in January 2025
const count = businessDaysInMonth(new Date('2025-01-15')); // 23`},{id:"differenceInBusinessDays",name:"differenceInBusinessDays",description:"Calculates difference in business days between two dates",usage:"differenceInBusinessDays(startDate, endDate)",parameters:[{name:"startDate",type:"Date | string | number",description:"Start date"},{name:"endDate",type:"Date | string | number",description:"End date"}],returns:"Difference in business days",example:`// Difference in business days
const diff = differenceInBusinessDays('2025-01-01', '2025-01-15'); // 10`},{id:"isFirstBusinessDayOfMonth",name:"isFirstBusinessDayOfMonth",description:"Checks if date is the first business day of the month",usage:"isFirstBusinessDayOfMonth(date)",parameters:[{name:"date",type:"Date | string | number",description:"The date to check"}],returns:"True if first business day of month",example:`// Check first business day
const isFirst = isFirstBusinessDayOfMonth(new Date('2025-01-02')); // true`},{id:"isLastBusinessDayOfMonth",name:"isLastBusinessDayOfMonth",description:"Checks if date is the last business day of the month",usage:"isLastBusinessDayOfMonth(date)",parameters:[{name:"date",type:"Date | string | number",description:"The date to check"}],returns:"True if last business day of month",example:`// Check last business day
const isLast = isLastBusinessDayOfMonth(new Date('2025-01-31')); // true`},{id:"getBusinessDaysInMonth",name:"getBusinessDaysInMonth",description:"Gets array of all business days in a month",usage:"getBusinessDaysInMonth(date)",parameters:[{name:"date",type:"Date | string | number",description:"Date in the target month"}],returns:"Array of business day dates",example:`// Get all business days in month
const businessDays = getBusinessDaysInMonth(new Date('2025-01-15'));`},{id:"isHoliday",name:"isHoliday",description:"Checks if a date is a configured holiday",usage:"isHoliday(date)",parameters:[{name:"date",type:"Date | string | number",description:"The date to check"}],returns:"True if holiday, false otherwise",example:`// Check if holiday
const holiday = isHoliday(new Date('2025-12-25')); // true (Christmas)`},{id:"getHolidays",name:"getHolidays",description:"Gets list of configured holidays for a year",usage:"getHolidays(year)",parameters:[{name:"year",type:"number",description:"The target year"}],returns:"Array of holiday dates",example:`// Get holidays for 2025
const holidays = getHolidays(2025);`},{id:"addHolidayRules",name:"addHolidayRules",description:"Adds recurring holiday rules",usage:"addHolidayRules(rules)",parameters:[{name:"rules",type:"object[]",description:"Array of holiday rule objects"}],returns:"Updated holiday configuration",example:`// Add holiday rules
addHolidayRules([
  { name: 'Christmas', month: 12, day: 25 },
  { name: 'New Year', month: 1, day: 1 }
]);`},{id:"getNextHoliday",name:"getNextHoliday",description:"Gets the next holiday after a given date",usage:"getNextHoliday(date)",parameters:[{name:"date",type:"Date | string | number",description:"Reference date"}],returns:"Next holiday date and info",example:`// Get next holiday
const nextHoliday = getNextHoliday(new Date('2025-01-15'));`},{id:"addCustomHolidays",name:"addCustomHolidays",description:"Adds custom holiday dates",usage:"addCustomHolidays(holidays)",parameters:[{name:"holidays",type:"(Date | string)[]",description:"Array of custom holiday dates"}],returns:"Updated holiday list",example:`// Add custom holidays
addCustomHolidays(['2025-03-17', '2025-10-31']); // St. Patrick's, Halloween`},{id:"calculateBusinessDaysCustom",name:"calculateBusinessDaysCustom",description:"Calculates business days with custom working days and holidays",usage:"calculateBusinessDaysCustom(startDate, endDate, workingDays, holidays)",parameters:[{name:"startDate",type:"Date | string | number",description:"Start date"},{name:"endDate",type:"Date | string | number",description:"End date"},{name:"workingDays",type:"number[]",description:"Custom working days array"},{name:"holidays",type:"(Date | string)[]",description:"Custom holidays array"}],returns:"Number of business days",example:`// Custom calculation
const days = calculateBusinessDaysCustom(
  '2025-01-01', '2025-01-31',
  [1, 2, 3, 4, 5], // Mon-Fri
  ['2025-01-01', '2025-01-20'] // Custom holidays
);`},{id:"getWorkingHoursBetween",name:"getWorkingHoursBetween",description:"Calculates working hours between two dates",usage:"getWorkingHoursBetween(startDate, endDate, hoursPerDay)",parameters:[{name:"startDate",type:"Date | string | number",description:"Start date/time"},{name:"endDate",type:"Date | string | number",description:"End date/time"},{name:"hoursPerDay",type:"number",description:"Working hours per day (default 8)"}],returns:"Total working hours",example:`// Get working hours
const hours = getWorkingHoursBetween(
  '2025-01-01 09:00', '2025-01-05 17:00', 8
);`},{id:"addWorkingHours",name:"addWorkingHours",description:"Adds working hours to a date",usage:"addWorkingHours(date, hours, workingHours)",parameters:[{name:"date",type:"Date | string | number",description:"Starting date/time"},{name:"hours",type:"number",description:"Hours to add"},{name:"workingHours",type:"object",description:"Working hours configuration"}],returns:"Date after adding working hours",example:`// Add 16 working hours
const result = addWorkingHours(
  '2025-01-01 09:00', 16,
  { start: 9, end: 17, daysPerWeek: 5 }
);`},{id:"isWorkingHours",name:"isWorkingHours",description:"Checks if a time falls within working hours",usage:"isWorkingHours(date, workingHours)",parameters:[{name:"date",type:"Date | string | number",description:"Date/time to check"},{name:"workingHours",type:"object",description:"Working hours configuration"}],returns:"True if within working hours",example:`// Check working hours
const isWorking = isWorkingHours(
  '2025-01-01 14:30',
  { start: 9, end: 17 }
); // true`},{id:"getNextWorkingHour",name:"getNextWorkingHour",description:"Gets the next working hour after a given time",usage:"getNextWorkingHour(date, workingHours)",parameters:[{name:"date",type:"Date | string | number",description:"Reference date/time"},{name:"workingHours",type:"object",description:"Working hours configuration"}],returns:"Next working hour date/time",example:`// Get next working hour
const nextWorking = getNextWorkingHour(
  '2025-01-01 18:00', // After hours
  { start: 9, end: 17 }
); // Next day at 9:00 AM`},{id:"getWeekBoundaries",name:"getWeekBoundaries",description:"Gets start and end dates of the week containing a date",usage:"getWeekBoundaries(date, startOfWeek)",parameters:[{name:"date",type:"Date | string | number",description:"Date within the week"},{name:"startOfWeek",type:"number",description:"Start of week (0=Sunday, 1=Monday)"}],returns:"Object with start and end dates",example:`// Get week boundaries
const week = getWeekBoundaries(new Date('2025-01-15'), 1); // Monday start
// Returns: { start: Date, end: Date }`},{id:"getMonthBoundaries",name:"getMonthBoundaries",description:"Gets start and end dates of the month containing a date",usage:"getMonthBoundaries(date)",parameters:[{name:"date",type:"Date | string | number",description:"Date within the month"}],returns:"Object with start and end dates",example:`// Get month boundaries
const month = getMonthBoundaries(new Date('2025-01-15'));
// Returns: { start: '2025-01-01', end: '2025-01-31' }`},{id:"getYearBoundaries",name:"getYearBoundaries",description:"Gets start and end dates of the year containing a date",usage:"getYearBoundaries(date)",parameters:[{name:"date",type:"Date | string | number",description:"Date within the year"}],returns:"Object with start and end dates",example:`// Get year boundaries
const year = getYearBoundaries(new Date('2025-06-15'));
// Returns: { start: '2025-01-01', end: '2025-12-31' }`},{id:"getQuarterBoundaries",name:"getQuarterBoundaries",description:"Gets start and end dates of the quarter containing a date",usage:"getQuarterBoundaries(date)",parameters:[{name:"date",type:"Date | string | number",description:"Date within the quarter"}],returns:"Object with start and end dates",example:`// Get quarter boundaries
const quarter = getQuarterBoundaries(new Date('2025-02-15'));
// Returns: { start: '2025-01-01', end: '2025-03-31' } (Q1)`},{id:"calculateBusinessDaysAdvanced",name:"calculateBusinessDaysAdvanced",description:"Advanced business days calculation with complex rules",usage:"calculateBusinessDaysAdvanced(startDate, endDate, options)",parameters:[{name:"startDate",type:"Date | string | number",description:"Start date"},{name:"endDate",type:"Date | string | number",description:"End date"},{name:"options",type:"object",description:"Advanced options (working days, holidays, partial days)"}],returns:"Detailed business days calculation",example:`// Advanced calculation
const result = calculateBusinessDaysAdvanced(
  '2025-01-01', '2025-01-31',
  {
    workingDays: [1, 2, 3, 4, 5],
    holidays: ['2025-01-01'],
    includePartialDays: true,
    workingHours: { start: 9, end: 17 }
  }
);`},{id:"getNthWeekdayOfMonth",name:"getNthWeekdayOfMonth",description:"Gets the Nth occurrence of a weekday in a month",usage:"getNthWeekdayOfMonth(year, month, weekday, occurrence)",parameters:[{name:"year",type:"number",description:"The year"},{name:"month",type:"number",description:"The month (1-12)"},{name:"weekday",type:"number",description:"Weekday (0=Sunday, 1=Monday, etc.)"},{name:"occurrence",type:"number",description:"Which occurrence (1st, 2nd, 3rd, etc.)"}],returns:"Date of Nth weekday occurrence",example:`// Get 2nd Monday of March 2025
const date = getNthWeekdayOfMonth(2025, 3, 1, 2);

// Get 3rd Friday of December 2025
const date = getNthWeekdayOfMonth(2025, 12, 5, 3);`},{id:"getFiscalPeriodAdvanced",name:"getFiscalPeriodAdvanced",description:"Gets detailed fiscal period information",usage:"getFiscalPeriodAdvanced(date, fiscalConfig)",parameters:[{name:"date",type:"Date | string | number",description:"Date to analyze"},{name:"fiscalConfig",type:"object",description:"Fiscal year configuration"}],returns:"Detailed fiscal period info",example:`// Get fiscal period info
const fiscal = getFiscalPeriodAdvanced(
  '2025-03-15',
  { yearStart: 7, quarters: 4 }
);
// Returns: { year, quarter, period, startDate, endDate }`},{id:"calculateWorkingHours",name:"calculateWorkingHours",description:"Calculates working hours with detailed configuration",usage:"calculateWorkingHours(startDate, endDate, config)",parameters:[{name:"startDate",type:"Date | string | number",description:"Start date/time"},{name:"endDate",type:"Date | string | number",description:"End date/time"},{name:"config",type:"object",description:"Working hours configuration"}],returns:"Detailed working hours breakdown",example:`// Calculate working hours
const hours = calculateWorkingHours(
  '2025-01-01 09:00', '2025-01-05 17:00',
  {
    dailyHours: 8,
    workingDays: [1, 2, 3, 4, 5],
    breaks: [{ start: 12, end: 13 }]
  }
);`},{id:"generatePayrollPeriods",name:"generatePayrollPeriods",description:"Generates payroll periods for a date range",usage:"generatePayrollPeriods(startDate, endDate, frequency, options)",parameters:[{name:"startDate",type:"Date | string | number",description:"Start date"},{name:"endDate",type:"Date | string | number",description:"End date"},{name:"frequency",type:"string",description:"Payroll frequency"},{name:"options",type:"object",description:"Additional options"}],returns:"Array of payroll periods",example:`// Generate biweekly payroll
const periods = generatePayrollPeriods(
  '2025-01-01', '2025-12-31', 'biweekly',
  { adjustForHolidays: true }
);`},{id:"calculateProjectMilestones",name:"calculateProjectMilestones",description:"Calculates project milestones based on business days",usage:"calculateProjectMilestones(startDate, tasks, options)",parameters:[{name:"startDate",type:"Date | string | number",description:"Project start date"},{name:"tasks",type:"object[]",description:"Array of task objects with durations"},{name:"options",type:"object",description:"Project options"}],returns:"Array of milestone dates",example:`// Calculate milestones
const milestones = calculateProjectMilestones(
  '2025-01-01',
  [
    { name: 'Design', duration: 10 },
    { name: 'Development', duration: 30 },
    { name: 'Testing', duration: 15 }
  ],
  { unit: 'business_days' }
);`},{id:"generateBusinessCalendar",name:"generateBusinessCalendar",description:"Generates a business calendar with working days and holidays",usage:"generateBusinessCalendar(year, options)",parameters:[{name:"year",type:"number",description:"Calendar year"},{name:"options",type:"object",description:"Calendar options"}],returns:"Business calendar object",example:`// Generate business calendar
const calendar = generateBusinessCalendar(2025, {
  workingDays: [1, 2, 3, 4, 5],
  holidays: 'US',
  includeObservedHolidays: true
});`},{id:"calculateOvertime",name:"calculateOvertime",description:"Calculates overtime hours based on worked hours",usage:"calculateOvertime(workedHours, standardHours, overtimeRules)",parameters:[{name:"workedHours",type:"number",description:"Total hours worked"},{name:"standardHours",type:"number",description:"Standard hours threshold"},{name:"overtimeRules",type:"object",description:"Overtime calculation rules"}],returns:"Overtime breakdown",example:`// Calculate overtime
const overtime = calculateOvertime(45, 40, {
  dailyOvertimeAfter: 8,
  weeklyOvertimeAfter: 40,
  doubleTimeAfter: 12
});`},{id:"generateShiftSchedule",name:"generateShiftSchedule",description:"Generates shift schedules for workers",usage:"generateShiftSchedule(startDate, endDate, shifts, workers)",parameters:[{name:"startDate",type:"Date | string | number",description:"Schedule start date"},{name:"endDate",type:"Date | string | number",description:"Schedule end date"},{name:"shifts",type:"object[]",description:"Shift definitions"},{name:"workers",type:"string[]",description:"Worker list"}],returns:"Shift schedule object",example:`// Generate shift schedule
const schedule = generateShiftSchedule(
  '2025-01-01', '2025-01-31',
  [
    { name: 'Morning', start: 8, end: 16 },
    { name: 'Evening', start: 16, end: 24 }
  ],
  ['Alice', 'Bob', 'Charlie']
);`},{id:"calculateSLACompliance",name:"calculateSLACompliance",description:"Calculates SLA compliance based on business hours",usage:"calculateSLACompliance(createdDate, resolvedDate, slaHours, businessHours)",parameters:[{name:"createdDate",type:"Date | string | number",description:"Issue creation date"},{name:"resolvedDate",type:"Date | string | number",description:"Issue resolution date"},{name:"slaHours",type:"number",description:"SLA target hours"},{name:"businessHours",type:"object",description:"Business hours configuration"}],returns:"SLA compliance information",example:`// Calculate SLA compliance
const sla = calculateSLACompliance(
  '2025-01-01 10:00', '2025-01-02 14:00',
  24, // 24-hour SLA
  { workingDays: [1, 2, 3, 4, 5], dailyHours: 8 }
);`}]},{id:"formatting",name:"Formatting & Parsing",items:[{id:"formatDuration",name:"formatDuration",description:"Gets a human-readable duration string from milliseconds",usage:"formatDuration(milliseconds, options)",parameters:[{name:"milliseconds",type:"number",description:"The duration in milliseconds"},{name:"options",type:"Object",description:"Formatting options"}],returns:"A formatted duration string",example:`// "2 days, 4 hours, 30 minutes"
const duration = formatDuration(189000000);

// With options
const duration = formatDuration(189000000, { longFormat: true, maxUnits: 2 });`},{id:"parseNaturalLanguage",name:"parseNaturalLanguage",description:"Parses natural language time expressions into dates",usage:"parseNaturalLanguage(expression, options)",parameters:[{name:"expression",type:"NaturalTimeExpression",description:"Natural language expression"},{name:"options",type:"NaturalLanguageOptions",description:"Parsing options"}],returns:"Parsed date or null if invalid",example:`const tomorrow = parseNaturalLanguage('tomorrow');
// Returns: Date object for tomorrow at 00:00:00

const nextFriday = parseNaturalLanguage('next friday');
// Returns: Date object for next Friday at 00:00:00`},{id:"formatISO",name:"formatISO",description:"Formats a date in ISO 8601 format",usage:"formatISO(date, options)",parameters:[{name:"date",type:"Date | string | number",description:"The date to format"},{name:"options",type:"object",description:"Formatting options (includeTime, timezone, etc.)"}],returns:"ISO formatted date string",example:`// Basic ISO format
const iso = formatISO(new Date('2025-01-15T14:30:00'));
// Returns: "2025-01-15T14:30:00.000Z"

// Date only
const iso = formatISO(new Date('2025-01-15'), { includeTime: false });
// Returns: "2025-01-15"`},{id:"formatCustom",name:"formatCustom",description:"Formats a date with custom format patterns",usage:"formatCustom(date, pattern, options)",parameters:[{name:"date",type:"Date | string | number",description:"The date to format"},{name:"pattern",type:"string",description:"Custom format pattern"},{name:"options",type:"object",description:"Additional formatting options"}],returns:"Custom formatted date string",example:`// Custom pattern
const custom = formatCustom(new Date('2025-01-15'), 'DD/MM/YYYY HH:mm');
// Returns: "15/01/2025 00:00"

// With options
const custom = formatCustom(new Date(), 'MMM Do, YYYY [at] h:mm A', {
  locale: 'en-US'
});`},{id:"formatLocalized",name:"formatLocalized",description:"Formats a date using locale-specific formatting",usage:"formatLocalized(date, locale, options)",parameters:[{name:"date",type:"Date | string | number",description:"The date to format"},{name:"locale",type:"string",description:'Locale identifier (e.g., "en-US", "fr-FR")'},{name:"options",type:"Intl.DateTimeFormatOptions",description:"Intl formatting options"}],returns:"Localized formatted date string",example:`// US format
const us = formatLocalized(new Date('2025-01-15'), 'en-US');
// Returns: "1/15/2025"

// French format with options
const fr = formatLocalized(new Date('2025-01-15'), 'fr-FR', {
  weekday: 'long',
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});
// Returns: "mercredi 15 janvier 2025"`},{id:"formatRelativeLocalized",name:"formatRelativeLocalized",description:"Formats relative time in localized format",usage:"formatRelativeLocalized(date, locale, options)",parameters:[{name:"date",type:"Date | string | number",description:"The target date"},{name:"locale",type:"string",description:"Locale identifier"},{name:"options",type:"object",description:"Relative formatting options"}],returns:"Localized relative time string",example:`// English relative time
const en = formatRelativeLocalized(new Date('2025-01-13'), 'en-US');
// Returns: "2 days ago" or "in 2 days"

// Spanish relative time
const es = formatRelativeLocalized(new Date('2025-01-13'), 'es-ES');
// Returns: "hace 2 días" or "en 2 días"`},{id:"formatCalendar",name:"formatCalendar",description:"Formats date in calendar style (Today, Yesterday, Tomorrow, etc.)",usage:"formatCalendar(date, referenceDate, options)",parameters:[{name:"date",type:"Date | string | number",description:"The date to format"},{name:"referenceDate",type:"Date | string | number",description:"Reference date (defaults to now)"},{name:"options",type:"object",description:"Calendar formatting options"}],returns:"Calendar formatted string",example:`// Calendar format
const cal = formatCalendar(new Date('2025-01-15'));
// Returns: "Today", "Tomorrow", "Yesterday", "Last Monday", etc.

// With time
const cal = formatCalendar(new Date('2025-01-14'), new Date('2025-01-15'), {
  includeTime: true
});
// Returns: "Yesterday at 2:30 PM"`},{id:"formatTimezone",name:"formatTimezone",description:"Formats date with timezone information",usage:"formatTimezone(date, timezone, format)",parameters:[{name:"date",type:"Date | string | number",description:"The date to format"},{name:"timezone",type:"IANATimezone",description:"Target timezone"},{name:"format",type:"string",description:"Format pattern"}],returns:"Timezone-aware formatted string",example:`// Format with timezone
const tz = formatTimezone(new Date(), 'America/New_York', 'YYYY-MM-DD HH:mm z');
// Returns: "2025-01-15 09:30 EST"

// Multiple timezones
const utc = formatTimezone(new Date(), 'UTC', 'HH:mm [UTC]');
const pst = formatTimezone(new Date(), 'America/Los_Angeles', 'HH:mm [PST]');`},{id:"humanizeDuration",name:"humanizeDuration",description:"Converts duration to human-readable format",usage:"humanizeDuration(duration, options)",parameters:[{name:"duration",type:"number",description:"Duration in milliseconds"},{name:"options",type:"object",description:"Humanization options"}],returns:"Human-readable duration string",example:`// Basic humanization
const human = humanizeDuration(90000); // 1.5 minutes
// Returns: "1 minute"

// With options
const human = humanizeDuration(3661000, {
  largest: 2,
  round: true,
  delimiter: ', '
});
// Returns: "1 hour, 1 minute"`},{id:"parseISO",name:"parseISO",description:"Parses ISO 8601 date strings",usage:"parseISO(isoString, options)",parameters:[{name:"isoString",type:"string",description:"ISO 8601 date string"},{name:"options",type:"object",description:"Parsing options"}],returns:"Parsed Date object",example:`// Parse ISO string
const date = parseISO('2025-01-15T14:30:00.000Z');

// Parse date-only ISO
const date = parseISO('2025-01-15');

// With timezone
const date = parseISO('2025-01-15T14:30:00+05:00');`},{id:"parseMultipleFormats",name:"parseMultipleFormats",description:"Tries to parse date using multiple format patterns",usage:"parseMultipleFormats(dateString, formats, options)",parameters:[{name:"dateString",type:"string",description:"Date string to parse"},{name:"formats",type:"string[]",description:"Array of format patterns to try"},{name:"options",type:"object",description:"Parsing options"}],returns:"Parsed Date object or null",example:`// Try multiple formats
const date = parseMultipleFormats('15/01/2025', [
  'DD/MM/YYYY',
  'MM/DD/YYYY',
  'YYYY-MM-DD'
]);

// With more formats
const date = parseMultipleFormats('Jan 15, 2025', [
  'MMM DD, YYYY',
  'DD MMM YYYY',
  'MMMM D, YYYY'
]);`},{id:"smartParse",name:"smartParse",description:"Intelligently parses various date formats automatically",usage:"smartParse(input, options)",parameters:[{name:"input",type:"string",description:"Date string in any common format"},{name:"options",type:"object",description:"Smart parsing options"}],returns:"Parsed Date object or null",example:`// Smart parsing - various formats
const date1 = smartParse('2025-01-15');
const date2 = smartParse('January 15, 2025');
const date3 = smartParse('15/01/2025');
const date4 = smartParse('Jan 15 2025 2:30 PM');

// All return valid Date objects`}]},{id:"timezone",name:"Timezone & Localization",items:[{id:"getTimezoneOffset",name:"getTimezoneOffset",description:"Gets timezone offset in minutes for a specific timezone",usage:"getTimezoneOffset(timezone, date)",parameters:[{name:"timezone",type:"IANATimezone",description:"IANA timezone identifier"},{name:"date",type:"Date | string | number",description:"Date to get offset for (defaults to now)"}],returns:"Offset in minutes from UTC",example:`// Get timezone offset
const offset = getTimezoneOffset('America/New_York');
// Returns: -300 (EST) or -240 (EDT)

// For specific date
const offset = getTimezoneOffset('Europe/London', new Date('2025-07-15'));`},{id:"getTimezoneString",name:"getTimezoneString",description:"Gets human-readable timezone string",usage:"getTimezoneString(timezone, date, format)",parameters:[{name:"timezone",type:"IANATimezone",description:"IANA timezone identifier"},{name:"date",type:"Date | string | number",description:"Reference date"},{name:"format",type:"string",description:"Format type (long, short, offset)"}],returns:"Formatted timezone string",example:`// Different formats
const long = getTimezoneString('America/New_York', new Date(), 'long');
// Returns: "Eastern Standard Time"

const short = getTimezoneString('America/New_York', new Date(), 'short');
// Returns: "EST"

const offset = getTimezoneString('America/New_York', new Date(), 'offset');
// Returns: "GMT-5"`},{id:"convertTimezone",name:"convertTimezone",description:"Converts date from one timezone to another",usage:"convertTimezone(date, fromTimezone, toTimezone)",parameters:[{name:"date",type:"Date | string | number",description:"Date to convert"},{name:"fromTimezone",type:"IANATimezone",description:"Source timezone"},{name:"toTimezone",type:"IANATimezone",description:"Target timezone"}],returns:"Date converted to target timezone",example:`// Convert between timezones
const nyTime = convertTimezone(
  new Date('2025-01-15 15:00'), 
  'America/New_York', 
  'America/Los_Angeles'
);
// Converts 3 PM EST to 12 PM PST

// Convert to UTC
const utc = convertTimezone(new Date(), 'America/New_York', 'UTC');`},{id:"getTimezoneInfo",name:"getTimezoneInfo",description:"Gets comprehensive timezone information",usage:"getTimezoneInfo(timezone, date)",parameters:[{name:"timezone",type:"IANATimezone",description:"IANA timezone identifier"},{name:"date",type:"Date | string | number",description:"Reference date"}],returns:"Detailed timezone information object",example:`// Get timezone info
const info = getTimezoneInfo('America/New_York', new Date());
// Returns: {
//   timezone: 'America/New_York',
//   offset: -300,
//   abbreviation: 'EST',
//   name: 'Eastern Standard Time',
//   isDST: false
// }`},{id:"listTimezones",name:"listTimezones",description:"Lists available timezones with optional filtering",usage:"listTimezones(filter)",parameters:[{name:"filter",type:"object",description:"Filter options (region, offset, etc.)"}],returns:"Array of timezone objects",example:`// List all timezones
const all = listTimezones();

// Filter by region
const americas = listTimezones({ region: 'America' });

// Filter by offset
const utcPlus5 = listTimezones({ offset: 300 });`}]},{id:"comparison",name:"Comparison & Validation",items:[{id:"isBetweenDates",name:"isBetweenDates",description:"Checks if a date is between two other dates",usage:"isBetweenDates(date, startDate, endDate, inclusive)",parameters:[{name:"date",type:"Date | string | number",description:"Date to check"},{name:"startDate",type:"Date | string | number",description:"Range start date"},{name:"endDate",type:"Date | string | number",description:"Range end date"},{name:"inclusive",type:"boolean",description:"Include boundary dates (default true)"}],returns:"True if date is within range",example:`// Check if date is in range
const inRange = isBetweenDates(
  new Date('2025-01-15'),
  new Date('2025-01-01'),
  new Date('2025-01-31')
); // true

// Exclusive check
const inRange = isBetweenDates(
  new Date('2025-01-01'),
  new Date('2025-01-01'),
  new Date('2025-01-31'),
  false
); // false`},{id:"isValidDate",name:"isValidDate",description:"Validates if a value is a valid date",usage:"isValidDate(value)",parameters:[{name:"value",type:"any",description:"Value to validate"}],returns:"True if value is a valid date",example:`// Valid dates
const valid1 = isValidDate(new Date()); // true
const valid2 = isValidDate('2025-01-15'); // true
const valid3 = isValidDate(1735689600000); // true

// Invalid dates
const invalid1 = isValidDate('invalid'); // false
const invalid2 = isValidDate(new Date('invalid')); // false`},{id:"validateDateFormat",name:"validateDateFormat",description:"Validates if a string matches a specific date format",usage:"validateDateFormat(dateString, format)",parameters:[{name:"dateString",type:"string",description:"Date string to validate"},{name:"format",type:"string",description:"Expected format pattern"}],returns:"True if string matches format",example:`// Validate formats
const valid1 = validateDateFormat('2025-01-15', 'YYYY-MM-DD'); // true
const valid2 = validateDateFormat('15/01/2025', 'DD/MM/YYYY'); // true
const invalid = validateDateFormat('2025-01-15', 'DD/MM/YYYY'); // false`},{id:"minDate",name:"minDate",description:"Finds the earliest date from an array of dates",usage:"minDate(dates)",parameters:[{name:"dates",type:"(Date | string | number)[]",description:"Array of dates"}],returns:"Earliest date",example:`// Find minimum date
const earliest = minDate([
  new Date('2025-01-15'),
  new Date('2025-01-10'),
  new Date('2025-01-20')
]);
// Returns: 2025-01-10`},{id:"maxDate",name:"maxDate",description:"Finds the latest date from an array of dates",usage:"maxDate(dates)",parameters:[{name:"dates",type:"(Date | string | number)[]",description:"Array of dates"}],returns:"Latest date",example:`// Find maximum date
const latest = maxDate([
  new Date('2025-01-15'),
  new Date('2025-01-10'),
  new Date('2025-01-20')
]);
// Returns: 2025-01-20`},{id:"roundToNearest",name:"roundToNearest",description:"Rounds date to nearest time unit",usage:"roundToNearest(date, unit, precision)",parameters:[{name:"date",type:"Date | string | number",description:"Date to round"},{name:"unit",type:"TimeUnit",description:"Time unit to round to"},{name:"precision",type:"number",description:"Precision value (e.g., 15 for 15-minute intervals)"}],returns:"Rounded date",example:`// Round to nearest 15 minutes
const rounded = roundToNearest(
  new Date('2025-01-15T14:23:00'),
  'minute',
  15
);
// Returns: 2025-01-15T14:30:00

// Round to nearest hour
const rounded = roundToNearest(new Date('2025-01-15T14:23:00'), 'hour');`},{id:"compareDates",name:"compareDates",description:"Compares two dates and returns comparison result",usage:"compareDates(date1, date2)",parameters:[{name:"date1",type:"Date | string | number",description:"First date"},{name:"date2",type:"Date | string | number",description:"Second date"}],returns:"Comparison result (-1, 0, 1)",example:`// Compare dates
const result = compareDates('2025-01-15', '2025-01-20');
// Returns: -1 (date1 is earlier)

const result = compareDates('2025-01-15', '2025-01-15');
// Returns: 0 (dates are equal)

const result = compareDates('2025-01-20', '2025-01-15');
// Returns: 1 (date1 is later)`},{id:"compareDetailed",name:"compareDetailed",description:"Detailed comparison of two dates with breakdown",usage:"compareDetailed(date1, date2)",parameters:[{name:"date1",type:"Date | string | number",description:"First date"},{name:"date2",type:"Date | string | number",description:"Second date"}],returns:"Detailed comparison object",example:`// Detailed comparison
const details = compareDetailed('2025-01-15', '2025-01-20');
// Returns: {
//   result: -1,
//   difference: 432000000, // milliseconds
//   humanDifference: '5 days',
//   isEarlier: true,
//   isLater: false,
//   isEqual: false
// }`},{id:"isSameDay",name:"isSameDay",description:"Checks if two dates are on the same day",usage:"isSameDay(date1, date2, timezone)",parameters:[{name:"date1",type:"Date | string | number",description:"First date"},{name:"date2",type:"Date | string | number",description:"Second date"},{name:"timezone",type:"IANATimezone",description:"Optional timezone for comparison"}],returns:"True if same day",example:`// Same day check
const same = isSameDay(
  new Date('2025-01-15T09:00:00'),
  new Date('2025-01-15T18:00:00')
); // true

// Different days
const same = isSameDay('2025-01-15', '2025-01-16'); // false`},{id:"isSameWeek",name:"isSameWeek",description:"Checks if two dates are in the same week",usage:"isSameWeek(date1, date2, startOfWeek)",parameters:[{name:"date1",type:"Date | string | number",description:"First date"},{name:"date2",type:"Date | string | number",description:"Second date"},{name:"startOfWeek",type:"number",description:"Start of week (0=Sunday, 1=Monday)"}],returns:"True if same week",example:`// Same week check (Monday start)
const same = isSameWeek('2025-01-13', '2025-01-17', 1); // true

// Different weeks
const same = isSameWeek('2025-01-13', '2025-01-20', 1); // false`},{id:"isSameMonth",name:"isSameMonth",description:"Checks if two dates are in the same month and year",usage:"isSameMonth(date1, date2)",parameters:[{name:"date1",type:"Date | string | number",description:"First date"},{name:"date2",type:"Date | string | number",description:"Second date"}],returns:"True if same month and year",example:`// Same month check
const same = isSameMonth('2025-01-15', '2025-01-31'); // true
const different = isSameMonth('2025-01-15', '2025-02-15'); // false`},{id:"isSameYear",name:"isSameYear",description:"Checks if two dates are in the same year",usage:"isSameYear(date1, date2)",parameters:[{name:"date1",type:"Date | string | number",description:"First date"},{name:"date2",type:"Date | string | number",description:"Second date"}],returns:"True if same year",example:`// Same year check
const same = isSameYear('2025-01-15', '2025-12-31'); // true
const different = isSameYear('2025-01-15', '2024-01-15'); // false`},{id:"isAfter",name:"isAfter",description:"Checks if first date is after second date",usage:"isAfter(date1, date2)",parameters:[{name:"date1",type:"Date | string | number",description:"First date"},{name:"date2",type:"Date | string | number",description:"Second date"}],returns:"True if date1 is after date2",example:`// After check
const after = isAfter('2025-01-20', '2025-01-15'); // true
const notAfter = isAfter('2025-01-15', '2025-01-20'); // false`},{id:"isBefore",name:"isBefore",description:"Checks if first date is before second date",usage:"isBefore(date1, date2)",parameters:[{name:"date1",type:"Date | string | number",description:"First date"},{name:"date2",type:"Date | string | number",description:"Second date"}],returns:"True if date1 is before date2",example:`// Before check
const before = isBefore('2025-01-15', '2025-01-20'); // true
const notBefore = isBefore('2025-01-20', '2025-01-15'); // false`},{id:"isWithinRange",name:"isWithinRange",description:"Checks if date is within a specified range with tolerance",usage:"isWithinRange(date, targetDate, range, unit)",parameters:[{name:"date",type:"Date | string | number",description:"Date to check"},{name:"targetDate",type:"Date | string | number",description:"Target date"},{name:"range",type:"number",description:"Range tolerance"},{name:"unit",type:"TimeUnit",description:"Unit for range"}],returns:"True if within range",example:`// Within range check
const within = isWithinRange(
  new Date('2025-01-17'),
  new Date('2025-01-15'),
  3,
  'day'
); // true (within 3 days)`},{id:"isValidRange",name:"isValidRange",description:"Validates if a date range is valid (start <= end)",usage:"isValidRange(startDate, endDate)",parameters:[{name:"startDate",type:"Date | string | number",description:"Range start date"},{name:"endDate",type:"Date | string | number",description:"Range end date"}],returns:"True if range is valid",example:`// Valid range
const valid = isValidRange('2025-01-01', '2025-01-31'); // true

// Invalid range
const invalid = isValidRange('2025-01-31', '2025-01-01'); // false`},{id:"sortDates",name:"sortDates",description:"Sorts an array of dates in ascending or descending order",usage:"sortDates(dates, order)",parameters:[{name:"dates",type:"(Date | string | number)[]",description:"Array of dates to sort"},{name:"order",type:"string",description:'Sort order ("asc" or "desc")'}],returns:"Sorted array of dates",example:`// Sort dates ascending
const sorted = sortDates([
  new Date('2025-01-20'),
  new Date('2025-01-10'),
  new Date('2025-01-15')
], 'asc');

// Sort descending
const sorted = sortDates(dates, 'desc');`},{id:"getEarliestDate",name:"getEarliestDate",description:"Finds the earliest date from multiple date arguments",usage:"getEarliestDate(...dates)",parameters:[{name:"...dates",type:"(Date | string | number)[]",description:"Multiple date arguments"}],returns:"Earliest date",example:`// Find earliest date
const earliest = getEarliestDate(
  new Date('2025-01-20'),
  new Date('2025-01-10'),
  new Date('2025-01-15'),
  '2025-01-05'
);
// Returns: 2025-01-05`},{id:"getLatestDate",name:"getLatestDate",description:"Finds the latest date from multiple date arguments",usage:"getLatestDate(...dates)",parameters:[{name:"...dates",type:"(Date | string | number)[]",description:"Multiple date arguments"}],returns:"Latest date",example:`// Find latest date
const latest = getLatestDate(
  new Date('2025-01-20'),
  new Date('2025-01-10'),
  new Date('2025-01-15'),
  '2025-01-25'
);
// Returns: 2025-01-25`},{id:"removeDuplicateDates",name:"removeDuplicateDates",description:"Removes duplicate dates from an array",usage:"removeDuplicateDates(dates, precision)",parameters:[{name:"dates",type:"(Date | string | number)[]",description:"Array of dates"},{name:"precision",type:"TimeUnit",description:"Precision level for comparison"}],returns:"Array with unique dates",example:`// Remove duplicates (exact match)
const unique = removeDuplicateDates([
  new Date('2025-01-15'),
  new Date('2025-01-15'),
  new Date('2025-01-20')
]);

// Remove duplicates by day
const unique = removeDuplicateDates([
  new Date('2025-01-15T10:00:00'),
  new Date('2025-01-15T15:00:00'),
  new Date('2025-01-20T12:00:00')
], 'day');`},{id:"isFirstDayOfMonth",name:"isFirstDayOfMonth",description:"Checks if date is the first day of its month",usage:"isFirstDayOfMonth(date)",parameters:[{name:"date",type:"Date | string | number",description:"Date to check"}],returns:"True if first day of month",example:`// First day check
const isFirst = isFirstDayOfMonth(new Date('2025-01-01')); // true
const notFirst = isFirstDayOfMonth(new Date('2025-01-15')); // false`},{id:"isLastDayOfMonth",name:"isLastDayOfMonth",description:"Checks if date is the last day of its month",usage:"isLastDayOfMonth(date)",parameters:[{name:"date",type:"Date | string | number",description:"Date to check"}],returns:"True if last day of month",example:`// Last day check
const isLast = isLastDayOfMonth(new Date('2025-01-31')); // true
const notLast = isLastDayOfMonth(new Date('2025-01-15')); // false`},{id:"isFirstDayOfYear",name:"isFirstDayOfYear",description:"Checks if date is the first day of its year",usage:"isFirstDayOfYear(date)",parameters:[{name:"date",type:"Date | string | number",description:"Date to check"}],returns:"True if first day of year",example:`// First day of year check
const isFirst = isFirstDayOfYear(new Date('2025-01-01')); // true
const notFirst = isFirstDayOfYear(new Date('2025-01-02')); // false`},{id:"isLastDayOfYear",name:"isLastDayOfYear",description:"Checks if date is the last day of its year",usage:"isLastDayOfYear(date)",parameters:[{name:"date",type:"Date | string | number",description:"Date to check"}],returns:"True if last day of year",example:`// Last day of year check
const isLast = isLastDayOfYear(new Date('2025-12-31')); // true
const notLast = isLastDayOfYear(new Date('2025-12-30')); // false`},{id:"findClosestDate",name:"findClosestDate",description:"Finds the closest date to a target date from an array",usage:"findClosestDate(targetDate, dates)",parameters:[{name:"targetDate",type:"Date | string | number",description:"Target date"},{name:"dates",type:"(Date | string | number)[]",description:"Array of dates to search"}],returns:"Closest date to target",example:`// Find closest date
const closest = findClosestDate(new Date('2025-01-15'), [
  new Date('2025-01-10'),
  new Date('2025-01-20'),
  new Date('2025-01-12'),
  new Date('2025-01-18')
]);
// Returns: 2025-01-12 (3 days away)`}]},{id:"utility",name:"Utility Functions",items:[{id:"getConfigs",name:"getConfigs",description:"Gets current ChronoUtilz configuration settings",usage:"getConfigs()",parameters:[],returns:"Configuration object",example:`// Get current configs
const config = getConfigs();
// Returns: {
//   timezone: 'America/New_York',
//   locale: 'en-US',
//   workingDays: [1, 2, 3, 4, 5],
//   holidays: [...]
// }`},{id:"getUserTimezone",name:"getUserTimezone",description:"Gets user's current timezone using browser API",usage:"getUserTimezone()",parameters:[],returns:"User's IANA timezone identifier",example:`// Get user's timezone
const userTz = getUserTimezone();
// Returns: "America/New_York" (or user's actual timezone)`},{id:"searchTimezones",name:"searchTimezones",description:"Searches timezones by name or description",usage:"searchTimezones(query)",parameters:[{name:"query",type:"string",description:"Search query string"}],returns:"Array of matching timezone objects",example:`// Search timezones
const results = searchTimezones('new york');
// Returns: [{ id: 'America/New_York', offset: -300, description: '...' }]

const results = searchTimezones('UTC+5');
// Returns: timezones with UTC+5 offset`},{id:"getTimezoneConfig",name:"getTimezoneConfig",description:"Gets current timezone configuration",usage:"getTimezoneConfig()",parameters:[],returns:"Timezone configuration object",example:`// Get timezone config
const config = getTimezoneConfig();
// Returns: {
//   defaultTimezone: 'UTC',
//   autoDetect: true,
//   currentEffectiveTimezone: 'America/New_York'
// }`},{id:"getTimezonesByOffset",name:"getTimezonesByOffset",description:"Gets all timezones with a specific GMT offset",usage:"getTimezonesByOffset(offset)",parameters:[{name:"offset",type:"number",description:"GMT offset in hours"}],returns:"Array of timezone objects with specified offset",example:`// Get UTC+5 timezones
const utcPlus5 = getTimezonesByOffset(5);

// Get UTC-8 timezones  
const utcMinus8 = getTimezonesByOffset(-8);`},{id:"getTimezonesByRegion",name:"getTimezonesByRegion",description:"Gets all timezones in a specific region",usage:"getTimezonesByRegion(region)",parameters:[{name:"region",type:"string",description:'Region name (e.g., "America", "Europe", "Asia")'}],returns:"Array of timezone objects in the region",example:`// Get American timezones
const americas = getTimezonesByRegion('America');

// Get European timezones
const europe = getTimezonesByRegion('Europe');

// Get Asian timezones
const asia = getTimezonesByRegion('Asia');`}]}]),d=Ue(()=>{if(!a.value)return o.value;const c=a.value.toLowerCase();return o.value.map(u=>{const l=u.items.filter(m=>m.name.toLowerCase().includes(c)||m.description.toLowerCase().includes(c));return{...u,items:l}}).filter(u=>u.items.length>0)});return za(()=>{console.log("Documentation view mounted")}),(c,u)=>(_(),N("div",Vf,[u[15]||(u[15]=p("div",{class:"doc-header bg-white shadow-sm py-6"},[p("div",{class:"container mx-auto px-4"},[p("h1",{class:"text-3xl font-bold text-gray-900"},"ChronoUtilz Documentation"),p("p",{class:"text-gray-600 mt-2"},"A comprehensive date utility library with 136+ functions for business logic, formatting, and parsing.")])],-1)),p("div",jf,[p("div",Kf,[p("div",Qf,[p("div",Zf,[be(p("input",{"onUpdate:modelValue":u[0]||(u[0]=l=>a.value=l),type:"text",placeholder:"Search documentation...",class:"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"},null,512),[[Re,a.value]])]),p("nav",null,[p("ul",Jf,[(_(!0),N(X,null,fe(d.value,l=>(_(),N("li",{key:l.id},[p("div",Xf,[p("a",{href:"#",onClick:Xt(m=>i(l.id),["prevent"]),class:Ge(["flex-1 px-4 py-2 rounded-lg transition-colors",t.value===l.id?"bg-blue-100 text-blue-700 font-medium":"text-gray-700 hover:bg-gray-100"])},K(l.name),11,ey),p("button",{onClick:Xt(m=>r(l.id),["prevent"]),class:Ge(["p-2 text-gray-500 hover:text-gray-700 transition-colors",{"text-blue-600":n.value.has(l.id)}])},[(_(),N("svg",{class:Ge(["w-4 h-4 transition-transform",{"rotate-90":n.value.has(l.id)}]),fill:"none",stroke:"currentColor",viewBox:"0 0 24 24"},[...u[1]||(u[1]=[p("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M9 5l7 7-7 7"},null,-1)])],2))],10,ty)]),n.value.has(l.id)?(_(),N("ul",ay,[(_(!0),N(X,null,fe(l.items,m=>(_(),N("li",{key:m.id},[p("a",{href:"#",onClick:Xt(g=>s(m.id),["prevent"]),class:"block px-4 py-2 text-sm rounded-lg text-gray-600 hover:bg-gray-50 hover:text-gray-900 transition-colors"},K(m.name),9,ny)]))),128))])):Ne("",!0)]))),128))])])])]),p("div",ry,[p("div",iy,[p("section",sy,[u[5]||(u[5]=Ot('<h2 class="text-2xl font-bold text-gray-900 mb-4" data-v-89084c59>Introduction</h2><p class="text-gray-700 mb-4" data-v-89084c59> ChronoUtilz is a comprehensive date utility library built on the Three Pillars Architecture with 136+ functions spanning Core Operations, Business Utilities, and Formatting &amp; Parsing. It&#39;s designed for serious date manipulation needs in JavaScript and TypeScript applications. </p><div class="grid grid-cols-1 md:grid-cols-3 gap-6 mt-6" data-v-89084c59><div class="border border-gray-200 rounded-lg p-4" data-v-89084c59><h3 class="font-semibold text-lg mb-2" data-v-89084c59>Core Operations</h3><p class="text-gray-600 text-sm" data-v-89084c59>45+ functions for date manipulation &amp; comparison</p></div><div class="border border-gray-200 rounded-lg p-4" data-v-89084c59><h3 class="font-semibold text-lg mb-2" data-v-89084c59>Business Utilities</h3><p class="text-gray-600 text-sm" data-v-89084c59>55+ functions for real-world business logic</p></div><div class="border border-gray-200 rounded-lg p-4" data-v-89084c59><h3 class="font-semibold text-lg mb-2" data-v-89084c59>Formatting &amp; Parsing</h3><p class="text-gray-600 text-sm" data-v-89084c59>35+ functions for advanced presentation</p></div></div>',3)),p("div",oy,[u[3]||(u[3]=p("h3",{class:"font-semibold text-lg mb-2"},"API Documentation",-1)),u[4]||(u[4]=p("p",{class:"text-gray-700 mb-3"}," For detailed information about parameters, return types, and usage examples for all 136+ functions, please refer to our comprehensive API documentation. ",-1)),q(ge(Ie),{to:"/api-docs",class:"inline-block bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition"},{default:Ce(()=>[...u[2]||(u[2]=[ye(" View Full API Documentation ",-1)])]),_:1})])]),(_(!0),N(X,null,fe(o.value,l=>(_(),N("div",{key:l.id},[t.value===l.id?(_(),N("section",{key:0,id:l.id,class:"mb-12"},[p("h2",uy,K(l.name),1),(_(!0),N(X,null,fe(l.items,m=>(_(),N("div",{key:m.id,class:"mb-10"},[p("div",{id:m.id,class:"border-b border-gray-200 pb-4 mb-6"},[p("h3",ly,K(m.name),1),p("p",my,K(m.description),1)],8,cy),p("div",py,[u[8]||(u[8]=p("h4",{class:"font-medium text-gray-900 mb-2"},"Usage",-1)),p("pre",fy,[u[6]||(u[6]=ye("                    ",-1)),p("code",null,K(m.usage),1),u[7]||(u[7]=ye(`
                  `,-1))])]),m.parameters&&m.parameters.length>0?(_(),N("div",yy,[u[10]||(u[10]=p("h4",{class:"font-medium text-gray-900 mb-2"},"Parameters",-1)),p("div",gy,[p("table",hy,[u[9]||(u[9]=p("thead",{class:"bg-gray-100"},[p("tr",null,[p("th",{class:"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"},"Name"),p("th",{class:"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"},"Type"),p("th",{class:"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"},"Description")])],-1)),p("tbody",Dy,[(_(!0),N(X,null,fe(m.parameters,g=>(_(),N("tr",{key:g.name},[p("td",by,K(g.name),1),p("td",wy,K(g.type),1),p("td",xy,K(g.description),1)]))),128))])])])])):Ne("",!0),m.returns?(_(),N("div",Ty,[u[11]||(u[11]=p("h4",{class:"font-medium text-gray-900 mb-2"},"Returns",-1)),p("p",vy,K(m.returns),1)])):Ne("",!0),m.example?(_(),N("div",Sy,[u[14]||(u[14]=p("h4",{class:"font-medium text-gray-900 mb-2"},"Example",-1)),p("pre",My,[u[12]||(u[12]=ye("                    ",-1)),p("code",null,K(m.example),1),u[13]||(u[13]=ye(`
                  `,-1))])])):Ne("",!0)]))),128))],8,dy)):Ne("",!0)]))),128))])])])]))}},Ay=eu(ky,[["__scopeId","data-v-89084c59"]]),Cy={class:"api-docs-container"},Iy={class:"container mx-auto px-4 py-8 flex flex-col md:flex-row"},Ey={class:"w-full md:w-1/4 lg:w-1/5 pr-0 md:pr-8 mb-6 md:mb-0"},_y={class:"bg-white rounded-lg shadow-sm p-4 sticky top-4"},Ny={class:"mb-6"},Yy={class:"space-y-1"},zy={class:"flex items-center"},Oy=["onClick"],Fy=["onClick"],Ry={key:0,class:"ml-4 mt-1 space-y-1 border-l-2 border-gray-200 pl-4"},Py=["onClick"],By={class:"w-full md:w-3/4 lg:w-4/5"},Ly={class:"bg-white rounded-lg shadow-sm p-6"},Hy=["id"],Gy={class:"text-2xl font-bold text-gray-900 mb-6"},Uy=["id"],Wy={class:"text-xl font-semibold text-gray-900"},qy={class:"text-gray-600 mt-2"},$y={class:"bg-gray-50 rounded-lg p-4 mb-4"},Vy={class:"bg-gray-900 text-green-200 p-4 rounded-lg overflow-x-auto font-mono"},jy={key:0,class:"mb-4"},Ky={class:"overflow-x-auto"},Qy={class:"min-w-full divide-y divide-gray-200"},Zy={class:"bg-white divide-y divide-gray-200"},Jy={class:"px-4 py-2 whitespace-nowrap text-sm font-medium text-gray-900"},Xy={class:"px-4 py-2 whitespace-nowrap text-sm text-gray-500"},eg={class:"font-mono"},tg={class:"px-4 py-2 whitespace-nowrap text-sm text-gray-500"},ag={class:"px-4 py-2 text-sm text-gray-500"},ng={key:1,class:"mb-4"},rg={class:"bg-gray-50 rounded-lg p-4"},ig={class:"text-gray-700"},sg={class:"font-mono"},og={class:"text-gray-700 mt-2"},dg={key:2,class:"mb-4"},ug={class:"overflow-x-auto"},cg={class:"min-w-full divide-y divide-gray-200"},lg={class:"bg-white divide-y divide-gray-200"},mg={class:"px-4 py-2 whitespace-nowrap text-sm font-medium text-gray-900"},pg={class:"font-mono"},fg={class:"px-4 py-2 text-sm text-gray-500"},yg={key:3,class:"bg-blue-50 rounded-lg p-4"},gg={class:"bg-gray-900 text-green-200 p-4 rounded-lg overflow-x-auto font-mono"},hg={__name:"APIDocs",setup(e){const t=ve("core"),a=ve(""),n=ve(new Set(["core"])),r=c=>{n.value.has(c)?n.value.delete(c):n.value.add(c)},i=c=>{t.value=c,n.value.add(c)},s=c=>{const u=o.value.find(l=>l.items.some(m=>m.id===c));u&&t.value!==u.id&&i(u.id),setTimeout(()=>{const l=document.getElementById(c);l&&l.scrollIntoView({behavior:"smooth",block:"start"})},100)},o=ve([{id:"core",name:"Core Operations",items:[{id:"parseDate",name:"parseDate",description:"Safely parses a date string or timestamp into a Date object",signature:"parseDate(input: string | number | Date, options?: DateParseOptions): Date | null",parameters:[{name:"input",type:"string | number | Date",required:!0,description:"The input to parse as a date. Can be a date string, timestamp number, or Date object."},{name:"options",type:"DateParseOptions",required:!1,description:"Optional parsing options to control behavior when parsing fails."}],returns:{type:"Date | null",description:"A Date object if parsing succeeds, or null if parsing fails and throwError is false in options."},exceptions:[{type:"ChronoUtilzError",condition:"Thrown when the date is invalid and throwError is true in options."}],example:`// Parse a date string
const date = parseDate('2025-01-15');

// Parse with options
const date = parseDate('invalid-date', { 
  throwError: false, 
  fallback: new Date() 
});`},{id:"formatDate",name:"formatDate",description:"Formats a date according to the specified format pattern",signature:"formatDate(date: Date | string | number, format?: DateFormat, timezone?: IANATimezone): string",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The date to format. Can be a Date object, date string, or timestamp number."},{name:"format",type:"DateFormat",required:!1,description:"The format pattern to use. Defaults to a standard format if not provided."},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone identifier for timezone-aware formatting."}],returns:{type:"string",description:"Formatted date string according to the specified format and timezone."},example:`// Format a date
const formatted = formatDate(new Date(), 'YYYY-MM-DD');

// Format with timezone
const formatted = formatDate(new Date(), 'MMM DD, YYYY HH:mm:ss', 'America/New_York');`},{id:"addTime",name:"addTime",description:"Adds the specified amount of time to a date",signature:"addTime(date: Date | string | number, amount: number, unit: TimeUnit, timezone?: IANATimezone): Date",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The base date to which time will be added."},{name:"amount",type:"number",required:!0,description:"The amount of time to add. Can be positive or negative."},{name:"unit",type:"TimeUnit",required:!0,description:"The time unit for the amount (e.g., 'day', 'hour', 'minute')."},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone for timezone-aware calculations."}],returns:{type:"Date",description:"A new Date object with the specified time added."},example:`// Add 5 days to a date
const newDate = addTime(new Date(), 5, 'day');

// Add 2 hours in a specific timezone
const newDate = addTime(new Date(), 2, 'hour', 'Europe/London');`},{id:"subtractTime",name:"subtractTime",description:"Subtracts time from a date",signature:"subtractTime(date: Date | string | number, amount: number, unit: TimeUnit, timezone?: IANATimezone): Date",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The base date"},{name:"amount",type:"number",required:!0,description:"The amount to subtract"},{name:"unit",type:"TimeUnit",required:!0,description:"The time unit"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"Date",description:"A new Date with the subtracted time"},example:`// Subtract 3 months
const newDate = subtractTime(new Date(), 3, 'month');`},{id:"getDateDiff",name:"getDateDiff",description:"Gets the difference between two dates in the specified unit",signature:"getDateDiff(date1: Date | string | number, date2: Date | string | number, unit: TimeUnit, timezone?: IANATimezone): number",parameters:[{name:"date1",type:"Date | string | number",required:!0,description:"The first date"},{name:"date2",type:"Date | string | number",required:!0,description:"The second date"},{name:"unit",type:"TimeUnit",required:!0,description:"The time unit"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"number",description:"The difference in the specified unit"},example:`// Get difference in days
const diff = getDateDiff(new Date('2025-01-15'), new Date('2025-01-20'), 'day');`},{id:"startOf",name:"startOf",description:"Returns the start of a time period",signature:"startOf(date: Date | string | number, unit: TimeUnit, timezone?: IANATimezone): Date",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The input date"},{name:"unit",type:"TimeUnit",required:!0,description:"The time unit to get start of"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"Date",description:"A new Date at the start of the specified unit"},example:"const startOfDay = startOf(new Date(), 'day');"},{id:"endOf",name:"endOf",description:"Returns the end of a time period",signature:"endOf(date: Date | string | number, unit: TimeUnit, timezone?: IANATimezone): Date",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The input date"},{name:"unit",type:"TimeUnit",required:!0,description:"The time unit to get end of"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"Date",description:"A new Date at the end of the specified unit"},example:"const endOfDay = endOf(new Date(), 'day');"},{id:"createDate",name:"createDate",description:"Creates a new Date with specified components",signature:"createDate(year: number, month: number, day: number, hour?: number, minute?: number, second?: number, millisecond?: number, timezone?: IANATimezone): Date",parameters:[{name:"year",type:"number",required:!0,description:"The year"},{name:"month",type:"number",required:!0,description:"The month (1-12)"},{name:"day",type:"number",required:!0,description:"The day of month"},{name:"hour",type:"number",required:!1,description:"The hour (0-23)"},{name:"minute",type:"number",required:!1,description:"The minute (0-59)"},{name:"second",type:"number",required:!1,description:"The second (0-59)"},{name:"millisecond",type:"number",required:!1,description:"The millisecond (0-999)"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"Date",description:"A new Date object with specified components"},example:"const date = createDate(2025, 1, 15, 10, 30, 0, 0);"},{id:"utcNow",name:"utcNow",description:"Gets the current date and time in UTC",signature:"utcNow(): Date",parameters:[],returns:{type:"Date",description:"Current Date in UTC"},example:"const now = utcNow();"},{id:"toUTC",name:"toUTC",description:"Converts a date to UTC timezone",signature:"toUTC(date: Date | string | number, fromTimezone?: IANATimezone): Date",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The date to convert"},{name:"fromTimezone",type:"IANATimezone",required:!1,description:"Source timezone"}],returns:{type:"Date",description:"Date converted to UTC"},example:"const utcDate = toUTC(new Date(), 'America/New_York');"},{id:"generateDateRange",name:"generateDateRange",description:"Generates an array of dates between start and end dates",signature:"generateDateRange(startDate: Date | string | number, endDate: Date | string | number, interval: number, unit: TimeUnit): Date[]",parameters:[{name:"startDate",type:"Date | string | number",required:!0,description:"Start of range"},{name:"endDate",type:"Date | string | number",required:!0,description:"End of range"},{name:"interval",type:"number",required:!0,description:"Interval between dates"},{name:"unit",type:"TimeUnit",required:!0,description:"Unit for interval"}],returns:{type:"Date[]",description:"Array of Date objects"},example:"const dates = generateDateRange('2025-01-01', '2025-01-07', 1, 'day');"},{id:"getQuarter",name:"getQuarter",description:"Gets the quarter (1-4) for a given date",signature:"getQuarter(date: Date | string | number): number",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The input date"}],returns:{type:"number",description:"Quarter number (1-4)"},example:"const quarter = getQuarter(new Date('2025-03-15')); // 1"},{id:"getDayOfYear",name:"getDayOfYear",description:"Gets the day of year (1-366) for a given date",signature:"getDayOfYear(date: Date | string | number): number",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The input date"}],returns:{type:"number",description:"Day of year number (1-366)"},example:"const dayOfYear = getDayOfYear(new Date('2025-01-01')); // 1"},{id:"getWeekOfYear",name:"getWeekOfYear",description:"Gets the week number of the year for a given date",signature:"getWeekOfYear(date: Date | string | number): number",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The input date"}],returns:{type:"number",description:"Week number of year"},example:"const week = getWeekOfYear(new Date('2025-01-15')); // 3"},{id:"getDaysInMonth",name:"getDaysInMonth",description:"Gets the number of days in a month for a given date",signature:"getDaysInMonth(date: Date | string | number): number",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The input date"}],returns:{type:"number",description:"Number of days in the month"},example:"const days = getDaysInMonth(new Date('2025-02-15')); // 28"},{id:"isLeapYear",name:"isLeapYear",description:"Checks if a given year is a leap year",signature:"isLeapYear(date: Date | string | number | year: number): boolean",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The input date or year"}],returns:{type:"boolean",description:"True if leap year, false otherwise"},example:"const isLeap = isLeapYear(2024); // true"},{id:"getRelativeTime",name:"getRelativeTime",description:'Gets relative time string (e.g., "2 hours ago", "in 3 days")',signature:"getRelativeTime(date: Date | string | number, referenceDate?: Date | string | number): string",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The target date"},{name:"referenceDate",type:"Date | string | number",required:!1,description:"Reference date (defaults to now)"}],returns:{type:"string",description:"Relative time string"},example:"const relative = getRelativeTime(new Date('2025-01-01'));"},{id:"cloneDate",name:"cloneDate",description:"Creates a copy of a Date object",signature:"cloneDate(date: Date): Date",parameters:[{name:"date",type:"Date",required:!0,description:"The date to clone"}],returns:{type:"Date",description:"A new Date object copy"},example:"const clone = cloneDate(new Date());"},{id:"getTimestamp",name:"getTimestamp",description:"Gets the timestamp (milliseconds since epoch) for a date",signature:"getTimestamp(date: Date | string | number): number",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The input date"}],returns:{type:"number",description:"Timestamp in milliseconds"},example:"const timestamp = getTimestamp(new Date());"},{id:"fromTimestamp",name:"fromTimestamp",description:"Creates a Date from a timestamp",signature:"fromTimestamp(timestamp: number): Date",parameters:[{name:"timestamp",type:"number",required:!0,description:"Timestamp in milliseconds"}],returns:{type:"Date",description:"Date object from timestamp"},example:"const date = fromTimestamp(1735689600000);"},{id:"randomDate",name:"randomDate",description:"Generates a random date between two dates",signature:"randomDate(startDate: Date | string | number, endDate: Date | string | number): Date",parameters:[{name:"startDate",type:"Date | string | number",required:!0,description:"Start of range"},{name:"endDate",type:"Date | string | number",required:!0,description:"End of range"}],returns:{type:"Date",description:"Random Date within range"},example:"const random = randomDate('2025-01-01', '2025-12-31');"}]},{id:"business",name:"Business Utilities",items:[{id:"getBusinessDays",name:"getBusinessDays",description:"Calculates the number of business days between two dates, excluding weekends and optionally holidays",signature:"getBusinessDays(startDate: Date | string, endDate: Date | string, holidays?: (Date | string)[]): number",parameters:[{name:"startDate",type:"Date | string",required:!0,description:"The start date for the calculation."},{name:"endDate",type:"Date | string",required:!0,description:"The end date for the calculation."},{name:"holidays",type:"(Date | string)[]",required:!1,description:"Optional array of holiday dates to exclude from business days."}],returns:{type:"number",description:"The number of business days between the start and end dates."},example:`// Calculate business days between two dates
const workDays = getBusinessDays('2025-05-01', '2025-05-15');

// With holidays
const workDays = getBusinessDays('2025-05-01', '2025-05-15', ['2025-05-05']);`},{id:"addBusinessDays",name:"addBusinessDays",description:"Adds the specified number of business days to a date",signature:"addBusinessDays(date: Date | string | number, businessDays: number, timezone?: IANATimezone): Date",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The starting date for the calculation."},{name:"businessDays",type:"number",required:!0,description:"The number of business days to add. Can be positive or negative."},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone for timezone-aware calculations."}],returns:{type:"Date",description:"A new Date object with the specified business days added."},example:`// Add 5 business days to Friday, Jan 5, 2024
const newDate = addBusinessDays(new Date('2024-01-05'), 5);
// Returns: Friday, Jan 12, 2024 (skips weekends)`},{id:"calculateAge",name:"calculateAge",description:"Calculates age in years from a birth date",signature:"calculateAge(birthDate: Date | string | number, referenceDate?: Date | string | number): number",parameters:[{name:"birthDate",type:"Date | string | number",required:!0,description:"The birth date"},{name:"referenceDate",type:"Date | string | number",required:!1,description:"Reference date (defaults to today)"}],returns:{type:"number",description:"Age in years"},example:"const age = calculateAge('1990-05-15');"},{id:"configureWorkingDays",name:"configureWorkingDays",description:"Configures which days are considered working days",signature:"configureWorkingDays(workingDays: number[]): WorkingDayConfig",parameters:[{name:"workingDays",type:"number[]",required:!0,description:"Array of working day numbers (0=Sunday, 1=Monday, etc.)"}],returns:{type:"WorkingDayConfig",description:"Configuration object"},example:"configureWorkingDays([1, 2, 3, 4, 5]);"},{id:"configureHolidays",name:"configureHolidays",description:"Configures holiday dates for business day calculations",signature:"configureHolidays(holidays: (Date | string)[]): HolidayConfig",parameters:[{name:"holidays",type:"(Date | string)[]",required:!0,description:"Array of holiday dates"}],returns:{type:"HolidayConfig",description:"Configuration object"},example:"configureHolidays(['2025-01-01', '2025-07-04', '2025-12-25']);"},{id:"isWeekend",name:"isWeekend",description:"Checks if a date falls on a weekend",signature:"isWeekend(date: Date | string | number): boolean",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The date to check"}],returns:{type:"boolean",description:"True if weekend, false otherwise"},example:"const weekend = isWeekend(new Date('2025-01-11')); // true"},{id:"isWeekday",name:"isWeekday",description:"Checks if a date falls on a weekday",signature:"isWeekday(date: Date | string | number): boolean",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The date to check"}],returns:{type:"boolean",description:"True if weekday, false otherwise"},example:"const weekday = isWeekday(new Date('2025-01-13')); // true"},{id:"isBusinessDay",name:"isBusinessDay",description:"Checks if a date is a business day (weekday and not a holiday)",signature:"isBusinessDay(date: Date | string | number): boolean",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The date to check"}],returns:{type:"boolean",description:"True if the date is a business day"},example:"const isWorkDay = isBusinessDay(new Date('2024-01-08'));"},{id:"subtractBusinessDays",name:"subtractBusinessDays",description:"Subtracts business days from a date",signature:"subtractBusinessDays(date: Date | string | number, businessDays: number, timezone?: IANATimezone): Date",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The starting date"},{name:"businessDays",type:"number",required:!0,description:"Number of business days to subtract"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"Date",description:"Date with business days subtracted"},example:"const newDate = subtractBusinessDays(new Date('2025-01-15'), 5);"},{id:"getNextBusinessDay",name:"getNextBusinessDay",description:"Gets the next business day after a given date",signature:"getNextBusinessDay(date: Date | string | number, timezone?: IANATimezone): Date",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The reference date"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"Date",description:"Next business day"},example:"const nextBD = getNextBusinessDay(new Date('2025-01-10'));"},{id:"getPreviousBusinessDay",name:"getPreviousBusinessDay",description:"Gets the previous business day before a given date",signature:"getPreviousBusinessDay(date: Date | string | number, timezone?: IANATimezone): Date",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The reference date"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"Date",description:"Previous business day"},example:"const prevBD = getPreviousBusinessDay(new Date('2025-01-13'));"},{id:"businessDaysInMonth",name:"businessDaysInMonth",description:"Calculates the total number of business days in a given month",signature:"businessDaysInMonth(year: number, month: number, timezone?: IANATimezone): number",parameters:[{name:"year",type:"number",required:!0,description:"The year"},{name:"month",type:"number",required:!0,description:"The month (1-12)"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"number",description:"Number of business days in the month"},example:"const businessDays = businessDaysInMonth(2025, 1);"},{id:"differenceInBusinessDays",name:"differenceInBusinessDays",description:"Calculates the difference in business days between two dates",signature:"differenceInBusinessDays(startDate: Date | string | number, endDate: Date | string | number, timezone?: IANATimezone): number",parameters:[{name:"startDate",type:"Date | string | number",required:!0,description:"The start date"},{name:"endDate",type:"Date | string | number",required:!0,description:"The end date"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"number",description:"Difference in business days"},example:"const diff = differenceInBusinessDays('2025-01-01', '2025-01-15');"},{id:"isFirstBusinessDayOfMonth",name:"isFirstBusinessDayOfMonth",description:"Checks if a given date is the first business day of the month",signature:"isFirstBusinessDayOfMonth(date: Date | string | number, timezone?: IANATimezone): boolean",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The date to check"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"boolean",description:"True if it is the first business day"},example:"const isFirst = isFirstBusinessDayOfMonth(new Date('2025-01-02'));"},{id:"isLastBusinessDayOfMonth",name:"isLastBusinessDayOfMonth",description:"Checks if a given date is the last business day of the month",signature:"isLastBusinessDayOfMonth(date: Date | string | number, timezone?: IANATimezone): boolean",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The date to check"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"boolean",description:"True if it is the last business day"},example:"const isLast = isLastBusinessDayOfMonth(new Date('2025-01-31'));"},{id:"getFirstBusinessDayOfMonth",name:"getFirstBusinessDayOfMonth",description:"Gets the first business day of a given month",signature:"getFirstBusinessDayOfMonth(year: number, month: number, timezone?: IANATimezone): Date",parameters:[{name:"year",type:"number",required:!0,description:"The year"},{name:"month",type:"number",required:!0,description:"The month (1-12)"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"Date",description:"First business day of the month"},example:"const firstBD = getFirstBusinessDayOfMonth(2025, 1);"},{id:"getLastBusinessDayOfMonth",name:"getLastBusinessDayOfMonth",description:"Gets the last business day of a given month",signature:"getLastBusinessDayOfMonth(year: number, month: number, timezone?: IANATimezone): Date",parameters:[{name:"year",type:"number",required:!0,description:"The year"},{name:"month",type:"number",required:!0,description:"The month (1-12)"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"Date",description:"Last business day of the month"},example:"const lastBD = getLastBusinessDayOfMonth(2025, 1);"},{id:"getBusinessDaysInRange",name:"getBusinessDaysInRange",description:"Gets all business days within a date range",signature:"getBusinessDaysInRange(startDate: Date | string | number, endDate: Date | string | number, timezone?: IANATimezone): Date[]",parameters:[{name:"startDate",type:"Date | string | number",required:!0,description:"The start date"},{name:"endDate",type:"Date | string | number",required:!0,description:"The end date"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"Date[]",description:"Array of business days in range"},example:"const businessDays = getBusinessDaysInRange('2025-01-01', '2025-01-15');"},{id:"calculateWorkingHours",name:"calculateWorkingHours",description:"Calculates working hours between two dates based on business configuration",signature:"calculateWorkingHours(startDate: Date | string | number, endDate: Date | string | number, timezone?: IANATimezone): number",parameters:[{name:"startDate",type:"Date | string | number",required:!0,description:"The start date/time"},{name:"endDate",type:"Date | string | number",required:!0,description:"The end date/time"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"number",description:"Total working hours"},example:"const hours = calculateWorkingHours('2025-01-13 09:00', '2025-01-15 17:00');"},{id:"addBusinessHours",name:"addBusinessHours",description:"Adds business hours to a date, respecting working hours configuration",signature:"addBusinessHours(date: Date | string | number, hours: number, timezone?: IANATimezone): Date",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The start date/time"},{name:"hours",type:"number",required:!0,description:"Number of business hours to add"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"Date",description:"Date after adding business hours"},example:"const result = addBusinessHours('2025-01-13 09:00', 16);"},{id:"subtractBusinessHours",name:"subtractBusinessHours",description:"Subtracts business hours from a date, respecting working hours configuration",signature:"subtractBusinessHours(date: Date | string | number, hours: number, timezone?: IANATimezone): Date",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The start date/time"},{name:"hours",type:"number",required:!0,description:"Number of business hours to subtract"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"Date",description:"Date after subtracting business hours"},example:"const result = subtractBusinessHours('2025-01-13 17:00', 8);"},{id:"isBusinessHour",name:"isBusinessHour",description:"Checks if a given date/time falls within configured business hours",signature:"isBusinessHour(date: Date | string | number, timezone?: IANATimezone): boolean",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The date/time to check"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"boolean",description:"True if within business hours"},example:"const isBizHour = isBusinessHour('2025-01-13 14:30');"},{id:"getQuarterStart",name:"getQuarterStart",description:"Gets the start date of the quarter for a given date",signature:"getQuarterStart(date: Date | string | number, timezone?: IANATimezone): Date",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The reference date"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"Date",description:"Start of the quarter"},example:"const qStart = getQuarterStart(new Date('2025-05-15'));"},{id:"getQuarterEnd",name:"getQuarterEnd",description:"Gets the end date of the quarter for a given date",signature:"getQuarterEnd(date: Date | string | number, timezone?: IANATimezone): Date",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The reference date"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"Date",description:"End of the quarter"},example:"const qEnd = getQuarterEnd(new Date('2025-05-15'));"},{id:"getFiscalYear",name:"getFiscalYear",description:"Gets the fiscal year for a given date based on configuration",signature:"getFiscalYear(date: Date | string | number, fiscalStartMonth?: number, timezone?: IANATimezone): number",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The reference date"},{name:"fiscalStartMonth",type:"number",required:!1,description:"Fiscal year start month (1-12)"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"number",description:"Fiscal year"},example:"const fiscalYear = getFiscalYear(new Date('2025-05-15'), 4);"},{id:"getFiscalQuarter",name:"getFiscalQuarter",description:"Gets the fiscal quarter for a given date based on configuration",signature:"getFiscalQuarter(date: Date | string | number, fiscalStartMonth?: number, timezone?: IANATimezone): number",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The reference date"},{name:"fiscalStartMonth",type:"number",required:!1,description:"Fiscal year start month (1-12)"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"number",description:"Fiscal quarter (1-4)"},example:"const fiscalQ = getFiscalQuarter(new Date('2025-05-15'), 4);"},{id:"calculatePayrollPeriod",name:"calculatePayrollPeriod",description:"Calculates payroll period information for a given date",signature:"calculatePayrollPeriod(date: Date | string | number, frequency: PayrollFrequency, timezone?: IANATimezone): PayrollPeriod",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The reference date"},{name:"frequency",type:"PayrollFrequency",required:!0,description:"Payroll frequency (weekly, biweekly, monthly, etc.)"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"PayrollPeriod",description:"Payroll period information"},example:"const payroll = calculatePayrollPeriod(new Date(), 'biweekly');"},{id:"getPayrollDates",name:"getPayrollDates",description:"Gets all payroll dates for a given year and frequency",signature:"getPayrollDates(year: number, frequency: PayrollFrequency, timezone?: IANATimezone): Date[]",parameters:[{name:"year",type:"number",required:!0,description:"The year"},{name:"frequency",type:"PayrollFrequency",required:!0,description:"Payroll frequency"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"Date[]",description:"Array of payroll dates"},example:"const payrollDates = getPayrollDates(2025, 'biweekly');"},{id:"calculateSLADeadline",name:"calculateSLADeadline",description:"Calculates SLA deadline based on business days/hours configuration",signature:"calculateSLADeadline(startDate: Date | string | number, slaHours: number, timezone?: IANATimezone): Date",parameters:[{name:"startDate",type:"Date | string | number",required:!0,description:"SLA start date/time"},{name:"slaHours",type:"number",required:!0,description:"SLA duration in business hours"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"Date",description:"SLA deadline date/time"},example:"const deadline = calculateSLADeadline(new Date(), 48);"},{id:"isSLAMet",name:"isSLAMet",description:"Checks if an SLA was met based on start date, completion date, and SLA duration",signature:"isSLAMet(startDate: Date | string | number, completionDate: Date | string | number, slaHours: number, timezone?: IANATimezone): boolean",parameters:[{name:"startDate",type:"Date | string | number",required:!0,description:"SLA start date/time"},{name:"completionDate",type:"Date | string | number",required:!0,description:"Task completion date/time"},{name:"slaHours",type:"number",required:!0,description:"SLA duration in business hours"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"boolean",description:"True if SLA was met"},example:"const met = isSLAMet(startDate, completionDate, 24);"},{id:"calculateSLACompliance",name:"calculateSLACompliance",description:"Calculates SLA compliance percentage for a set of tasks",signature:"calculateSLACompliance(tasks: SLATask[], timezone?: IANATimezone): SLACompliance",parameters:[{name:"tasks",type:"SLATask[]",required:!0,description:"Array of SLA task objects"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"SLACompliance",description:"SLA compliance statistics"},example:"const compliance = calculateSLACompliance(taskArray);"}]},{id:"formatting",name:"Formatting & Parsing",items:[{id:"formatDuration",name:"formatDuration",description:"Converts milliseconds into a human-readable duration string",signature:"formatDuration(milliseconds: number, options?: DurationDisplayOptions): string",parameters:[{name:"milliseconds",type:"number",required:!0,description:"The duration in milliseconds to format."},{name:"options",type:"DurationDisplayOptions",required:!1,description:"Optional formatting options to customize the output."}],returns:{type:"string",description:'A human-readable duration string (e.g., "2 days, 4 hours, 30 minutes").'},example:`// "2 days, 4 hours, 30 minutes"
const duration = formatDuration(189000000);

// With options
const duration = formatDuration(189000000, { 
  longFormat: true, 
  maxUnits: 2 
});`},{id:"parseNaturalLanguage",name:"parseNaturalLanguage",description:"Parses natural language time expressions into dates",signature:"parseNaturalLanguage(expression: NaturalTimeExpression, options?: NaturalLanguageOptions): Date | null",parameters:[{name:"expression",type:"NaturalTimeExpression",required:!0,description:'Natural language expression to parse (e.g., "tomorrow", "next Friday").'},{name:"options",type:"NaturalLanguageOptions",required:!1,description:"Optional parsing options to customize behavior."}],returns:{type:"Date | null",description:"Parsed Date object or null if the expression could not be parsed."},example:`const tomorrow = parseNaturalLanguage('tomorrow');
// Returns: Date object for tomorrow at 00:00:00

const nextFriday = parseNaturalLanguage('next friday');
// Returns: Date object for next Friday at 00:00:00`},{id:"formatISO",name:"formatISO",description:"Formats a date in ISO 8601 format",signature:"formatISO(date: Date | string | number, timezone?: IANATimezone): string",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The date to format"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"string",description:"ISO 8601 formatted date string"},example:"const iso = formatISO(new Date());"},{id:"formatRelative",name:"formatRelative",description:'Formats a date as relative time (e.g., "2 hours ago", "in 3 days")',signature:"formatRelative(date: Date | string | number, baseDate?: Date | string | number, options?: RelativeFormatOptions): string",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The date to format"},{name:"baseDate",type:"Date | string | number",required:!1,description:"Base date for comparison (defaults to now)"},{name:"options",type:"RelativeFormatOptions",required:!1,description:"Formatting options"}],returns:{type:"string",description:"Relative time string"},example:"const rel = formatRelative(new Date('2025-01-10'));"},{id:"formatCustom",name:"formatCustom",description:"Formats a date using a custom format string",signature:"formatCustom(date: Date | string | number, format: string, timezone?: IANATimezone): string",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The date to format"},{name:"format",type:"string",required:!0,description:'Custom format string (e.g., "YYYY-MM-DD HH:mm:ss")'},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"string",description:"Custom formatted date string"},example:"const custom = formatCustom(new Date(), 'YYYY-MM-DD HH:mm:ss');"},{id:"parseCustomFormat",name:"parseCustomFormat",description:"Parses a date string using a specified custom format",signature:"parseCustomFormat(dateString: string, format: string, timezone?: IANATimezone): Date | null",parameters:[{name:"dateString",type:"string",required:!0,description:"The date string to parse"},{name:"format",type:"string",required:!0,description:"Expected format string"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"Date | null",description:"Parsed Date object or null if parsing failed"},example:"const date = parseCustomFormat('2025-01-15 14:30:00', 'YYYY-MM-DD HH:mm:ss');"},{id:"formatLocalized",name:"formatLocalized",description:"Formats a date using locale-specific formatting",signature:"formatLocalized(date: Date | string | number, locale: string, options?: Intl.DateTimeFormatOptions): string",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The date to format"},{name:"locale",type:"string",required:!0,description:'Locale string (e.g., "en-US", "fr-FR")'},{name:"options",type:"Intl.DateTimeFormatOptions",required:!1,description:"Intl formatting options"}],returns:{type:"string",description:"Localized date string"},example:"const localized = formatLocalized(new Date(), 'fr-FR');"},{id:"formatDistance",name:"formatDistance",description:"Formats the distance between two dates in words",signature:"formatDistance(dateLeft: Date | string | number, dateRight: Date | string | number, options?: DistanceFormatOptions): string",parameters:[{name:"dateLeft",type:"Date | string | number",required:!0,description:"First date"},{name:"dateRight",type:"Date | string | number",required:!0,description:"Second date"},{name:"options",type:"DistanceFormatOptions",required:!1,description:"Formatting options"}],returns:{type:"string",description:'Distance in words (e.g., "2 months")'},example:"const distance = formatDistance(new Date(), new Date('2025-03-15'));"},{id:"formatDistanceStrict",name:"formatDistanceStrict",description:"Formats distance between dates with strict unit precision",signature:"formatDistanceStrict(dateLeft: Date | string | number, dateRight: Date | string | number, options?: StrictDistanceOptions): string",parameters:[{name:"dateLeft",type:"Date | string | number",required:!0,description:"First date"},{name:"dateRight",type:"Date | string | number",required:!0,description:"Second date"},{name:"options",type:"StrictDistanceOptions",required:!1,description:"Strict formatting options"}],returns:{type:"string",description:"Precise distance string"},example:"const strict = formatDistanceStrict(new Date(), new Date('2025-03-15'));"},{id:"parseISO",name:"parseISO",description:"Parses an ISO 8601 date string",signature:"parseISO(isoString: string, timezone?: IANATimezone): Date | null",parameters:[{name:"isoString",type:"string",required:!0,description:"ISO 8601 date string"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"Date | null",description:"Parsed Date object or null"},example:"const date = parseISO('2025-01-15T14:30:00Z');"},{id:"parseTimestamp",name:"parseTimestamp",description:"Parses a Unix timestamp (seconds or milliseconds)",signature:"parseTimestamp(timestamp: number, isSeconds?: boolean): Date",parameters:[{name:"timestamp",type:"number",required:!0,description:"Unix timestamp"},{name:"isSeconds",type:"boolean",required:!1,description:"Whether timestamp is in seconds (default: false, milliseconds)"}],returns:{type:"Date",description:"Date object from timestamp"},example:"const date = parseTimestamp(1705312200, true);"},{id:"toTimestamp",name:"toTimestamp",description:"Converts a date to Unix timestamp",signature:"toTimestamp(date: Date | string | number, inSeconds?: boolean): number",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The date to convert"},{name:"inSeconds",type:"boolean",required:!1,description:"Return seconds instead of milliseconds"}],returns:{type:"number",description:"Unix timestamp"},example:"const timestamp = toTimestamp(new Date());"},{id:"formatTimeAgo",name:"formatTimeAgo",description:'Formats how long ago a date was (e.g., "5 minutes ago")',signature:"formatTimeAgo(date: Date | string | number, options?: TimeAgoOptions): string",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The past date"},{name:"options",type:"TimeAgoOptions",required:!1,description:"Formatting options"}],returns:{type:"string",description:"Time ago string"},example:"const ago = formatTimeAgo(new Date('2025-01-01'));"},{id:"formatCalendar",name:"formatCalendar",description:"Formats a date in calendar format (Today, Yesterday, Tomorrow, or date)",signature:"formatCalendar(date: Date | string | number, referenceDate?: Date | string | number): string",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The date to format"},{name:"referenceDate",type:"Date | string | number",required:!1,description:"Reference date (default: today)"}],returns:{type:"string",description:"Calendar format string"},example:"const cal = formatCalendar(new Date());"},{id:"parseStringWithFormats",name:"parseStringWithFormats",description:"Attempts to parse a date string using multiple format patterns",signature:"parseStringWithFormats(dateString: string, formats: string[], timezone?: IANATimezone): Date | null",parameters:[{name:"dateString",type:"string",required:!0,description:"The date string to parse"},{name:"formats",type:"string[]",required:!0,description:"Array of format patterns to try"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"Date | null",description:"Parsed Date object or null"},example:"const date = parseStringWithFormats('01/15/2025', ['MM/DD/YYYY', 'DD/MM/YYYY']);"},{id:"formatHumanReadable",name:"formatHumanReadable",description:"Formats a date in a human-friendly readable format",signature:"formatHumanReadable(date: Date | string | number, options?: HumanReadableOptions): string",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The date to format"},{name:"options",type:"HumanReadableOptions",required:!1,description:"Formatting options"}],returns:{type:"string",description:"Human readable date string"},example:"const readable = formatHumanReadable(new Date());"},{id:"parseFlexible",name:"parseFlexible",description:"Flexibly parses various date string formats",signature:"parseFlexible(dateString: string, timezone?: IANATimezone): Date | null",parameters:[{name:"dateString",type:"string",required:!0,description:"Date string in various formats"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"Date | null",description:"Parsed Date object or null"},example:"const date = parseFlexible('Jan 15, 2025');"},{id:"formatAge",name:"formatAge",description:"Formats a person's age from birthdate",signature:"formatAge(birthDate: Date | string | number, options?: AgeFormatOptions): string",parameters:[{name:"birthDate",type:"Date | string | number",required:!0,description:"Birth date"},{name:"options",type:"AgeFormatOptions",required:!1,description:"Age formatting options"}],returns:{type:"string",description:"Formatted age string"},example:"const age = formatAge(new Date('1990-05-15'));"},{id:"formatMonth",name:"formatMonth",description:"Formats month name in various styles",signature:"formatMonth(date: Date | string | number, style?: MonthStyle, locale?: string): string",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The date"},{name:"style",type:"MonthStyle",required:!1,description:"Month style (long, short, narrow, numeric)"},{name:"locale",type:"string",required:!1,description:"Locale for formatting"}],returns:{type:"string",description:"Formatted month string"},example:"const month = formatMonth(new Date(), 'long', 'en-US');"},{id:"formatWeekday",name:"formatWeekday",description:"Formats weekday name in various styles",signature:"formatWeekday(date: Date | string | number, style?: WeekdayStyle, locale?: string): string",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The date"},{name:"style",type:"WeekdayStyle",required:!1,description:"Weekday style (long, short, narrow)"},{name:"locale",type:"string",required:!1,description:"Locale for formatting"}],returns:{type:"string",description:"Formatted weekday string"},example:"const weekday = formatWeekday(new Date(), 'long', 'en-US');"},{id:"formatOrdinal",name:"formatOrdinal",description:"Formats day with ordinal suffix (1st, 2nd, 3rd, etc.)",signature:"formatOrdinal(date: Date | string | number, locale?: string): string",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The date"},{name:"locale",type:"string",required:!1,description:"Locale for ordinal rules"}],returns:{type:"string",description:"Day with ordinal suffix"},example:"const ordinal = formatOrdinal(new Date());"},{id:"parseAndValidate",name:"parseAndValidate",description:"Parses a date string and validates it against constraints",signature:"parseAndValidate(dateString: string, constraints?: DateConstraints): ParseResult",parameters:[{name:"dateString",type:"string",required:!0,description:"Date string to parse"},{name:"constraints",type:"DateConstraints",required:!1,description:"Validation constraints"}],returns:{type:"ParseResult",description:"Parse result with validation info"},example:"const result = parseAndValidate('2025-01-15', { minDate: '2025-01-01' });"},{id:"formatRange",name:"formatRange",description:"Formats a date range in a localized, readable format",signature:"formatRange(startDate: Date | string | number, endDate: Date | string | number, options?: RangeFormatOptions): string",parameters:[{name:"startDate",type:"Date | string | number",required:!0,description:"Start date of range"},{name:"endDate",type:"Date | string | number",required:!0,description:"End date of range"},{name:"options",type:"RangeFormatOptions",required:!1,description:"Range formatting options"}],returns:{type:"string",description:"Formatted date range string"},example:"const range = formatRange('2025-01-01', '2025-01-31');"},{id:"formatCompact",name:"formatCompact",description:"Formats a date in a compact, space-efficient format",signature:"formatCompact(date: Date | string | number, options?: CompactFormatOptions): string",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The date to format"},{name:"options",type:"CompactFormatOptions",required:!1,description:"Compact formatting options"}],returns:{type:"string",description:"Compact formatted date string"},example:"const compact = formatCompact(new Date());"},{id:"parseWithFallback",name:"parseWithFallback",description:"Parses a date string with fallback to default value on failure",signature:"parseWithFallback(dateString: string, fallback: Date | string | number, formats?: string[]): Date",parameters:[{name:"dateString",type:"string",required:!0,description:"Date string to parse"},{name:"fallback",type:"Date | string | number",required:!0,description:"Fallback date if parsing fails"},{name:"formats",type:"string[]",required:!1,description:"Optional format patterns to try"}],returns:{type:"Date",description:"Parsed date or fallback date"},example:"const date = parseWithFallback('invalid', new Date());"},{id:"formatJSON",name:"formatJSON",description:"Formats a date for JSON serialization",signature:"formatJSON(date: Date | string | number): string",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The date to format"}],returns:{type:"string",description:"JSON-safe date string"},example:"const json = formatJSON(new Date());"},{id:"parseJSON",name:"parseJSON",description:"Parses a JSON date string back to Date object",signature:"parseJSON(jsonString: string): Date | null",parameters:[{name:"jsonString",type:"string",required:!0,description:"JSON date string"}],returns:{type:"Date | null",description:"Parsed Date object or null"},example:"const date = parseJSON('2025-01-15T14:30:00.000Z');"},{id:"formatSmart",name:"formatSmart",description:"Intelligently formats dates based on context and proximity",signature:"formatSmart(date: Date | string | number, options?: SmartFormatOptions): string",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The date to format"},{name:"options",type:"SmartFormatOptions",required:!1,description:"Smart formatting options"}],returns:{type:"string",description:"Context-aware formatted date"},example:"const smart = formatSmart(new Date());"},{id:"smartParse",name:"smartParse",description:"Intelligently parses various date formats using AI-like pattern recognition",signature:"smartParse(input: string, options?: SmartParseOptions): Date | null",parameters:[{name:"input",type:"string",required:!0,description:"Input string to parse"},{name:"options",type:"SmartParseOptions",required:!1,description:"Smart parsing options"}],returns:{type:"Date | null",description:"Intelligently parsed Date or null"},example:"const date = smartParse('next Tuesday at 3pm');"}]},{id:"timezone",name:"Timezone & Localization",items:[{id:"getTimezoneOffset",name:"getTimezoneOffset",description:"Gets the timezone offset for a specific timezone and date",signature:"getTimezoneOffset(timezone: IANATimezone, date?: Date | string | number): number",parameters:[{name:"timezone",type:"IANATimezone",required:!0,description:"IANA timezone identifier"},{name:"date",type:"Date | string | number",required:!1,description:"Reference date (default: now)"}],returns:{type:"number",description:"Timezone offset in minutes"},example:"const offset = getTimezoneOffset('America/New_York');"},{id:"convertTimezone",name:"convertTimezone",description:"Converts a date from one timezone to another",signature:"convertTimezone(date: Date | string | number, fromTimezone: IANATimezone, toTimezone: IANATimezone): Date",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The date to convert"},{name:"fromTimezone",type:"IANATimezone",required:!0,description:"Source timezone"},{name:"toTimezone",type:"IANATimezone",required:!0,description:"Target timezone"}],returns:{type:"Date",description:"Date converted to target timezone"},example:"const converted = convertTimezone(new Date(), 'UTC', 'America/New_York');"},{id:"formatInTimezone",name:"formatInTimezone",description:"Formats a date in a specific timezone",signature:"formatInTimezone(date: Date | string | number, timezone: IANATimezone, format?: string): string",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The date to format"},{name:"timezone",type:"IANATimezone",required:!0,description:"Target timezone"},{name:"format",type:"string",required:!1,description:"Format string (default: ISO)"}],returns:{type:"string",description:"Formatted date in timezone"},example:"const formatted = formatInTimezone(new Date(), 'Europe/London');"},{id:"getTimezoneAbbreviation",name:"getTimezoneAbbreviation",description:"Gets the timezone abbreviation for a specific timezone and date",signature:"getTimezoneAbbreviation(timezone: IANATimezone, date?: Date | string | number): string",parameters:[{name:"timezone",type:"IANATimezone",required:!0,description:"IANA timezone identifier"},{name:"date",type:"Date | string | number",required:!1,description:"Reference date (default: now)"}],returns:{type:"string",description:'Timezone abbreviation (e.g., "EST", "PST")'},example:"const abbr = getTimezoneAbbreviation('America/New_York');"},{id:"listTimezones",name:"listTimezones",description:"Gets a list of all available IANA timezones, optionally filtered by region",signature:"listTimezones(region?: string): string[]",parameters:[{name:"region",type:"string",required:!1,description:'Optional region filter (e.g., "America", "Europe")'}],returns:{type:"string[]",description:"Array of IANA timezone identifiers"},example:"const timezones = listTimezones('America');"}]},{id:"comparison",name:"Comparison & Validation",items:[{id:"isBetweenDates",name:"isBetweenDates",description:"Checks if a date falls between two other dates",signature:"isBetweenDates(date: Date | string | number, startDate: Date | string | number, endDate: Date | string | number, inclusive?: boolean): boolean",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"Date to check"},{name:"startDate",type:"Date | string | number",required:!0,description:"Start of range"},{name:"endDate",type:"Date | string | number",required:!0,description:"End of range"},{name:"inclusive",type:"boolean",required:!1,description:"Include boundaries (default: true)"}],returns:{type:"boolean",description:"True if date is between start and end"},example:"const between = isBetweenDates('2025-01-15', '2025-01-01', '2025-01-31');"},{id:"compareAsc",name:"compareAsc",description:"Compares two dates in ascending order",signature:"compareAsc(dateLeft: Date | string | number, dateRight: Date | string | number): number",parameters:[{name:"dateLeft",type:"Date | string | number",required:!0,description:"First date"},{name:"dateRight",type:"Date | string | number",required:!0,description:"Second date"}],returns:{type:"number",description:"1 if left > right, -1 if left < right, 0 if equal"},example:"const result = compareAsc('2025-01-15', '2025-01-10');"},{id:"compareDesc",name:"compareDesc",description:"Compares two dates in descending order",signature:"compareDesc(dateLeft: Date | string | number, dateRight: Date | string | number): number",parameters:[{name:"dateLeft",type:"Date | string | number",required:!0,description:"First date"},{name:"dateRight",type:"Date | string | number",required:!0,description:"Second date"}],returns:{type:"number",description:"1 if left < right, -1 if left > right, 0 if equal"},example:"const result = compareDesc('2025-01-15', '2025-01-10');"},{id:"isDateEqual",name:"isDateEqual",description:"Checks if two dates are exactly equal",signature:"isDateEqual(dateLeft: Date | string | number, dateRight: Date | string | number): boolean",parameters:[{name:"dateLeft",type:"Date | string | number",required:!0,description:"First date"},{name:"dateRight",type:"Date | string | number",required:!0,description:"Second date"}],returns:{type:"boolean",description:"True if dates are equal"},example:"const equal = isDateEqual('2025-01-15', new Date('2025-01-15'));"},{id:"isDateBefore",name:"isDateBefore",description:"Checks if first date is before second date",signature:"isDateBefore(date: Date | string | number, dateToCompare: Date | string | number): boolean",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"Date to check"},{name:"dateToCompare",type:"Date | string | number",required:!0,description:"Date to compare against"}],returns:{type:"boolean",description:"True if date is before dateToCompare"},example:"const before = isDateBefore('2025-01-10', '2025-01-15');"},{id:"isDateAfter",name:"isDateAfter",description:"Checks if first date is after second date",signature:"isDateAfter(date: Date | string | number, dateToCompare: Date | string | number): boolean",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"Date to check"},{name:"dateToCompare",type:"Date | string | number",required:!0,description:"Date to compare against"}],returns:{type:"boolean",description:"True if date is after dateToCompare"},example:"const after = isDateAfter('2025-01-20', '2025-01-15');"},{id:"isWithinRange",name:"isWithinRange",description:"Checks if a date is within a specified range",signature:"isWithinRange(date: Date | string | number, range: DateRange): boolean",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"Date to check"},{name:"range",type:"DateRange",required:!0,description:"Date range object with start and end"}],returns:{type:"boolean",description:"True if date is within range"},example:"const withinRange = isWithinRange('2025-01-15', { start: '2025-01-01', end: '2025-01-31' });"},{id:"validateDateString",name:"validateDateString",description:"Validates if a string represents a valid date",signature:"validateDateString(dateString: string, format?: string): ValidationResult",parameters:[{name:"dateString",type:"string",required:!0,description:"Date string to validate"},{name:"format",type:"string",required:!1,description:"Expected format (optional)"}],returns:{type:"ValidationResult",description:"Validation result with details"},example:"const valid = validateDateString('2025-01-15');"},{id:"isValidDate",name:"isValidDate",description:"Checks if a value represents a valid date",signature:"isValidDate(date: any): boolean",parameters:[{name:"date",type:"any",required:!0,description:"Value to check"}],returns:{type:"boolean",description:"True if valid date"},example:"const valid = isValidDate(new Date());"},{id:"isLeapYear",name:"isLeapYear",description:"Checks if a given year is a leap year",signature:"isLeapYear(year: number): boolean",parameters:[{name:"year",type:"number",required:!0,description:"Year to check"}],returns:{type:"boolean",description:"True if leap year"},example:"const isLeap = isLeapYear(2024);"},{id:"isDateInFuture",name:"isDateInFuture",description:"Checks if a date is in the future",signature:"isDateInFuture(date: Date | string | number): boolean",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"Date to check"}],returns:{type:"boolean",description:"True if date is in the future"},example:"const inFuture = isDateInFuture('2025-12-31');"},{id:"isDateInPast",name:"isDateInPast",description:"Checks if a date is in the past",signature:"isDateInPast(date: Date | string | number): boolean",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"Date to check"}],returns:{type:"boolean",description:"True if date is in the past"},example:"const inPast = isDateInPast('2024-01-01');"},{id:"isToday",name:"isToday",description:"Checks if a date is today",signature:"isToday(date: Date | string | number, timezone?: IANATimezone): boolean",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"Date to check"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"boolean",description:"True if date is today"},example:"const isCurrentDay = isToday(new Date());"},{id:"isYesterday",name:"isYesterday",description:"Checks if a date was yesterday",signature:"isYesterday(date: Date | string | number, timezone?: IANATimezone): boolean",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"Date to check"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"boolean",description:"True if date was yesterday"},example:"const wasYesterday = isYesterday('2025-01-12');"},{id:"isTomorrow",name:"isTomorrow",description:"Checks if a date is tomorrow",signature:"isTomorrow(date: Date | string | number, timezone?: IANATimezone): boolean",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"Date to check"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"boolean",description:"True if date is tomorrow"},example:"const willBeTomorrow = isTomorrow('2025-01-14');"},{id:"isThisWeek",name:"isThisWeek",description:"Checks if a date falls within the current week",signature:"isThisWeek(date: Date | string | number, timezone?: IANATimezone): boolean",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"Date to check"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"boolean",description:"True if date is this week"},example:"const thisWeek = isThisWeek('2025-01-15');"},{id:"isThisMonth",name:"isThisMonth",description:"Checks if a date falls within the current month",signature:"isThisMonth(date: Date | string | number, timezone?: IANATimezone): boolean",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"Date to check"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"boolean",description:"True if date is this month"},example:"const thisMonth = isThisMonth('2025-01-15');"},{id:"isThisYear",name:"isThisYear",description:"Checks if a date falls within the current year",signature:"isThisYear(date: Date | string | number, timezone?: IANATimezone): boolean",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"Date to check"},{name:"timezone",type:"IANATimezone",required:!1,description:"Optional timezone"}],returns:{type:"boolean",description:"True if date is this year"},example:"const thisYear = isThisYear('2025-01-15');"},{id:"isSameDay",name:"isSameDay",description:"Checks if two dates are on the same day",signature:"isSameDay(dateLeft: Date | string | number, dateRight: Date | string | number): boolean",parameters:[{name:"dateLeft",type:"Date | string | number",required:!0,description:"First date"},{name:"dateRight",type:"Date | string | number",required:!0,description:"Second date"}],returns:{type:"boolean",description:"True if both dates are on the same day"},example:"const sameDay = isSameDay('2025-01-15 10:00', '2025-01-15 20:00');"},{id:"isSameWeek",name:"isSameWeek",description:"Checks if two dates are in the same week",signature:"isSameWeek(dateLeft: Date | string | number, dateRight: Date | string | number): boolean",parameters:[{name:"dateLeft",type:"Date | string | number",required:!0,description:"First date"},{name:"dateRight",type:"Date | string | number",required:!0,description:"Second date"}],returns:{type:"boolean",description:"True if both dates are in the same week"},example:"const sameWeek = isSameWeek('2025-01-13', '2025-01-17');"},{id:"isSameMonth",name:"isSameMonth",description:"Checks if two dates are in the same month",signature:"isSameMonth(dateLeft: Date | string | number, dateRight: Date | string | number): boolean",parameters:[{name:"dateLeft",type:"Date | string | number",required:!0,description:"First date"},{name:"dateRight",type:"Date | string | number",required:!0,description:"Second date"}],returns:{type:"boolean",description:"True if both dates are in the same month"},example:"const sameMonth = isSameMonth('2025-01-01', '2025-01-31');"},{id:"isSameYear",name:"isSameYear",description:"Checks if two dates are in the same year",signature:"isSameYear(dateLeft: Date | string | number, dateRight: Date | string | number): boolean",parameters:[{name:"dateLeft",type:"Date | string | number",required:!0,description:"First date"},{name:"dateRight",type:"Date | string | number",required:!0,description:"Second date"}],returns:{type:"boolean",description:"True if both dates are in the same year"},example:"const sameYear = isSameYear('2025-01-01', '2025-12-31');"},{id:"findEarliest",name:"findEarliest",description:"Finds the earliest date from an array of dates",signature:"findEarliest(dates: (Date | string | number)[]): Date | null",parameters:[{name:"dates",type:"(Date | string | number)[]",required:!0,description:"Array of dates to compare"}],returns:{type:"Date | null",description:"Earliest date or null if array is empty"},example:"const earliest = findEarliest(['2025-01-15', '2025-01-10', '2025-01-20']);"},{id:"findLatest",name:"findLatest",description:"Finds the latest date from an array of dates",signature:"findLatest(dates: (Date | string | number)[]): Date | null",parameters:[{name:"dates",type:"(Date | string | number)[]",required:!0,description:"Array of dates to compare"}],returns:{type:"Date | null",description:"Latest date or null if array is empty"},example:"const latest = findLatest(['2025-01-15', '2025-01-10', '2025-01-20']);"},{id:"findClosestDate",name:"findClosestDate",description:"Finds the date closest to a target date from an array",signature:"findClosestDate(targetDate: Date | string | number, dates: (Date | string | number)[]): Date | null",parameters:[{name:"targetDate",type:"Date | string | number",required:!0,description:"Target date to find closest match for"},{name:"dates",type:"(Date | string | number)[]",required:!0,description:"Array of dates to search"}],returns:{type:"Date | null",description:"Closest date or null if array is empty"},example:"const closest = findClosestDate('2025-01-15', ['2025-01-10', '2025-01-20', '2025-01-12']);"}]},{id:"utilities",name:"Utility Functions",items:[{id:"getConfigs",name:"getConfigs",description:"Gets current ChronoUtilz configuration settings",signature:"getConfigs(): ChronoUtilzConfig",parameters:[],returns:{type:"ChronoUtilzConfig",description:"Current configuration object"},example:"const config = getConfigs();"},{id:"setConfigs",name:"setConfigs",description:"Updates ChronoUtilz configuration settings",signature:"setConfigs(config: Partial<ChronoUtilzConfig>): void",parameters:[{name:"config",type:"Partial<ChronoUtilzConfig>",required:!0,description:"Configuration updates to apply"}],returns:{type:"void",description:"No return value"},example:"setConfigs({ defaultTimezone: 'America/New_York' });"},{id:"resetConfigs",name:"resetConfigs",description:"Resets all configuration settings to defaults",signature:"resetConfigs(): void",parameters:[],returns:{type:"void",description:"No return value"},example:"resetConfigs();"},{id:"getVersion",name:"getVersion",description:"Gets the current version of ChronoUtilz library",signature:"getVersion(): string",parameters:[],returns:{type:"string",description:'Version string (e.g., "1.2.3")'},example:"const version = getVersion();"},{id:"createDateRange",name:"createDateRange",description:"Creates a date range object with validation and utilities",signature:"createDateRange(start: Date | string | number, end: Date | string | number): DateRange",parameters:[{name:"start",type:"Date | string | number",required:!0,description:"Start date of range"},{name:"end",type:"Date | string | number",required:!0,description:"End date of range"}],returns:{type:"DateRange",description:"Date range object with utility methods"},example:"const range = createDateRange('2025-01-01', '2025-01-31');"},{id:"cloneDate",name:"cloneDate",description:"Creates a deep copy of a Date object",signature:"cloneDate(date: Date): Date",parameters:[{name:"date",type:"Date",required:!0,description:"Date to clone"}],returns:{type:"Date",description:"Cloned Date object"},example:"const cloned = cloneDate(originalDate);"},{id:"getQuarter",name:"getQuarter",description:"Gets the quarter (1-4) for a given date",signature:"getQuarter(date: Date | string | number): number",parameters:[{name:"date",type:"Date | string | number",required:!0,description:"The date to get quarter for"}],returns:{type:"number",description:"Quarter number (1-4)"},example:"const quarter = getQuarter(new Date('2025-07-15'));"},{id:"getDaysInMonth",name:"getDaysInMonth",description:"Gets the number of days in a month for a given year",signature:"getDaysInMonth(year: number, month: number): number",parameters:[{name:"year",type:"number",required:!0,description:"Year"},{name:"month",type:"number",required:!0,description:"Month (1-12)"}],returns:{type:"number",description:"Number of days in the month"},example:"const days = getDaysInMonth(2025, 2);"},{id:"getDaysInYear",name:"getDaysInYear",description:"Gets the number of days in a given year (365 or 366 for leap years)",signature:"getDaysInYear(year: number): number",parameters:[{name:"year",type:"number",required:!0,description:"Year to check"}],returns:{type:"number",description:"Number of days in the year"},example:"const daysInYear = getDaysInYear(2024);"},{id:"getTimezonesByRegion",name:"getTimezonesByRegion",description:"Gets all timezones for a specific geographical region",signature:"getTimezonesByRegion(region: string): IANATimezone[]",parameters:[{name:"region",type:"string",required:!0,description:'Region name (e.g., "America", "Europe", "Asia")'}],returns:{type:"IANATimezone[]",description:"Array of IANA timezone identifiers for the region"},example:"const europeTimezones = getTimezonesByRegion('Europe');"}]}]),d=Ue(()=>{if(!a.value)return o.value;const c=a.value.toLowerCase();return o.value.map(u=>{const l=u.items.filter(m=>m.name.toLowerCase().includes(c)||m.description.toLowerCase().includes(c));return{...u,items:l}}).filter(u=>u.items.length>0)});return za(()=>{console.log("API Documentation view mounted")}),(c,u)=>(_(),N("div",Cy,[u[15]||(u[15]=p("div",{class:"api-header bg-white shadow-sm py-6"},[p("div",{class:"container mx-auto px-4"},[p("h1",{class:"text-3xl font-bold text-gray-900"},"API Documentation"),p("p",{class:"text-gray-600 mt-2"},"Detailed reference for all ChronoUtilz functions, parameters, types, and units.")])],-1)),p("div",Iy,[p("div",Ey,[p("div",_y,[p("div",Ny,[be(p("input",{"onUpdate:modelValue":u[0]||(u[0]=l=>a.value=l),type:"text",placeholder:"Search API docs...",class:"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"},null,512),[[Re,a.value]])]),p("nav",null,[p("ul",Yy,[(_(!0),N(X,null,fe(d.value,l=>(_(),N("li",{key:l.id},[p("div",zy,[p("a",{href:"#",onClick:Xt(m=>i(l.id),["prevent"]),class:Ge(["flex-1 px-4 py-2 rounded-lg transition-colors",t.value===l.id?"bg-blue-100 text-blue-700 font-medium":"text-gray-700 hover:bg-gray-100"])},K(l.name),11,Oy),p("button",{onClick:Xt(m=>r(l.id),["prevent"]),class:Ge(["p-2 text-gray-500 hover:text-gray-700 transition-colors",{"text-blue-600":n.value.has(l.id)}])},[(_(),N("svg",{class:Ge(["w-4 h-4 transition-transform",{"rotate-90":n.value.has(l.id)}]),fill:"none",stroke:"currentColor",viewBox:"0 0 24 24"},[...u[1]||(u[1]=[p("path",{"stroke-linecap":"round","stroke-linejoin":"round","stroke-width":"2",d:"M9 5l7 7-7 7"},null,-1)])],2))],10,Fy)]),n.value.has(l.id)?(_(),N("ul",Ry,[(_(!0),N(X,null,fe(l.items,m=>(_(),N("li",{key:m.id},[p("a",{href:"#",onClick:Xt(g=>s(m.id),["prevent"]),class:"block px-4 py-2 text-sm rounded-lg text-gray-600 hover:bg-gray-50 hover:text-gray-900 transition-colors"},K(m.name),9,Py)]))),128))])):Ne("",!0)]))),128))])])])]),p("div",By,[p("div",Ly,[u[14]||(u[14]=Ot(`<section id="introduction" class="mb-12" data-v-9b552221><h2 class="text-2xl font-bold text-gray-900 mb-4" data-v-9b552221>API Reference Overview</h2><p class="text-gray-700 mb-4" data-v-9b552221> This comprehensive API documentation provides detailed information about all ChronoUtilz functions, including parameters, return types, and usage examples. Each function is categorized according to the Three Pillars Architecture. </p><div class="grid grid-cols-1 md:grid-cols-3 gap-6 mt-6" data-v-9b552221><div class="border border-gray-200 rounded-lg p-4" data-v-9b552221><h3 class="font-semibold text-lg mb-2" data-v-9b552221>45+ Core Operations</h3><p class="text-gray-600 text-sm" data-v-9b552221>Date manipulation &amp; comparison functions</p></div><div class="border border-gray-200 rounded-lg p-4" data-v-9b552221><h3 class="font-semibold text-lg mb-2" data-v-9b552221>55+ Business Utilities</h3><p class="text-gray-600 text-sm" data-v-9b552221>Real-world business logic functions</p></div><div class="border border-gray-200 rounded-lg p-4" data-v-9b552221><h3 class="font-semibold text-lg mb-2" data-v-9b552221>35+ Formatting &amp; Parsing</h3><p class="text-gray-600 text-sm" data-v-9b552221>Advanced presentation functions</p></div></div></section><section id="types" class="mb-12" data-v-9b552221><h2 class="text-2xl font-bold text-gray-900 mb-6" data-v-9b552221>Type Definitions</h2><div class="mb-8" data-v-9b552221><h3 class="text-xl font-semibold text-gray-900 mb-4" data-v-9b552221>DateFormat</h3><p class="text-gray-700 mb-4" data-v-9b552221>Supported date format patterns:</p><div class="bg-gray-50 rounded-lg p-4" data-v-9b552221><pre class="text-sm" data-v-9b552221><code data-v-9b552221>&#39;YYYY-MM-DD&#39; | &#39;MM/DD/YYYY&#39; | &#39;DD/MM/YYYY&#39; | &#39;YYYY-MM-DD HH:mm:ss&#39; | &#39;DD MMM YYYY&#39; | &#39;MMM DD, YYYY&#39; | &#39;HH:mm:ss&#39; | &#39;hh:mm A&#39;</code></pre></div></div><div class="mb-8" data-v-9b552221><h3 class="text-xl font-semibold text-gray-900 mb-4" data-v-9b552221>TimeUnit</h3><p class="text-gray-700 mb-4" data-v-9b552221>Units of time for duration calculations:</p><div class="bg-gray-50 rounded-lg p-4" data-v-9b552221><pre class="text-sm" data-v-9b552221><code data-v-9b552221>&#39;millisecond&#39; | &#39;second&#39; | &#39;minute&#39; | &#39;hour&#39; | &#39;day&#39; | &#39;week&#39; | &#39;month&#39; | &#39;quarter&#39; | &#39;year&#39;</code></pre></div></div><div class="mb-8" data-v-9b552221><h3 class="text-xl font-semibold text-gray-900 mb-4" data-v-9b552221>IANATimezone</h3><p class="text-gray-700 mb-4" data-v-9b552221>IANA Timezone identifiers - Complete standardized list:</p><div class="bg-gray-50 rounded-lg p-4" data-v-9b552221><pre class="text-sm" data-v-9b552221><code data-v-9b552221>// Examples of valid IANA timezone identifiers
&#39;America/New_York&#39; | &#39;Europe/London&#39; | &#39;Asia/Tokyo&#39; | &#39;Australia/Sydney&#39; | &#39;UTC&#39; | ...</code></pre></div></div></section>`,2)),(_(!0),N(X,null,fe(o.value,l=>(_(),N("div",{key:l.id},[p("section",{id:l.id,class:Ge(["mb-12",{hidden:t.value!==l.id}])},[p("h2",Gy,K(l.name),1),(_(!0),N(X,null,fe(l.items,m=>(_(),N("div",{key:m.id,class:"mb-10"},[p("div",{id:m.id,class:"border-b border-gray-200 pb-4 mb-6"},[p("h3",Wy,K(m.name),1),p("p",qy,K(m.description),1)],8,Uy),p("div",$y,[u[4]||(u[4]=p("h4",{class:"font-medium text-gray-900 mb-2"},"Signature",-1)),p("pre",Vy,[u[2]||(u[2]=ye("                    ",-1)),p("code",null,K(m.signature),1),u[3]||(u[3]=ye(`
                  `,-1))])]),m.parameters&&m.parameters.length>0?(_(),N("div",jy,[u[6]||(u[6]=p("h4",{class:"font-medium text-gray-900 mb-2"},"Parameters",-1)),p("div",Ky,[p("table",Qy,[u[5]||(u[5]=p("thead",{class:"bg-gray-100"},[p("tr",null,[p("th",{class:"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"},"Name"),p("th",{class:"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"},"Type"),p("th",{class:"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"},"Required"),p("th",{class:"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"},"Description")])],-1)),p("tbody",Zy,[(_(!0),N(X,null,fe(m.parameters,g=>(_(),N("tr",{key:g.name},[p("td",Jy,K(g.name),1),p("td",Xy,[p("span",eg,K(g.type),1)]),p("td",tg,[p("span",{class:Ge(g.required?"text-red-600":"text-green-600")},K(g.required?"Yes":"No"),3)]),p("td",ag,K(g.description),1)]))),128))])])])])):Ne("",!0),m.returns?(_(),N("div",ng,[u[8]||(u[8]=p("h4",{class:"font-medium text-gray-900 mb-2"},"Returns",-1)),p("div",rg,[p("p",ig,[u[7]||(u[7]=p("span",{class:"font-semibold"},"Type:",-1)),p("span",sg,K(m.returns.type),1)]),p("p",og,K(m.returns.description),1)])])):Ne("",!0),m.exceptions&&m.exceptions.length>0?(_(),N("div",dg,[u[10]||(u[10]=p("h4",{class:"font-medium text-gray-900 mb-2"},"Exceptions",-1)),p("div",ug,[p("table",cg,[u[9]||(u[9]=p("thead",{class:"bg-gray-100"},[p("tr",null,[p("th",{class:"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"},"Exception"),p("th",{class:"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"},"Condition")])],-1)),p("tbody",lg,[(_(!0),N(X,null,fe(m.exceptions,g=>(_(),N("tr",{key:g.type},[p("td",mg,[p("span",pg,K(g.type),1)]),p("td",fg,K(g.condition),1)]))),128))])])])])):Ne("",!0),m.example?(_(),N("div",yg,[u[13]||(u[13]=p("h4",{class:"font-medium text-gray-900 mb-2"},"Example",-1)),p("pre",gg,[u[11]||(u[11]=ye("                    ",-1)),p("code",null,K(m.example),1),u[12]||(u[12]=ye(`
                  `,-1))])])):Ne("",!0)]))),128))],10,Hy)]))),128))])])])]))}},Dg=eu(hg,[["__scopeId","data-v-9b552221"]]),bg=[{path:"/",name:"Home",component:mp},{path:"/core-operations",name:"CoreOperations",component:xf},{path:"/business-utilities",name:"BusinessUtilities",component:kf},{path:"/formatting-parsing",name:"FormattingParsing",component:_f},{path:"/timezone-localization",name:"TimezoneLocalization",component:Ff},{path:"/comparison-validation",name:"ComparisonValidation",component:Hf},{path:"/utility-functions",name:"UtilityFunctions",component:$f},{path:"/documentation",name:"Documentation",component:Ay},{path:"/api-docs",name:"APIDocs",component:Dg}],wg=wm({history:Zl(),routes:bg});Dl(Jm).use(wg).mount("#app");
